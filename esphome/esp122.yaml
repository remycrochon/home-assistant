substitutions:
  device_name: esp122
  adress_ip: "192.168.0.122"
  
esphome:
  name: ${device_name}

esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
  networks:
    - ssid: !secret wifi_esp
      password: !secret mdpwifi_esp
      priority: 1
    - ssid: !secret wifi
      password: !secret mdpwifi
      priority: 0
  reboot_timeout: 5min
  manual_ip:
    static_ip: ${adress_ip}
    gateway: 192.168.0.254
    subnet: 255.255.255.0
    dns1: !secret dns1
    dns2: !secret dns2
    
# Utilisez la LED de l'appareil comme LED d'état, qui clignotera s'il y a des avertissements (lent) ou des erreurs (rapide)
status_led:
  pin:
    number: GPIO23
    inverted: true
logger:
  level: debug

api:
  
ota:
  platform: esphome

web_server:
  port: 80

# Capteur de statut distant (ESP178)
binary_sensor:
  - platform: homeassistant
    name: "ESP178 Piscine Status"
    entity_id: binary_sensor.uptimekuma_esp178_piscine
    id: etat_esp178

# Déclenchement du reset si le capteur passe à off pendant plus de 30s
  - platform: template
    name: "Surveillance ESP178"
    lambda: |-
      return id(etat_esp178).state;

    on_release:
      then:
        - delay: 30s
        - if:
            condition:
              binary_sensor.is_off: etat_esp178
            then:
              - logger.log: "ESP178 Hors ligne, déclenchement du reset"
              - switch.turn_on: relais_reset_piscine
              - delay: 2s  # durée du reset (ajuste si nécessaire)
              - switch.turn_off: relais_reset_piscine

  - platform: status
    name: "Status"

switch:   
  - platform: gpio
    name: "R1"
    pin: GPIO16
    id: relais_reset_piscine

  - platform: restart
    name: "Restart"
