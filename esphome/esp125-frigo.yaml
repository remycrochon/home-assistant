substitutions:
  device_name: esp125-frigo
  adress_ip: "192.168.0.125"

esphome:
  name: ${device_name}

esp32:
  board: esp32dev
  
# Enable logging
logger:

api:

ota:
  - platform: esphome

captive_portal:

wifi:
  networks:
    - ssid: !secret wifi_esp
      password: !secret mdpwifi_esp
  reboot_timeout: 5min

  manual_ip:
    static_ip: ${adress_ip}
    gateway: 192.168.0.254
    subnet: 255.255.255.0
    dns1: !secret dns1
    dns2: !secret dns2

web_server:
  port: 80

one_wire:
  - platform: gpio  
    pin: GPIO4 

########################################################
# START THE HEATER CONTROLLER SETUP
########################################################
number:
  ## RECEIVE kp,ki and kd parameters from input_text.kx helpers in 
  # Home Assistant. See the PID controller below
  # These helper values will get saved to flash thus permanently over-riding 
  # the initial values set in the PID below.

  # KP
  - platform: template
    name: kp
    icon: mdi:chart-bell-curve
    restore_value: true
    min_value: 0
    max_value: 50
    step: 0.00001
    set_action: 
      lambda: |- 
        id(pid_climate).set_kp( x );
  # KI
  - platform: template
    name: ki
    icon: mdi:chart-bell-curve
    restore_value: true
    min_value: 0
    max_value: 50
    step: 0.00001
    set_action: 
      lambda: id(pid_climate).set_ki( x );

  # KD
  - platform: template
    name: kd
    icon: mdi:chart-bell-curve
    restore_value: true
    min_value: -50
    max_value: 50
    step: 0.00001
    set_action: 
      lambda: id(pid_climate).set_kd( x );


sensor:
  - platform: dallas_temp
    name: "Température DS18B20"
    id: temp_ds18b20
    device_class: temperature
    state_class: "measurement"
    update_interval: 10s

  - platform: adc
    pin: GPIO34
    id: adc_ctn
    attenuation: 12db
    update_interval: 10s

  - platform: ntc
    sensor: res_ntc
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 20kOhm
    name: "Température CTN"
    id: temp_ctn

  # === CTN 20kΩ sur ADC ===
  - platform: resistance
    id: res_ntc
    sensor: adc_ctn
    configuration: DOWNSTREAM
    resistor: 20kOhm
    reference_voltage: 3.3

# --- Capteur puissance PID ---
  - platform: pid
    name: "PID Sortie"
    type: HEAT

  - platform: template
    name: P terme
    id: p_term
    unit_of_measurement: "%"
    accuracy_decimals: 2

  - platform: template
    name: I terme
    id: i_term
    unit_of_measurement: "%"
    accuracy_decimals: 2

  - platform: template
    name: D terme
    id: d_term
    unit_of_measurement: "%"
    accuracy_decimals: 2

  - platform: template
    name: output value
    unit_of_measurement: "%"
    id: o_term
    accuracy_decimals: 2

  - platform: template
    name: error value
    id: e_term
    accuracy_decimals: 2

button:
  - platform: template
    name: "PID Climate Autotune"
    on_press:
      - climate.pid.autotune: pid_climate

# Sortie PWM du chauffage
output:
  - platform: ledc
    pin: GPIO23
    frequency: 1000 Hz
    id: pwm_heater

            
# --- Mode manuel (light dimmable) ---
light:
  - platform: monochromatic
    output: pwm_heater
    id: manual_heater
    name: "Sortie Chauffage (Manuel)"
    restore_mode: ALWAYS_OFF

# --- Sélecteur de mode ---
switch:
  - platform: template
    name: "Mode Manuel Chauffage"
    id: chauffage_mode_manuel
    optimistic: true
    restore_mode: ALWAYS_OFF
    turn_on_action:
      - logger.log: "Mode manuel activé : PID désactivé"
      - climate.control:
          id: pid_climate
          mode: "OFF"
      - light.turn_on:
          id: manual_heater
          brightness: 0%  # au repos à 0
    turn_off_action:
      - logger.log: "Mode manuel désactivé : PID activé"
      - light.turn_off:
          id: manual_heater
      - climate.control:
          id: pid_climate
          mode: HEAT

# --- Lier l'ID du PID pour contrôle ---
climate:
  - platform: pid
    id: pid_climate   # 
    name: "Regulation PID"
    sensor: temp_ds18b20
    default_target_temperature: 1°C
    heat_output: pwm_heater
    control_parameters:
      kp: 0.15472
      ki: 0.00149
      kd: 4.02369
      output_averaging_samples: 5
      derivative_averaging_samples: 5
    deadband_parameters:
      threshold_high: 1°C
      threshold_low: -1°C
    visual:
      min_temperature: 0°C
      max_temperature: 70°C
      temperature_step:
        target_temperature: 0.1
        current_temperature: 0.1
    on_state:
      - sensor.template.publish:
          id: p_term
          state: !lambda 'return -id(pid_climate ).get_proportional_term() * 100.0;'
      - sensor.template.publish:
          id: i_term
          state: !lambda 'return -id(pid_climate ).get_integral_term()* 100.0;'
      - sensor.template.publish:
          id: d_term
          state: !lambda 'return -id(pid_climate ).get_derivative_term()* 100.0;'
      - sensor.template.publish:
          id: o_term
          state: !lambda 'return -id(pid_climate).get_output_value()* 100.0;'
      - sensor.template.publish:
          id: e_term
          state: !lambda 'return -id(pid_climate ).get_error_value();'        
