# https://www.gotronic.fr/pj2-wt32-eth01-datasheet-v1-1-1-2810.pdf
#Pin Name Description
#1 EN1 Enable signal, active high
#2 CFG IO32, CFG                       ---<
#3 485_EN Enable pin of IO33, RS485    
#4 RXD IO5, RXD2                       
#5 TXD IO17, TXD2                      
#6 GND GND
#7 3V3 3V3 power supply
#8 GND GND
#9 5V 5V power supply
#10 LINK Network connection indicator pin
#11 GND GND
#12 IO39 IO39, only supports input
#13 IO36 IO36, only supports input
#14 IO15 IO15
#15 I014 IO14
#16 IO12 IO12
#17 IO35 IO35, only supports input
#18 IO4 IO4                           ---<
#19 IO2 IO2                           ---<
#20 GND GND

substitutions:
  device_name: esp140-piscine
  adress_ip: "192.168.0.140"
  time_timezone: "Europe/Paris"
  # Definition des seuils admissibles
  pu_fonctionnement: "200"
  pression_max: "15"

packages:
  ph: !include pack_esp140/ph.yaml
  chlore: !include pack_esp140/chlore.yaml    
  volet: !include pack_esp140/couverture_flottante.yaml
  appoint_eau: !include pack_esp140/appoint_eau.yaml
  hors_gel: !include pack_esp140/hors_gel.yaml
  mesure_elec: !include pack_esp140/mesure_elec.yaml
  mesure_pression: !include pack_esp140/mesure_pression.yaml

esp32:
  board: esp-wrover-kit


# Enable Home Assistant API
api:

ota:
  platform: esphome
  password: "7f5924bc7de9aceb5b6b434afab874c4" # Ne pas supprimer

web_server:
  port: 80

ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO0_IN
  phy_addr: 1
  power_pin: GPIO16
  
  manual_ip:
    static_ip: ${adress_ip}
    gateway: 192.168.0.254
    subnet: 255.255.255.0
    dns1: 192.168.0.254

esphome:
  name: esp140-piscine  

  on_boot:
    priority: 600
    then:
      - lambda: |-
          #define CONVERT_SECONDS(total_seconds, hh, mm, ss) \
          do { \
            int total = static_cast<int>(total_seconds); \
            hh = total / 3600; \
            int r = total - hh * 3600; \
            mm = r / 60; \
            ss = r - mm * 60; \
            hh = std::min(hh, 23); \
            mm = std::min(mm, 59); \
            ss = std::min(ss, 59); \
          } while (0)

      # Initialisation des templates Ph
      # A supprimer si pH non utilisé
      - sensor.template.publish:
          id: _tps_injection_ph_moins
          state: 0.0
      - sensor.template.publish:
          id: _vol_injection_ph_moins
          state: 0.0
      # Initialisation du template Chlore
      # A supprimer si Chlore non utilisé
      - sensor.template.publish:
          id: _tps_injection_chlore
          state: 0.0
                    
      # Messages de Boot
      - delay: 20s
      - lambda: |-
          std::string mess = "Boot ESP178";
          id(telegram_msg_buffer) = mess;
      - homeassistant.service:
          service: notify.telegram
          data:
            message: !lambda 'return id(telegram_msg_buffer).c_str();'
        # Message Telegram
      - lambda: |-                
          std::string mess= "ESP140 Boot";
          id(_message_telegram)->execute(mess.c_str());            


# Utilisez la LED de l'appareil comme LED d'état, qui clignotera s'il y a des avertissements (lent) ou des erreurs (rapide)
#status_led:
#  pin:
#    number: GPIO10
#    inverted: true  

# Enable logging
logger:
  level: DEBUG
  baud_rate: 0
  
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Paris
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org
    on_time:
      # reset le compteur de temps à minuit
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - sensor.duty_time.reset: _temps_fonctionnement_ppe_piscine_jour

      # Notification du rapport journalier sur Telegram
      - seconds: 00
        minutes: 59
        hours: 23
        then:
          - lambda: |-
              std::string mess = "ESP178 Temps Fonctionnement filtration";
              id(_message_telegram_v2)->execute(mess,id(_temps_fonctionnement_ppe_piscine_jour).state);
          - lambda: |-          
              std::string mess = "ESP178 Tps Fonct ppe pH";
              id(_message_telegram_v2)->execute(mess,id(_temps_fonctionnement_ppe_ph).state);
          - lambda: |-          
              std::string mess = "ESP178 Tps Fonct ppe Chl";
              id(_message_telegram_v2)->execute(mess,id(_temps_fonctionnement_ppe_chlore).state);

# Connection Bus i2c (Afficheur, EZO,...)
i2c:
  sda: GPIO17
  scl: GPIO4
  scan: true
  id: bus_a

# Connection sonde(s) de température DS18b20
one_wire:
  - platform: gpio
    pin: GPIO14

# Extension E/S
sx1509:
  - id: sx1509_hub1
    address: 0x3E

# déclaration des variables "globals"
globals:
    # température de fonctionnement en début de pompage avant prise en compte de la mesure de température
    # en secondes
    - id: g_memoire_temp_eau
      type: float
      restore_value: yes
      initial_value: '25'

    - id: flag_tempo_ppe_filtre
      type: bool
      restore_value: no
      initial_value: 'false'

    # mémorise la durée de filtation dans les différents modes de fonctionnement
    - id: g_tps_filtration
      type: float
      restore_value: no

    # Limite haute du temps de filtration "en heure"
    - id: g_temps_max_filtration
      type: float
      initial_value: '23'
    # Limite basse du temps de filtration (en heure)
    - id: g_temps_min_filtration
      type: float
      initial_value: '5'
    # Paliers temperature/Temps filtration avec le mode "Palier"
    # Seuils Température en °C
    # la durée est calculée manuellement par rapport au volume de la piscine: Vol=9*4*1.4=50.4 m3
    # et le débit de la pompe: Qppe Théorique=12m3/h -> retenu:12m3/h
    # donc 1 cycle= 50.4/12=4.2h
    # il faut filtrer au minimum:
    # T°eau<10° = 0 cycle
    # 10°<T°eau<15° = 1 cycle = 4.2h => 4h
    # 15°<T°eau<20° = 2 cycles = 8.4h => 8h
    # 20°<T°eau<25° = 3 cycles = 12.6h => 12h
    # 25°<T°eau = 3 ou 4 cycles = 12.6h => 12h
    # T°Eau>25° => 14h
    # 
    # si beaucoup de baigneurs de jour alors augmenter le coeff
    # Mode "Palier":
      # Si T°eau< Seuil Temp1 alors Durée = Tps paliers 1
      # Sinon
      # Si T°eau>= Seuil Temp1 et T°eau< Seuil Temp2 alors Durée = Tps paliers 2
      # Sinon
      # Si T°eau>= Seuil Temp2 et T°eau< Seuil Temp3 alors Durée = Tps paliers 3
      # Sinon
      # Si T°eau>= Seuil Temp3 et T°eau< Seuil Temp4 alors Durée = Tps paliers 4
      # Sinon
      # Durée = Tps paliers 5
    - id: g_temp_palier1
      type: float
      initial_value: '10'
    - id: g_temp_palier2
      type: float
      initial_value: '15'
    - id: g_temp_palier3
      type: float
      initial_value: '20'
    - id: g_temp_palier4
      type: float
      initial_value: '25' 
  # nb d'heures de filtration (en h)
    - id: g_tps_palier1
      type: float
      initial_value: '1'      
    - id: g_tps_palier2
      type: float
      initial_value: '4'
    - id: g_tps_palier3
      type: float
      initial_value: '8'
    - id: g_tps_palier4
      type: float
      initial_value: '12'
    - id: g_tps_palier5
      type: float
      initial_value: '14'

    # Constantes utilisées dans le mode "Abaque"  
    - id: g_abaque_a
      type: float
      initial_value: '0.00335'
    - id: g_abaque_b
      type: float
      initial_value: '-0.14953'
    - id: g_abaque_c
      type: float
      initial_value: '2.43489'
    - id: g_abaque_d
      type: float
      initial_value: '-10.72859'

    # Variables intermediaires utilisées dans le calcul "heure debut et fin"
    - id: g_hh
      type: int
    - id: g_mm
      type: int
    - id: g_ss
      type: int
    
    # stocke temporairement le message à envoyer à telegram
    - id: telegram_msg_buffer
      type: std::string
      restore_value: no
      initial_value: '""'

    - id: convert_seconds
      type: std::function<void(int, int&, int&, int&)>

# déclaration des modes de fonctionnement dans des "input select"
select:
  - platform: template
    name: "Mode_Fonctionnement_filtration"
    optimistic: true
    restore_value: true
    options:
      - Palier
      - Classique
      - Abaque
      - Horaire
      - Ma_f
      - At_f
    id: _Mode_Fonctionnement_filtration
    on_value: 
      then:
        - script.execute: _fonctionnement_filtration        
        - logger.log:
            format: "Mode Fonct Filtration --> %s"
            args: [ 'id(_Mode_Fonctionnement_filtration).state.c_str()' ]
            level: INFO
        - lambda: |-
            char buf[64];
            snprintf(buf, sizeof(buf), "Mode Fonct Filtration --> %s", id(_Mode_Fonctionnement_filtration).state.c_str());
            id(_log_message)->execute(std::string(buf));

button:
  # Ce bouton stoppe la filtration pour la journée (cas de mauvais temps par ex)
  # Durée "Arret Jour" en heure on multiplie par 3600 pour avoir des secondes 
  # puis par 1000 pour des millisecondes: unité du delay lambda
  - platform: template
    name: "BP_arret_jour"
    id: _arret_jour
    on_press: 
      then:
      - switch.template.publish:
          id: ent_at_force
          state: ON
      - logger.log:
          format: "Début arret jour pour : %.0f h"
          args: [ 'id(duree_at_jour).state' ]
          level: INFO         
      - delay: !lambda "return id(duree_at_jour).state*3600*1000;"
      - switch.template.publish:
          id: ent_at_force
          state: OFF
      - logger.log:
          format: "Fin arret jour de : %.0f h"
          args: [ 'id(duree_at_jour).state' ]
          level: info 
  
  # Lance un test
  - platform: template
    name: "BP_Pour_Test"
    on_press:
      - script.execute: _test

binary_sensor:
  #Etat de la connection
  - platform: status
    name: "Status"

  # Pompe en fonctionnement
  # Remplacer le seuil (threshold) par du négatif pour simuler
  - platform: analog_threshold
    name: "Ppe_en_fonctionnement"
    id: ppe_filt_en_fonctionnement
    sensor_id: puissance
    threshold: ${pu_fonctionnement} # Défini dans Substitution en Watt
    on_press:
      - lambda: |-                
          std::string mess= "ESP178 Debut Filtration";
          id(_message_telegram)->execute(mess.c_str());           
    on_release: 
      - lambda: |-                
          std::string mess= "ESP178 Fin Filtration";
          id(_message_telegram)->execute(mess.c_str());    


# Définiton des "Time"
datetime:
  - platform: template
    id: heure_pivot
    type: time
    name: "heure_pivot"
    optimistic: yes
    initial_value: "13:30:00"
    restore_value: true

  - platform: template
    id: h_debut
    type: time
    name: "h_debut"
    optimistic: yes
    initial_value: "00:00:00"
    restore_value: false
    
  - platform: template
    id: h_fin
    type: time
    name: "h_fin"
    optimistic: yes
    initial_value: "00:00:00"
    restore_value: false

  - platform: template
    id: duree_filtration
    type: time
    name: "duree_filtration"
    optimistic: yes
    initial_value: "00:00:00"
    restore_value: false

  - platform: template
    id: debut_mode_horaire
    type: time
    name: "debut_mode_horaire"
    optimistic: yes
    restore_value: true

  - platform: template
    id: duree_mode_horaire
    type: time
    name: "duree_mode_horaire"
    optimistic: yes
    restore_value: true

# Input Number
number:
  # Simulation Temp eau 
  - platform: template
    name: "simule_Temp"
    id: simul_temp_eau
    optimistic: true
    restore_value: true
    mode: box
    min_value: -10
    max_value: 50
    device_class: temperature
    step: 0.01 
    on_value: 
      then:
        - lambda: |-
            id(g_memoire_temp_eau)=id(temp_eau).state;     

  # Temps de recirculation avant prise en compte mesure de température
  - platform: template
    name: "tempo_recirculation"
    id: tempo_mesure_temp
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 900
    unit_of_measurement: "s"
    step: 1
    icon: mdi:clock

  # Coefficient de filtration
  - platform: template
    name: "coeff_Filtration"
    id: coeff_filtration
    optimistic: true
    restore_value: true
    mode: box
    min_value: 50
    max_value: 150
    unit_of_measurement: "%"
    step: 1
    icon: mdi:percent

  # Durée de l'arret sur la journée en lien avec "arret_jour"
  - platform: template
    name: "Durée-Arret_jour"
    id: duree_at_jour
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 24
    unit_of_measurement: "h"
    step: 0.01

sensor:
  # - platform: wifi_signal
  #    name: "WiFi Signal Pourcent"
  #    id: wifi_signal_pourcent
  #    update_interval: 30s
  #    unit_of_measurement: "%"
  #    accuracy_decimals: 0
  #    filters:
  #      - lambda: return (2 * (id(wifi_signal_pourcent).raw_state + 100));  # Convertit RSSI dBm en %

  - platform: dallas_temp
    #address: 0x060321117ae89b28
    name: "temperature_eau"
    id: temp_eau
    device_class: temperature
    state_class: "measurement"     
    filters:
      - filter_out: 0.0
        # Etalonné le 26 Aout 2024  avec une PT100       
      #- calibrate_linear:
      #  - 0 -> 0
      #  - 26.6 -> 27.7

  # Calcul du temps de fonctionnement
  # Pompe piscine
  - platform: duty_time
    id: _temps_fonctionnement_ppe_piscine_jour
    name: 'temps_ma_ppe_piscine_jour'
    sensor: ppe_filt_en_fonctionnement
    restore: true
    filters: 
      - round: 0

# déclaration des "text_sensors"
text_sensor:
  # Affichage des heures de filtration dans Home Assistant
  - platform: template
    id: aff_heure_filtration
    name: "affich_heure_filtration"
    icon: mdi:timer

# Déclaration des switches: cde des relais
switch:
  - platform: gpio
    name: "cde_pompe_filtration"
    pin:
      sx1509: sx1509_hub1
      number: 4
      mode:
        output: true
      inverted: false      
    id: cde_ppe_filtration
    on_turn_on:
      then:
        - delay: !lambda "return id(tempo_mesure_temp).state*1000;" # Durée de fonctionnement de la pompe avant prise en compte de la température eau
        - logger.log:
            format: "Set tempo cde ppe"
            level: DEBUG
        - lambda: |-
            id(flag_tempo_ppe_filtre) = true;
    on_turn_off: 
      then:
        - logger.log:
            format: "Reset tempo cde ppe"
            level: DEBUG
        - lambda: |-
            id(flag_tempo_ppe_filtre) = false;
        - script.stop: _regul_ph
        - switch.turn_off: cde_ppe_ph_moins
        - script.stop: _regul_chlore
        - switch.turn_off: cde_ppe_chlore

  - platform: gpio
    name: "cde_eclairage"
    pin:
      sx1509: sx1509_hub1
      number: 9
    id: cde_eclairage

  - platform: restart
    name: "Restart"

  # Switch Forçage Arret pompe filtration en mode Auto
  #
  - platform: template
    name: "ent_arret_forcé"
    id: ent_at_force
    optimistic: True
    lambda: |-
      if (id(ent_at_force).state) {
        return true;
      } else {
        return false;
      }
    on_turn_on: 
      then:
        - script.execute: _fonctionnement_filtration        
        - switch.turn_off: cde_ppe_filtration
        - logger.log: 
            format: "entrée_arret_forcé_ppe_filtration"
            level: DEBUG
        # RAZ de la durée de filtration
        - datetime.time.set:
            id: duree_filtration
            time: !lambda |-
              return {second: 0, minute: 0, hour: 0};                
        - lambda: |-
            std::string mess= "Ent At Forcé";
            id(aff_heure_filtration).publish_state(mess.c_str());
        # Message Telegram
        - lambda: |-                
            std::string mess= "ESP178 Debut Arret Forcé Filtration";
            id(_message_telegram)->execute(mess.c_str());                 

    on_turn_off: 
      then:
        # Message Telegram
        - lambda: |-                
            std::string mess= "ESP178 Fin arret Forcé Filtration";
            id(_message_telegram)->execute(mess.c_str());              
        - script.execute: _fonctionnement_filtration

# Gestion de l'afficheur 
display:
  - platform: lcd_pcf8574
    dimensions: 16x2
    address: 0x27
    update_interval: 10s
    lambda: |-
      it.printf(0,0,"Ph=%.2f",id(ph_ezo).state);
      it.printf(0,1,"ORP=%.2f",id(orp_ezo).state);
      it.printf(8,0,"P=%.3f",id(pression_filtre).state);
      it.printf(8,1,"T=%.1f",id(g_memoire_temp_eau));

#it.printf(15,1,"T=%.1s",id(mode_f).state);

# Déclenchement des scripts à intervalles réguliers
interval:
  - interval: 5s
    then:      
      - script.execute: _fonctionnement_filtration

  - interval: 5s
    then: 
      - script.execute: _memorisation_temperature_eau

  #- interval: 20s # Test
  #  then: 
  #    - script.execute: _test

# Déclaration des "Scripts"
script:
  # Script utilisé pour tester", peut etre supprimer si inutilise
  - id: _test
    then:
      - lambda: |-
          std::string mess = "ESP178 Temps Fonctionnement filtration";
          id(_message_telegram_v2)->execute(mess,id(_temps_fonctionnement_ppe_piscine_jour).state);
      - lambda: |-          
          std::string mess = "ESP178 Tps Fonct ppe pH";
          id(_message_telegram_v2)->execute(mess,id(_temps_fonctionnement_ppe_ph).state);
      - lambda: |-          
          std::string mess = "ESP178 Tps Fonct ppe Chl";
          id(_message_telegram_v2)->execute(mess,id(_temps_fonctionnement_ppe_chlore).state);

  - id: _testold
    then:
      - lambda: |-
          std::string mess = "ESP178 Rapport Journalier\n";

          CONVERT_SECONDS(id(_temps_fonctionnement_ppe_piscine_jour).state, id(g_hh), id(g_mm), id(g_ss));
          char buf1[32];
          snprintf(buf1, sizeof(buf1), "Tps Filtration: %02d:%02d:%02d\n", id(g_hh), id(g_mm), id(g_ss));
          mess += buf1;

          CONVERT_SECONDS(id(_temps_fonctionnement_ppe_ph).state, id(g_hh), id(g_mm), id(g_ss));
          snprintf(buf1, sizeof(buf1), "Tps Ppe pH: %02d:%02d:%02d\n", id(g_hh), id(g_mm), id(g_ss));
          mess += buf1;

          CONVERT_SECONDS(id(_temps_fonctionnement_ppe_chlore).state, id(g_hh), id(g_mm), id(g_ss));
          snprintf(buf1, sizeof(buf1), "Tps Ppe Chlore: %02d:%02d:%02d\n", id(g_hh), id(g_mm), id(g_ss));
          mess += buf1;

          id(_message_telegram)->execute(mess);
  # Si la pompe tourne depuis au moins "tempo_recirculation" on raffraichit la memoire de la temperature eau qui est
  # prise en compte dans les scripts.
  # sinon on travaille avec la témpérature mémorisée avant l'arret précédent
  - id: _memorisation_temperature_eau
    then:
      - if:
          condition:
            lambda: 'return id(flag_tempo_ppe_filtre) == true;'
          then:
            - lambda: |-
                id(g_memoire_temp_eau)=id(temp_eau).state;            
          else:
            - lambda: |-
                id(g_memoire_temp_eau)=id(g_memoire_temp_eau);
      - logger.log:
          format: "Flag Temp: %i / Temp Dallas: %.2f / Mem Temp: %.2f"
          args: [ 'id(flag_tempo_ppe_filtre)','id(temp_eau).state','id(g_memoire_temp_eau)' ]
          level: DEBUG

   # Calcul de la durée de la filtration en fonction du mode de fonctionnement selectionné
  - id: _fonctionnement_filtration
    then:
      - logger.log:
          format: "Switch at force 2: %i "
          args: [ 'id(ent_at_force).state' ]
          level: DEBUG

      # Entrée Arret Forcé par Binary_sensor "Arret force"
      - if:
          condition:
            - lambda: 'return id(ent_at_force).state == true;'
          then:
            - switch.turn_off: cde_ppe_filtration

      # Entrée Marche Forcée HG
      - if:
          condition:
            - lambda: 'return id(g_flag_hg) == true;'
          then:
            - switch.turn_on: cde_ppe_filtration
            - logger.log: 
                format: "Marche HG Ppe filtration"
                level: INFO
            - logger.log:
                format: "Flag HG: %i / Temp Ext: %.2f / S1: %.2f / S2: %.2f"
                args: [ 'id(g_flag_hg)','id(temp_ext).state','id(s1_temp_hg).state','id(s2_temp_hg).state' ]
                level: DEBUG                
            - lambda: |-
                std::string mess= "Ma HG";
                id(aff_heure_filtration).publish_state(mess.c_str());

            # RAZ de la durée de filtration
            - datetime.time.set:
                id: duree_filtration
                time: !lambda |-
                  return {second: 0, minute: 0, hour: 0};

      # Mode Arret forcé Input Select
      - if:
          condition:
              - lambda: 'return id(_Mode_Fonctionnement_filtration).state == "At_f";'
              - lambda: 'return id(ent_at_force).state == false;'
              - lambda: 'return id(g_flag_hg) == false;'
          then:
            - switch.turn_off: cde_ppe_filtration
            - logger.log: 
                format: "arret_forcé_ppe_filtration"
                level: DEBUG
            - lambda: |-
                std::string mess="At_force";
                id(aff_heure_filtration).publish_state(mess.c_str());

      # Mode Marche forcée Input Select
      - if:
          condition:
            - lambda: 'return id(_Mode_Fonctionnement_filtration).state == "Ma_f";'
            - lambda: 'return id(ent_at_force).state == false;'
            - lambda: 'return id(g_flag_hg) == false;'
          then:
            - switch.turn_on: cde_ppe_filtration
            - logger.log: 
                format: "Marche_forcée_ppe_filtration"
                level: DEBUG
            - lambda: |-
                std::string mess="Ma_force";
                id(aff_heure_filtration).publish_state(mess.c_str());                

      # Mode "Palier":
      # Si T°eau< Seuil Temp1 alors Durée = Tps paliers 1
      # Sinon
      # Si T°eau>= Seuil Temp1 et T°eau< Seuil Temp2 alors Durée = Tps paliers 2
      # Sinon
      # Si T°eau>= Seuil Temp2 et T°eau< Seuil Temp3 alors Durée = Tps paliers 3
      # Sinon
      # Si T°eau>= Seuil Temp3 et T°eau< Seuil Temp4 alors Durée = Tps paliers 4
      # Sinon
      # Durée = Tps paliers 5
      - if:
          condition:
            - lambda: 'return id(_Mode_Fonctionnement_filtration).state == "Palier";'
            - lambda: 'return id(ent_at_force).state == false;'
            - lambda: 'return id(g_flag_hg) == false;'
          then:
            - lambda: |-
                if (id(g_memoire_temp_eau)<id(g_temp_palier1)){
                  id(g_tps_filtration)=id(g_tps_palier1);
                } else {
                  if (id(g_memoire_temp_eau)>=id(g_temp_palier1) && (id(g_memoire_temp_eau)<id(g_temp_palier2))){
                    id(g_tps_filtration)=id(g_tps_palier2);
                  } else {
                    if (id(g_memoire_temp_eau)>=id(g_temp_palier2) && (id(g_memoire_temp_eau)<id(g_temp_palier3))){
                    id(g_tps_filtration)=id(g_tps_palier3);
                    } else {
                      if (id(g_memoire_temp_eau)>=id(g_temp_palier3) && (id(g_memoire_temp_eau)<id(g_temp_palier4))){
                      id(g_tps_filtration)=id(g_tps_palier4);
                      } else {
                        id(g_tps_filtration)=id(g_tps_palier5);
                      }
                    }
                  }
                }
                
                id(g_tps_filtration)=id(g_tps_filtration)*id(coeff_filtration).state/100;

            - logger.log:
                format: "Mode: Palier / Valeur Mem Temp: %.2f / Tps Filtrat: %2f"
                args: [ 'id(g_memoire_temp_eau)','id(g_tps_filtration)' ]
                level: DEBUG
            - script.execute: _calcul_hdebut_hfin
      
      # Mode "Classique":
      # La durée de filtration en h est égale à la température de l'eau divisée par 2
      - if:
          condition:
            - lambda: 'return id(_Mode_Fonctionnement_filtration).state == "Classique";'
            - lambda: 'return id(ent_at_force).state == false;'     
            - lambda: 'return id(g_flag_hg) == false;'       
          then:
            - lambda: |-
                id(g_tps_filtration)=id(g_memoire_temp_eau)/2;
                id(g_tps_filtration)=min(id(g_temps_max_filtration),id(g_tps_filtration));
                id(g_tps_filtration)=max(id(g_temps_min_filtration),id(g_tps_filtration));
                id(g_tps_filtration)=id(g_tps_filtration)*id(coeff_filtration).state/100;
            - logger.log:
                format: "Mode Classique / Valeur Mem Temp: %.2f / Tps Filtrat: %2f"
                args: [ 'id(g_memoire_temp_eau)','id(g_tps_filtration)' ]
                level: DEBUG
            - script.execute: _calcul_hdebut_hfin
      
      # Mode "Abacus"
      #
      - if:
          condition:
            - lambda: 'return id(_Mode_Fonctionnement_filtration).state == "Abaque";'
            - lambda: 'return id(ent_at_force).state == false;'    
            - lambda: 'return id(g_flag_hg) == false;'        
          then:
            - lambda: |-
                  id(g_tps_filtration)=id(g_abaque_a)*pow(id(g_memoire_temp_eau),3)+id(g_abaque_b)*pow(id(g_memoire_temp_eau),2)+id(g_abaque_c)*id(g_memoire_temp_eau)+id(g_abaque_d);
                  id(g_tps_filtration)=id(g_tps_filtration)*id(coeff_filtration).state/100;
                  id(g_tps_filtration)=min(id(g_temps_max_filtration),id(g_tps_filtration));
                  id(g_tps_filtration)=max(id(g_temps_min_filtration),id(g_tps_filtration));
            - logger.log:
                format: "Mode Abaque / Valeur Mem Temp: %.2f / Tps Filtrat: %2f"
                args: [ 'id(g_memoire_temp_eau)','id(g_tps_filtration)' ]
                level: DEBUG
            - script.execute: _calcul_hdebut_hfin

      # Mode "Horaire"
      # Débute à l'heure programmée pour une durée programmée
      # je m'en sers surtout l'hiver
      - if:
          condition:
            - lambda: 'return id(_Mode_Fonctionnement_filtration).state == "Horaire";'
            - lambda: 'return id(ent_at_force).state == false;'
            - lambda: 'return id(g_flag_hg) == false;'
          then:
            - logger.log:
                format: "Mode Abaque / Valeur Mem Temp: %.2f"
                args: [ 'id(g_memoire_temp_eau)' ]
                level: DEBUG

            - datetime.time.set:
                id: h_debut
                time: !lambda |-
                  return {second: 0, minute: id(debut_mode_horaire).minute, hour: id(debut_mode_horaire).hour};

            - datetime.time.set:
                id: h_fin
                time: !lambda |-
                  return {second: 0, minute: static_cast<uint8_t>(id(h_debut).minute+id(duree_mode_horaire).minute), hour: static_cast<uint8_t>(id(h_debut).hour+id(duree_mode_horaire).hour)};
                  // return {second: 0, minute: id(h_debut).minute+id(duree_mode_horaire).minute, hour: id(h_debut).hour+id(duree_mode_horaire).hour};
            - lambda: |-
                std::string mess= std::to_string(id(h_debut).hour)+":"+std::to_string(id(h_debut).minute)+"/"+std::to_string(id(h_fin).hour)+":"+std::to_string(id(h_fin).minute);
                id(aff_heure_filtration).publish_state(mess.c_str());
                
            - script.execute: _calcul_ma_at_ppe_filtration

  # Calcul l'heure de debut et fin de filtration en fonction la durée de filtration et de l'heure pivot
  # La variable: g_tps_filtration contient la durée en heure
  - id: _calcul_hdebut_hfin
    mode: single
    then:
      #RAZ des secondes de l'heure pivot
      - datetime.time.set:
          id: heure_pivot
          time: !lambda |-
            return {second: 0,minute: id(heure_pivot).minute, hour: id(heure_pivot).hour};

      - logger.log:
          format: "HPivot %2d:%.2d:%2d"
          args: [ 'id(heure_pivot).hour', 'id(heure_pivot).minute', 'id(heure_pivot).second' ]
          level: DEBUG

      # Heure de debut = Heure pivot converti en minutes - temps filtration converti en minutes
      - lambda: |-
          static double dt=0;
          static double hp=0;
          
          hp = id(heure_pivot).hour*60+id(heure_pivot).minute;
          dt = id(heure_pivot).hour*60+id(heure_pivot).minute-((id(g_tps_filtration)/2)*60);

          id(g_hh)=int(dt/60);
          id(g_mm)=dt-id(g_hh)*60;

      - logger.log:
          format: "H debut Filtration %2d: %.2d"
          args: [ 'id(g_hh)', 'id(g_mm)' ]
          level: DEBUG

      - datetime.time.set:
          id: h_debut
          time: !lambda |-
            return {second: 0, minute: static_cast<uint8_t>(id(g_mm)), hour: static_cast<uint8_t>(id(g_hh))};

      # Heure de fin = Heure pivot converti en minutes + temps filtration converti en minutes
      - lambda: |-
          static double dt=0;
          static double hp=0;
          
          hp = id(heure_pivot).hour*60+id(heure_pivot).minute;
          dt = id(heure_pivot).hour*60+id(heure_pivot).minute+((id(g_tps_filtration)/2)*60);

          id(g_hh)=int(dt/60);
          id(g_mm)=dt-id(g_hh)*60;

      - logger.log:
          format: "H debut Filtration %2d:%.2d"
          args: [ 'id(g_hh)', 'id(g_mm)' ]
          level: DEBUG

      - datetime.time.set:
          id: h_fin
          time: !lambda |-
            return {second: 0, minute: static_cast<uint8_t>(id(g_mm)), hour: static_cast<uint8_t>(id(g_hh))};

      # Convertion et affichage de la durée de filtration en hh:mm
      - lambda: |-
          CONVERT_SECONDS(id(g_tps_filtration)*3600, id(g_hh), id(g_mm), id(g_ss));     
      - logger.log:
          format: "Durée Filtration %2d: %.2d Tps Filtrat: %2f"
          args: [ 'id(g_hh)', 'id(g_mm)', 'id(g_tps_filtration)'  ]
          level: DEBUG     
      - datetime.time.set:
          id: duree_filtration
          time: !lambda |-
            return {second: 0, minute: static_cast<uint8_t>(id(g_mm)), hour: static_cast<uint8_t>(id(g_hh))};
      
      - lambda: |-
          std::string mess= std::to_string(id(h_debut).hour)+":"+std::to_string(id(h_debut).minute)+"/"+std::to_string(id(heure_pivot).hour)+":"+std::to_string(id(heure_pivot).minute)+"/"+std::to_string(id(h_fin).hour)+":"+std::to_string(id(h_fin).minute);
          id(aff_heure_filtration).publish_state(mess.c_str());          

      - script.execute: _calcul_ma_at_ppe_filtration

  # Calcul la sortie de commande la pompe de filtration en fonction de l'heure actuelle, de l'heure de début et de l'heure de fin
  - id: _calcul_ma_at_ppe_filtration
    mode: single
    then:
      - lambda: |-
          auto time = id(sntp_time).now();
      - logger.log:
          format: "H now: %.2d:%2d:%d"
          args: [ 'id(sntp_time).now().hour', 'id(sntp_time).now().minute', 'id(heure_pivot).second' ]
          level: DEBUG
      - logger.log:
          format: "HT: %.2d - HD:%2d - HF:%d"
          args: [ 'id(sntp_time).now().hour*60+id(sntp_time).now().minute', 'id(h_debut).hour*60+id(h_debut).minute', 'id(h_fin).hour*60+id(h_fin).minute' ]
          level: DEBUG
      - if:
          condition:
            time.has_time:
          else:
            - logger.log:
                format: "L'heure n'est ni initialisée, ni validée!"
                level: INFO
      - if:
          condition:
            - lambda: 'return (id(sntp_time).now().is_valid());'
            - lambda: 'return (id(sntp_time).now().hour*60+id(sntp_time).now().minute >= id(h_debut).hour*60+id(h_debut).minute && id(sntp_time).now().hour*60+id(sntp_time).now().minute < id(h_fin).hour*60+id(h_fin).minute);'
          then:
            - switch.turn_on: cde_ppe_filtration
          else:
            - switch.turn_off: cde_ppe_filtration
             
  # Envoi d'un message à Telegram via HA, celui ci doit etre operationnel
  # Message à construire au format String avant appel de ce script
  - id: _message_telegram
    parameters:
      mess1: string
    then:
      - lambda: |-
          std::string mess = id(sntp_time).now().strftime("%Y-%m-%d %H:%M:%S").c_str();
          mess += "\n";
          mess += mess1;
          id(telegram_msg_buffer) = mess;
      - homeassistant.service:
          service: notify.telegram
          data:
            message: !lambda 'return id(telegram_msg_buffer).c_str();'
      - lambda: |-
          std::string mess = id(sntp_time).now().strftime("%Y-%m-%d %H:%M:%S").c_str();
          mess += ",";
          mess += mess1;
          id(telegram_msg_buffer) = mess;
      - homeassistant.service:
          service: script.envoyer_message_log_esp178
          data:
            message: !lambda 'return id(telegram_msg_buffer).c_str();'

  - id: _message_telegram_v2
    parameters:
      mess1: string
      duree_sec: float
    then:
      - lambda: |-
          int h, m, s;
          // id(convert_seconds)(duree_sec, h, m, s);
          CONVERT_SECONDS(duree_sec, h, m, s);
          char buf[128];
          snprintf(buf, sizeof(buf), 
              "%s\n"
              "Tps: %02d:%02d:%02d\n", mess1.c_str(), h, m, s);

          std::string mess = id(sntp_time).now().strftime("%Y-%m-%d %H:%M:%S").c_str();
          mess += "\n";
          mess += buf;

          id(telegram_msg_buffer) = mess;
      - homeassistant.service:
          service: notify.telegram
          data:
            message: !lambda 'return id(telegram_msg_buffer).c_str();'
      - lambda: |-
          int h, m, s;
          CONVERT_SECONDS(duree_sec, h, m, s);

          char buf[128];
          snprintf(buf, sizeof(buf), "%s,%02d:%02d:%02d", mess1.c_str(), h, m, s);

          std::string mess = id(sntp_time).now().strftime("%Y-%m-%d %H:%M:%S").c_str();
          mess += ",";
          mess += buf;

          id(telegram_msg_buffer) = mess;
      - homeassistant.service:
          service: script.envoyer_message_log_esp178
          data:
            message: !lambda 'return id(telegram_msg_buffer).c_str();'

  - id: _log_message
    parameters:
      mess1: string
    then:
      - lambda: |-
          std::string mess = id(sntp_time).now().strftime("%Y-%m-%d %H:%M:%S").c_str();
          mess += ",";
          mess += mess1;
          id(telegram_msg_buffer) = mess;
      - homeassistant.service:
          service: script.envoyer_message_log_esp178
          data:
            message: !lambda 'return id(telegram_msg_buffer).c_str();'
