substitutions:
  device_name: esp142-test-esp32
  adress_ip: "192.168.0.142"
  friendly_name: esp142
  time_timezone: "Europe/Paris"
  
esphome:
  name: ${device_name}
      
esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
  networks:
    - ssid: !secret wifi
      password: !secret mdpwifi
  reboot_timeout: 5min

  manual_ip:
    static_ip: ${adress_ip}
    gateway: 192.168.0.254
    subnet: 255.255.255.0
    dns1: 192.168.0.254

# Enable logging
logger:
  baud_rate: 0
  level: DEBUG

# Enable Home Assistant API
api:

ota:
  platform: esphome

web_server:
  port: 80
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Paris
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org
i2c:
  sda: GPIO21
  scl: GPIO22
  scan: true

sensor:
  - platform: ina219
    address: 0x40
    shunt_resistance: 0.1
    max_current: 0.4
    current:
      name: "Courant DC"
      id: courant_dc
      accuracy_decimals: 3
    bus_voltage:
      name: "Tension DC"
      id: tension_dc
      accuracy_decimals: 3
    shunt_voltage:
      name: "Tension Shunt"
      id: tension_shunt
      accuracy_decimals: 3

    power:
      name: "Puissance DC"
      id: puissance_dc
      accuracy_decimals: 3
    update_interval: 2s
    

globals:
  - id: affichage_index
    type: int
    initial_value: '0'

interval:
  - interval: 2s
    then:
      - lambda: |-
          id(affichage_index) = (id(affichage_index) + 1) % 3;

  - interval: 2s
    then:
      - lambda: |-
          ESP_LOGI("INA226", "Tension_DC=%.3f V | Tension_Shunt=%.3f V | Courant=%.3f A | Puissance=%.3f W",
            id(tension_dc).state,
            id(tension_shunt).state,
            id(courant_dc).state,
            id(puissance_dc).state);

display:
  - platform: tm1638
    id: tm_display
    dio_pin: GPIO18
    clk_pin: GPIO17
    stb_pin: GPIO16
    update_interval: 2s
    lambda: |-
      if (id(affichage_index) == 0)
        it.printf("U=%5.3f", id(tension_dc).state);
      else if (id(affichage_index) == 1)
        it.printf("I=%5.3f", id(courant_dc).state);
      else
        it.printf("P=%5.3f", id(puissance_dc).state);
binary_sensor:
#Etat de la connection
  - platform: status
    name: "Status"

  - platform: tm1638
    name: "TM1638 Button 1"
    id: TM1638Button1
    key: 0
    filters:
      - delayed_on: 10ms
    on_press:
     then:
        - switch.turn_on: TM1638Led1
    on_release:
     then:
        - switch.turn_off: TM1638Led1

  - platform: tm1638
    name: "TM1638 Button 2"
    id: TM1638Button2
    key: 1
    filters:
      - delayed_on: 10ms
    on_press:
     then:
        - output.turn_on: TM1638Led2
    on_release:
     then:
        - output.turn_off: TM1638Led2

switch:
  - platform: restart
    name: "Restart"

  - platform: tm1638
    name: "Led1"
    id: TM1638Led1
    led: 0

output:
  - platform: tm1638
    id: TM1638Led2
    led: 1

