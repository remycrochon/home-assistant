substitutions:
  device_name: esp142-test-esp32
  adress_ip: "192.168.0.142"
  friendly_name: esp142
  time_timezone: "Europe/Paris"
  
esphome:
  name: ${device_name}
  platform: ESP32
  board: esp32dev

wifi:
  networks:
    - ssid: !secret wifi
      password: !secret mdpwifi
  reboot_timeout: 5min

  manual_ip:
    static_ip: ${adress_ip}
    gateway: 192.168.0.254
    subnet: 255.255.255.0

# Enable logging
logger:
  baud_rate: 0
  level: DEBUG
#  logs:
#    modbus.component: INFO
# Enable Home Assistant API
api:

ota:

web_server:
  port: 80


# Protocole du JSK
uart:
  id: mod_bus
  tx_pin: 17
  rx_pin: 16
  baud_rate: 9600
  stop_bits: 1
#  debug:
#    direction: BOTH
#    dummy_receiver: false
#    after:
#      timeout: 150ms
#    sequence:
#      - lambda: |-
#          UARTDebug::log_string(direction, bytes);



# Informations supplementaires sur le WIFI
#text_sensor:
#  - platform: wifi_info
#    ip_address:
#      name: ${friendly_name}_ESP IP Address
#    ssid:
#      name: ${friendly_name}_ESP Connected SSID
#    bssid:
#      name: ${friendly_name}_ESP Connected BSSID
#    mac_address:
#      name: ${friendly_name}_ESP Mac Wifi Address
#    scan_results:
#      name: ${friendly_name}_ESP Latest Scan Results


binary_sensor:
#Etat de la connection
  - platform: status
    name: "${friendly_name}_Status"

sensor:
  - platform: pzemac
    update_interval: 1s
    current:
      name: "${friendly_name} courant"
      unit_of_measurement: "A"
    voltage:
      name: "${friendly_name} tension"
      unit_of_measurement: "V"
    energy:
      name: "${friendly_name} energy"
      unit_of_measurement: "kWh"
      filters:
        - multiply: 0.001
    power:
      name: "${friendly_name} puissance"
      id: pureseau
      unit_of_measurement: "W"
    
    frequency:
      name: "${friendly_name} frequence"
      unit_of_measurement: "hz"
    power_factor:
      name: "${friendly_name} factpuiss"
   
    
# Informations WI_FI
  - platform: wifi_signal # Affiche le signal WiFi strength/RSSI en dB
    name: "${friendly_name} WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Affiche le signal WiFi strength en %
    source_id: wifi_signal_db
    name: "${friendly_name} WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"

  - platform: pid
    name: "PID Climate Result"
    type: RESULT
  - platform: pid
    name: "PID Climate ERROR"
    type: ERROR
  - platform: pid
    name: "PID Climate PROPORTIONAL"
    type: PROPORTIONAL
  - platform: pid
    name: "PID Climate INTEGRAL"
    type: INTEGRAL
  - platform: pid
    name: "PID Climate PROPORTIONAL"
    type: PROPORTIONAL
  - platform: pid
    name: "PID Climate DERIVATIVE"
    type: DERIVATIVE
  - platform: pid
    name: "PID Climate HEAT"
    type: HEAT
  - platform: pid
    name: "PID Climate COOL"
    type: COOL
  - platform: pid
    name: "PID Climate KP"
    type: KP
  - platform: pid
    name: "PID Climate KI"
    type: KI
  - platform: pid
    name: "PID Climate KD"
    type: KD

 
switch:
  - platform: restart
    name: "${friendly_name} Restart"

output:

# Pilotage du Dimmer ------------------------
  - platform: ac_dimmer
    id: ecs
    gate_pin: GPIO33
    method: leading
    zero_cross_pin:
      number: GPIO34 
      mode:
        input: true
      inverted: yes
    min_power: 5%

climate:
  - platform: pid
    id: pid_climate
    name: "PID Climate Controller"
    sensor: pureseau
    default_target_temperature: 500
    heat_output: ecs
    control_parameters:
      kp: 0.0
      ki: 0.0
      kd: 0.0

button:
  - platform: template
    name: "PID Climate Autotune"
    on_press:
      - climate.pid.autotune: pid_climate

