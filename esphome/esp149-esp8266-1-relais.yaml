substitutions:
  device_name: esp149-esp8266-1-relais
  friendly_name: esp149
  adress_ip: "192.168.0.149"
  time_timezone: "Europe/Paris"
  
esphome:
  name: ${device_name}
  platform: ESP8266
  board: d1_mini
  
wifi:
  networks:
    - ssid: !secret wifi_esp
      password: !secret mdpwifi_esp
      priority: 1
    - ssid: !secret wifi
      password: !secret mdpwifi
      priority: 0
  reboot_timeout: 5min

  manual_ip:
    static_ip: ${adress_ip}
    gateway: 192.168.0.254
    subnet: 255.255.255.0


# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

web_server:
  port: 80
# Utilisez la LED bleue de l'appareil comme LED d'état, qui clignotera s'il y a des avertissements (lent) ou des erreurs (rapide)
status_led:
  pin:
    number: GPIO16
    inverted: true

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO10
      inverted: True
      mode:
        input: true
        pullup: true
    name: "${friendly_name}_bp1"
  - platform: gpio
    pin:
      number: GPIO13
      inverted: True
      mode:
        input: true
        pullup: true
    name: "${friendly_name}_bp2"
  - platform: gpio
    pin:
      number: GPIO14
      inverted: True
      mode:
        input: true
        pullup: true
    name: "${friendly_name}_bp3"

#Etat de la connection
  - platform: status
    name: "${friendly_name}_Status"

sensor:
  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal Sensor"
    update_interval: 60s

  - platform: uptime
    name: "${friendly_name} Uptime Sensor"
    update_interval: 60s

#rappatriement valeur commande triac-----------------------------------------------------------          
  - platform: template
    name: "triac HTTP"
    id: triac
    unit_of_measurement: "%"
    accuracy_decimals: 4 
    state_class: "measurement"
    
switch:
  - platform: gpio
    name: "${friendly_name} Relais"
    pin: GPIO5
    id: relais
    
  - platform: restart
    name: "${friendly_name} Restart"

 # Configuration du serveur HTTP

#AC dimmer level 0 à 1-----------------------------------------------------------------------

output:
  - platform: ac_dimmer
    id: chauffe_eau
    gate_pin: GPIO12 #D6
    method: leading
    zero_cross_pin:
      number: GPIO14 #D5
      mode:
        input: true
      inverted: yes
    min_power: 0% 


light:
  - platform: monochromatic
    output: chauffe_eau
    id: gradateur
    default_transition_length: 0s

#HTTP request------------------------------------------------------------------------------------
http_request:
  useragent: esphome/device
  timeout: 10s
  id: http_request_data


interval:
  - interval: 0.25s
    then:    

      - http_request.get: 
          url: http://192.168.0.37:1880/endpoint/triac?valeur
          on_response:
            then:
             - lambda: |-
                json::parse_json(id(http_request_data).get_string(), [](JsonObject root) {
                id(triac).publish_state(root["value"]);
                });
                id(chauffe_eau).set_level(id(triac).state / 100);
      