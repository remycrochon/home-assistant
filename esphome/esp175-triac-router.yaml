
substitutions:
  device_name: esp175-triac-router
  friendly_name: triac_pv
  adress_ip: "192.168.0.175"
  time_timezone: "Europe/Paris"
  
esphome:
  name: ${device_name}
  platform: ESP8266
  board: d1_mini
  
wifi:
  networks:
    - ssid: !secret wifi_esp
      password: !secret mdpwifi_esp
      priority: 1
    - ssid: !secret wifi
      password: !secret mdpwifi
      priority: 0
  reboot_timeout: 5min

  manual_ip:
    static_ip: ${adress_ip}
    gateway: 192.168.0.254
    subnet: 255.255.255.0

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

web_server:
  port: 80
# Utilisez la LED bleue de l'appareil comme LED d'état, qui clignotera s'il y a des avertissements (lent) ou des erreurs (rapide)
status_led:
  pin:
    number: GPIO16
    inverted: true
#sonde Dallas
dallas:
  - pin: GPIO2 #D4
    update_interval: 10s
    
binary_sensor:
#Etat de la connection
  - platform: status
    name: "${friendly_name}_Status"

number:
  - platform: template
    name: "${friendly_name} P Max"
    id: pmax
    optimistic: true
    restore_value: true
    min_value: 50
    max_value: 100
    step: 1

  - platform: template
    name: "${friendly_name} P Min"
    id: pmin
    optimistic: true
    restore_value: true
    min_value: 5
    max_value: 25
    step: 1

  - platform: template
    name: "${friendly_name} T Max"
    id: tmax
    optimistic: true
    restore_value: true
    min_value: 10
    max_value: 70
    step: 1

sensor:
# Sonde Temperature radiateur
  - platform: dallas
    address: 0x82012111efe81d28
    name: "${friendly_name} Temp triac"
    id: temp_triac
    filters:
      - filter_out: NAN
      
############### TEMPLATE  ######################"
# 
  - platform: template
    name: "${friendly_name} Ecs"
    id: _ecs
    icon: mdi:flash
    unit_of_measurement: "%"
    accuracy_decimals: 4

#rapatriement valeur commande triac-----------------------------------------------------------          

  - platform: template
    name: "${friendly_name} Triac HTTP"
    id: triac
    unit_of_measurement: "%"
    accuracy_decimals: 4 
    state_class: "measurement"
    lambda: |-
      if ((id(triac).state/10)>id(pmax).state) {
        return id(pmax).state;
        }
        else
        {
         if ((id(triac).state/10)<id(pmin).state) {
        return id(pmin).state;}
        else
        {
        return id(triac).state/10;}
        }
        id(_ecs).publish_state(id(triac).state);
    on_value:
      then:
        - output.set_level:
            id: ecs
            level: !lambda "return x/1000;"

switch:
  - platform: template
    name: "Dimmer"
    id: dimmer
    optimistic: true

  - platform: gpio
    name: "${friendly_name} Relais"
    pin: GPIO5
    id: relais
    
  - platform: restart
    name: "${friendly_name} Restart"

#AC dimmer level 0 à 1-----------------------------------------------------------------------

output:
  - platform: ac_dimmer
    id: ecs
    gate_pin: GPIO13 #D7
    method: leading
    zero_cross_pin:
      number: GPIO14 #D5
      mode:
        input: true
      inverted: yes
    min_power: 0%

light:
  - platform: monochromatic
    output: ecs
    id: gradateur
    default_transition_length: 0s

 # Configuration du serveur HTTP
#HTTP request------------------------------------------------------------------------------------
http_request:
  useragent: esphome/device
  timeout: 10s
  id: http_request_data

interval:
  - interval: 1s
    then:    
      - http_request.get: 
          url: http://192.168.0.37:1880/endpoint/triac?valeur
          on_response:
            then:
             - lambda: |-
                json::parse_json(id(http_request_data).get_string(), [](JsonObject root) {
                id(triac).publish_state(root["value"]);
                });
                
  - interval: 0.5s
    then:
      - script.execute: sortie_pu
      - script.execute: correction_triac

#Scripts-----------------------------------------------------------------------
#-----------------------------------------------------------------------------------

script:

#Validation sortie triac
  - id: sortie_pu
    mode: single
    then:
     - if: 
        condition:
          or:
            - lambda: 'return id(temp_triac).state > id(tmax).state;' # temp > tmax
            - lambda: 'return id(dimmer).state == false;'
        then:
          - light.turn_off: gradateur
          - switch.turn_off: relais

     - if: 
        condition:
          and:
            - lambda: 'return id(temp_triac).state < id(tmax).state- 2;' # temp < tmax
            - lambda: 'return id(dimmer).state == true;'
        then:
          - light.turn_on: gradateur
          - switch.turn_on: relais    
   
#correction consigne triac si <0.0001 et >99.999 pour eviter les flashs ------------------------

  - id: correction_triac
    mode: single
    then:

     - if: 
        condition:
          sensor.in_range:
            id: triac
            below: 100
            above: 0
        then:
          - lambda: |-
              id(triac).publish_state(id(triac).state);  
          #- logger.log: "triac entre 0 et 100" 
     - if:
        condition:
           sensor.in_range:
              id: triac
              above: 100
        then:
           - lambda: |-
              id(triac).publish_state( 99.999 );
          # id(triac_inc).publish_state( 99.999 );      
           #- logger.log: "triac >100"
 
     - if: 
        condition:
          sensor.in_range:
            id: triac
            below: 0
        then:
          - lambda: |-
              id(triac).publish_state( 0.0001 );
          #    id(triac_inc).publish_state( 0.0001 );              
          #- logger.log: "correction triac <0"
  