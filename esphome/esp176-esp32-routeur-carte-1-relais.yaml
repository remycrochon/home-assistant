substitutions:
  device_name: "esp176-esp32-routeur-1r"
  friendly_name: esp176
  adress_ip: "192.168.0.176"
  time_timezone: "Europe/Paris"
  
esphome:
  name: ${device_name}
  project:
    name: "rem81.esp176-esp32-routeur"
    version: "1.0.0"
  on_boot:
    priority: -100
    # Force mode auto et tempok au demarrage
    then: 
      - switch.turn_on: modeauto
      - binary_sensor.template.publish:
          id: temperatureok
          state: ON
      - delay: 5s
      - lambda: |-
          std::string mess = "Boot ESP176 Routeur";
          id(telegram_msg_buffer) = mess;
      - homeassistant.service:
          service: notify.telegram
          data:
            message: !lambda 'return id(telegram_msg_buffer).c_str();'          

esp32:
  board: esp32dev
  framework:
    type: arduino
    
wifi:
  networks:
    - ssid: !secret wifi
      password: !secret mdpwifi
  reboot_timeout: 5min

  manual_ip:
    static_ip: ${adress_ip}
    gateway: 192.168.0.254
    subnet: 255.255.255.0
    
# Utilisez la LED bleue de l'appareil comme LED d'état, qui clignotera s'il y a des avertissements (lent) ou des erreurs (rapide)
status_led:
  pin:
    number: GPIO32 # led jaune
    inverted: true

# Enable logging
logger:
  baud_rate: 0
  level: info

#    modbus.component: INFO
# Enable Home Assistant API
api:

ota:
  platform: esphome
web_server:
  port: 80
  version: 3

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Paris
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org  

# Protocole I2C
i2c:
  sda: GPIO21 
  scl: GPIO22
  scan: True
  id: bus_a
  frequency: 400kHz

# Protocole du JSK
uart:
  id: mod_bus
  tx_pin: 17
  rx_pin: 16
  baud_rate: 38400
  stop_bits: 1
#  debug:
#    direction: BOTH
#    dummy_receiver: false
#    after:
#      timeout: 150ms
#    sequence:
#      - lambda: |-
#          UARTDebug::log_string(direction, bytes);

modbus:
#flow_control_pin: 5
  #send_wait_time: 200ms
  id: modbus1

modbus_controller:
  - id: jsymk
    ## the Modbus device addr
    address: 0x1
    modbus_id: modbus1
    update_interval: 0.75s
    command_throttle: 50ms
    # setup_priority: -10

# Mosquitto Proxmox
mqtt:
  broker: 192.168.0.204
  username: !secret mqtt_pve_name
  password: !secret mqtt_pve_pw
  #internal_mqtt_default: internal

globals:
  - id: increment
    type: float
    restore_value: no
    initial_value: '0'

  - id: striac
    type: float
    restore_value: no
    initial_value: '0.0'

    # stocke temporairement le message à envoyer à telegram
  - id: telegram_msg_buffer
    type: std::string
    restore_value: no
    initial_value: '""'

  # Coef de régulation PID 
  - id: pid_integral
    type: float
    restore_value: no
    initial_value: '0.0'

  - id: last_error
    type: float
    restore_value: no
    initial_value: '0.0'

  - id: last_time
    type: uint32_t
    restore_value: no
    initial_value: '0'
  # raffraichit la consigne pour Graphana
  - id: valeur_consigne
    type: float
    restore_value: no
    initial_value: '0.0'

# Sonde Temperature Dallas
one_wire:
  - platform: gpio  
    pin: GPIO27 #

# Informations supplementaires sur le WIFI
#text_sensor:
#  - platform: wifi_info
#    ip_address:
#      name: ${friendly_name}_ESP IP Address
#    ssid:
#      name: ${friendly_name}_ESP Connected SSID
#    bssid:
#      name: ${friendly_name}_ESP Connected BSSID
#    mac_address:
#      name: ${friendly_name}_ESP Mac Wifi Address
#    scan_results:
#      name: ${friendly_name}_ESP Latest Scan Results


binary_sensor:
  #Etat de la connection
    - platform: status
      name: "${friendly_name}_Status"
  
    - platform: template
      name: "${friendly_name} Temp Ok"
      id: temperatureok
  
    - platform: template
      name: "${friendly_name} Seuil Prod Ok"
      id: seuil_prod_ok

    - platform: template
      name: "${friendly_name} Seuil SOC Ok"
      id: seuil_soc_ok
  
# Input Number
number:
  # Seuil MMax sortie triac
  - platform: template
    name: "${friendly_name} P Max"
    id: pmax
    optimistic: true
    restore_value: true
    mode: box
    min_value: 50
    max_value: 100
    unit_of_measurement: "%"
    step: 1

  # Seuil MAX temperature
  - platform: template
    name: "${friendly_name} T Max"
    id: tmax
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 75
    unit_of_measurement: "C°"
    step: 0.1

  # Coeff Réactivité
  - platform: template
    name: "${friendly_name} Coeff R"
    id: coeff_r
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 1000
    unit_of_measurement: ""
    step: 0.1
  # Coeff Réactivité Puissance Batteries
  - platform: template
    name: "${friendly_name} Coeff R bat"
    id: coeff_rbat
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 1000
    unit_of_measurement: ""
    step: 0.1    
  # seuil Puissance batteries 
  - platform: template
    name: "${friendly_name} Seuil Pu Batteries"
    id: seuil_pubatt
    optimistic: true
    restore_value: true
    mode: box
    min_value: -2500
    max_value: 0
    unit_of_measurement: "W"
    step: 1
  # seuil SOC validation routeur
  - platform: template
    name: "${friendly_name} Seuil SOC"
    id: seuil_soc
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 100
    unit_of_measurement: "%"
    step: 1

  # Consigne sur Puissance Batteries
  - platform: template
    name: "${friendly_name} Consigne Pu Batteries"
    id: cons_pubatt
    optimistic: true
    restore_value: true
    mode: box
    min_value: -2500
    max_value: 2500
    unit_of_measurement: "W"
    step: 1
    # Consigne sur Puissance Heure Creuses
  - platform: template
    name: "${friendly_name} Consigne Pu Heure Creuse"
    id: cons_puhc
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 8000
    unit_of_measurement: "W"
    step: 1
  # seuil Production validation routeur 
  - platform: template
    name: "${friendly_name} Seuil Production Val Routeur"
    id: seuil_prod
    optimistic: true
    restore_value: true
    mode: box
    min_value: 500
    max_value: 3000
    unit_of_measurement: "W"
    step: 1

  - platform: template
    name: "${friendly_name} Seuil Surproduction"
    id: seuilsurprod
    optimistic: true
    restore_value: true
    mode: box
    min_value: -2000
    max_value: 2000
    unit_of_measurement: "w"
    step: 1

  - platform: template
    name: "PID Kp"
    id: kp_gain
    mode: box
    min_value: 0
    max_value: 5
    step: 0.01
    initial_value: 0.5
    restore_value: true    
    optimistic: true

  - platform: template
    name: "PID Ki"
    id: ki_gain
    mode: box
    min_value: 0
    max_value: 1
    step: 0.001
    initial_value: 0.1
    restore_value: true       
    optimistic: true    

sensor:  
  # tension de l'alimentation
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: Tension
    #name: "${friendly_name} Tension JSYMK"
    address: 0x0048
    unit_of_measurement: "V"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4

    # Intensité traversant le tore
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: Itore
    name: "${friendly_name} I_ECS JSYMK"
    address: 0x0049
    unit_of_measurement: "A"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4
    state_class: measurement

  # Puissance traversant le tore
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: puecs
    name: "${friendly_name} P_ECS JSYMK"
    address: 0x004A
    unit_of_measurement: "W"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4
    state_class: measurement

  # Energie lue dans le tore
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: energietore
    name: "${friendly_name} Energie ECS JSYMK"
    address: 0x004B
    unit_of_measurement: "kWh"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4
    state_class: total

  # Energie lue dans le tore
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: fptore
    #name: "${friendly_name} FP Tore JSYMK"
    address: 0x004C
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4

  # Energie NEG lue dans le tore
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: energietoren
    name: "${friendly_name} Energie ECS Neg JSYMK"
    address: 0x004D
    unit_of_measurement: "kWh"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001     
    register_count: 1
    response_size: 4 
    state_class: total
    
  # Sens du courant dans la pince
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: senspince
    #name: "${friendly_name} Sens_Pince JSYMK"
    address: 0x004E
    register_type: holding
    value_type: U_DWORD
    bitmask: 0X00010000
    filters:
      - multiply: 1
    register_count: 1
    response_size: 4
  # Sens du courant dans le tore
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: senstor
    #name: "${friendly_name} Sens_Tore JSYMK"
    address: 0x004E
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 0
    bitmask: 0X01000000
    filters:
      - multiply: 1
    register_count: 1
    response_size: 4

  # Fréquence de l'alimentation  
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: frequence
    #name: "${friendly_name} Frequence JSYMK"
    address: 0x004F
    unit_of_measurement: "hz"    
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01
    register_count: 1
    response_size: 4

  # tension de l'alimentation
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: Tension2
    #name: "${friendly_name} U_Reseau JSYMK"
    address: 0x0050
    unit_of_measurement: "V"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4
    
  # Intensité lue dans la pince
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: Ireseau
    #name: "${friendly_name} I_Reseau JSYMK"
    address: 0x0051
    unit_of_measurement: "A"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4

  # puissance lue dans la pince
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: pureseau
    #name: "${friendly_name} P_Reseau JSYMK"
    address: 0x0052
    unit_of_measurement: "W"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4 
    on_value:
      then:
        - lambda: |-
            if ( id(senspince).state == 1 ) {
              id(pureseau1).publish_state( id(pureseau).state *-1);
            } else {
              id(pureseau1).publish_state( id(pureseau).state );
            }
    
  # Energie lue dans la pince
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: energiepince
    #name: "${friendly_name} Energie Reseau JSYMK"
    address: 0x0053
    unit_of_measurement: "kWh"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4

  # Energie lue dans le tore
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: fppince
    #name: "${friendly_name} FP Pince JSYMK"
    address: 0x0054
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4

  # Energie NEG lue dans le tore
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: energienegpince
    #name: "${friendly_name} Energie ECS Neg JSYMK"
    address: 0x0055
    unit_of_measurement: "kWh"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001     
    register_count: 1
    response_size: 4 
    
  # Informations WI_FI
  - platform: wifi_signal # Affiche le signal WiFi strength/RSSI en dB
    name: "${friendly_name} WiFi Signal dB"
    update_interval: 60s

  ############### TEMPLATE  ######################"
  # Affichage dans HA et sur l'afficheur
  - platform: template
    name: "${friendly_name} Pu Reseau"
    id: pureseau1
    unit_of_measurement: "W"
    state_class: "measurement"  

  - platform: template
    name: "${friendly_name} Increment"
    id: afincrement
    unit_of_measurement: ""
    accuracy_decimals: 2
    state_class: "measurement"

  - platform: template
    name: "${friendly_name} Sortie Triac"
    id: afstriac
    unit_of_measurement: "%"
    state_class: "measurement"  
    accuracy_decimals: 2

  # Les MQTT sont déclarés dans le Node Red du Cerbo GX
  # https://venus.local:1881/#flow/dbd727f16cbe7b5f

  - platform: mqtt_subscribe
    name: "${friendly_name} Pu batterie"
    id: pu_batteries
    topic: mp2/batteries/puissance
    unit_of_measurement: "W"
    state_class: "measurement"  
    accuracy_decimals: 2
        
  - platform: mqtt_subscribe
    name: "${friendly_name} Pu Produite"
    id: pu_prod
    topic: mp2/multiplus2/prod_totale
    unit_of_measurement: "W"
    state_class: "measurement"  
    accuracy_decimals: 2

  - platform: mqtt_subscribe
    name: "${friendly_name} Soc"
    id: soc
    topic: mp2/batteries/soc
    unit_of_measurement: "%"
    state_class: "measurement"  
    accuracy_decimals: 2

  - platform: mqtt_subscribe
    name: "${friendly_name} Etat Bus VE"
    id: etatbus_ve
    topic: mp2/multiplus2/etatbusve
    accuracy_decimals: 0

  # lecture sensor Home Assistant
  - platform: homeassistant
    name: "${friendly_name} Status Bus VE"
    entity_id: sensor.mp2_status_bus_ve
    id: statusbusve

  - platform: homeassistant
    name: "${friendly_name} Tarif Num"
    entity_id: sensor.linky_n_tarif
    id: hc

  # Sonde Temperature radiateur
  - platform: dallas_temp
    address: 0xeb012112e461b128
    name: "${friendly_name} Temp triac"
    id: temp_triac
    update_interval: 60s
    filters:
      - filter_out: NAN

  # Sensor Intermediaire pour affichage PID
  - platform: template
    name: "Coeff en Cours"
    unit_of_measurement: " "
    id: coeff_cours
    state_class: "measurement"  
    accuracy_decimals: 2
  - platform: template
    name: "Mes en Cours"
    id: mes_cours
    unit_of_measurement: "W"
    state_class: "measurement"  
    accuracy_decimals: 0

  - platform: template
    name: "Cons en Cours"
    id: cons_cours
    unit_of_measurement: "W"
    state_class: "measurement"  
    accuracy_decimals: 0
    update_interval: 60s
    lambda: |-
      return id(valeur_consigne);
  
# déclaration des "text_sensors"
text_sensor:
  - platform: template
    name: "${friendly_name} Mode Regulation"
    id: moderegul

  # Message en lien avec L'automatisme de notification telegram
  - platform: template
    name: "${friendly_name}_message_notif_telegram"
    lambda: |-
      return {"ESP176 RAZ Telegram"};
    update_interval: never
    id: _msg_notif_telegram

switch:
  - platform: gpio
    name: "${friendly_name} Relais"
    pin: GPIO5
    id: relais
    on_turn_on: 
      then:
        - lambda: |-
            static String mess;
            mess= "ESP176 Relais Surplus activé";
            id(_message_telegram)->execute(mess.c_str());    

  - platform: template
    name: "${friendly_name} Mode Auto"    
    id: modeauto
    optimistic: true
    restore_mode: always_on
    on_turn_off:
      - light.turn_off: gradateur

  - platform: template
    name: "${friendly_name} Valid Routeur"    
    id: validrouteur
    optimistic: true
    restore_mode: always_on

  - platform: restart
    name: "${friendly_name} Restart"

output:
  #LEDS --------------------------------------
  - id: led_jaune
    platform: gpio
    pin: GPIO26 #GPIO32

  - id: led_rouge
    platform: gpio
    pin: GPIO25

  # Pilotage du Dimmer
  - platform: ac_dimmer
    id: ecs
    gate_pin: GPIO33
    method: leading
    zero_cross_pin:
      number: GPIO34 
      mode:
        input: true
      inverted: yes
    min_power: 5%

light:
  - platform: monochromatic
    name: "${friendly_name} STriac"
    output: ecs
    id: gradateur
    default_transition_length: 50ms

  # Affichage
display:
  - platform: lcd_pcf8574
    dimensions: 20x4
    address: 0x27
    update_interval: 10s
    lambda: |-
      it.printf(0,0,"Pr=%0.0fW",id(pureseau1).state);
      it.printf(10,0,"Pe=%0.0fW ",id(puecs).state);
      it.printf(0,1,"Tr=%0.1f%%",id(striac));
      it.printf(10,1,"Val:%s", id(validrouteur).state ? "OK" : "NOK");
      it.printf(0,2,"Tp=%0.1fc", id(temp_triac).state);
      it.printf(10,2,"Etat=%s", id(temperatureok).state ? "OK" : "NOK");
      it.printf(0,3,"Mode=%s", id(modeauto).state ? "Auto" : "Manu");
      it.printf(10,3,"Inc=%0.1f ",id(increment));    

interval:
  - interval: 1s
    then:
      - script.execute: calcul_injection_pi

  - interval: 2s
    then:
      - script.execute: etat_production 

# Script activation relais si l'injection est inférieur au seuil surprod pendant xsec
  - interval: 2s
    then:
      - script.execute: calcul_relais_surprod

 ########################################################################""
script:
  # Calcul puissance de la puissance à injecter dans le triac pilotant l'ECS
  - id: calcul_injection_pi
    mode: single
    then:
      # Seuil de production
      - binary_sensor.template.publish:
          id: seuil_prod_ok
          state: !lambda 'return id(pu_prod).state > id(seuil_prod).state;'

      # Seuil de SOC (avec hysteresis de 2 %)
      - lambda: |-
          if (id(soc).state >= id(seuil_soc).state) {
            id(seuil_soc_ok).publish_state(true);
          } else if (id(soc).state < (id(seuil_soc).state - 2)) {
            id(seuil_soc_ok).publish_state(false);
          }

      # Température Triac
      - lambda: |-
          if (id(temp_triac).state < (id(tmax).state - 2)) {
            id(temperatureok).publish_state(true);
          } else if (id(temp_triac).state >= id(tmax).state) {
            id(temperatureok).publish_state(false);
          }
      
      - if:
          condition:
            or:
              # Cas 1 : Mode manuel => OFF
              - switch.is_off: modeauto

              # Cas 2 : Mode auto avec conditions NOK => OFF
              - and:
                  - switch.is_on: modeauto
                  - or:
                      - switch.is_off: validrouteur
                      - binary_sensor.is_off: temperatureok
                      - binary_sensor.is_off: seuil_prod_ok
                      - lambda: 'return id(soc).state < id(seuil_soc).state;'
          then:
            - lambda: |-
                id(striac) = 0;
                id(moderegul).publish_state("OFF");
                // RAZ de l'affichage du PID A supprimer si inutile
                id(coeff_cours).publish_state(0);
                id(mes_cours).publish_state(0);
                id(valeur_consigne) = 0;
            - light.turn_off: gradateur
            - logger.log:
                format: "Régulation OFF - Mode: %s - Striac: %.1f"
                args: ['id(moderegul).state.c_str()', 'id(striac)']
                level: DEBUG

      - if:
          condition:
            and:
              # Cas 3 : Mode auto + toutes les conditions OK => PID actif
              - switch.is_on: modeauto
              - switch.is_on: validrouteur
              - binary_sensor.is_on: seuil_prod_ok
              - binary_sensor.is_on: temperatureok
              - lambda: 'return id(soc).state >= id(seuil_soc).state;'
          then:
            - script.execute: regule_pid
            - light.turn_on:
                id: gradateur
                brightness: !lambda |-
                  return id(striac) / 100;
            - logger.log:
                format: "Régul ON - S triac (Après Securité): %.2f"
                args: [ 'id(striac)' ]
                level: DEBUG
      # Affichage STriac et Increment
      - lambda: |-
            id(afstriac).publish_state( id(striac) );

  # Principe de la régulation:
  # Si Bus Ve en Bulk, on paratge le surplus entre la batterie et l'ECS avec une consigne de (1200W)
  #   Consigne= Consigne pu Batteries & Mesure = Pu Batteries
  # Si Bus Ve non Bulk (float), cela signifie que la batterie est chargée, alors:
  # Si la PU Batteries est superieure à un seuil (-100), ça veut dire que la batterie se charge un peu
  #   Consigne= 0 & Mesure = Pu Réseau
  # Sinon:
  #   Consigne= 0 & Mesure = Pu Batteries
  # C'est popur éviter de décharger la batterie dans l'ECS

    # Régulation de type PI:
     
  - id: regule_pid
    mode: single
    then:
      - lambda: |-
          float Kp = id(kp_gain).state;
          float Ki = id(ki_gain).state;
          float dt = 1.0;   // Intervalle en secondes (1s ici)
          float mesure;
          float consigne;

          if (id(etatbus_ve).state == 3) {
            // Mode Bulk : régule sur la puissance batterie
            mesure = id(pu_batteries).state;
            consigne = id(cons_pubatt).state;
            id(moderegul).publish_state("PID Bulk");

          } else if (id(pu_batteries).state >= id(seuil_pubatt).state) {
            // Sinon ( batteries en float), si la batterie débite trop, on régule via l'injection réseau (négatif)
            mesure = id(pureseau1).state;
            consigne = 0;
            id(moderegul).publish_state("PID Réseau");

          } else {
            // Sinon, on reste sur la puissance batterie en mode non-bulk
            mesure = id(pu_batteries).state;
            consigne = 0;
            id(moderegul).publish_state("PID Bat non Bulk");
          }
          
          // Calcul PID
          if (isnan(id(pid_integral))) {
            id(pid_integral) = 0;
          }
          float erreur = mesure-consigne;
          if (isnan(erreur) || isinf(erreur)) {
            erreur = 0;
          }
          id(pid_integral) += erreur * dt;

          // Anti-windup
          if (id(pid_integral) > 500) id(pid_integral) = 500;
          if (id(pid_integral) < -500) id(pid_integral) = -500;

          float output = ((Kp * erreur) + (Ki * id(pid_integral)))/100;
          // Application TRIAC
          id(striac) += output;

          // Sécurité et bornage
          if (isnan(id(striac))) id(striac) = 0;
          if (id(striac) < 0) id(striac) = 0;
          if (id(striac) > id(pmax).state) id(striac) = id(pmax).state;

          // Debug pour affichage
          id(coeff_cours).publish_state(output);
          id(mes_cours).publish_state(mesure);
          id(valeur_consigne) = consigne;

          ESP_LOGI("pid", "Mesure: %.2f, Consigne: %.2f, Erreur: %.2f", mesure, consigne, erreur);
          ESP_LOGI("pid", "Kp: %.2f, Ki: %.2f, Intégrale: %.2f, Output: %.2f", Kp, Ki, id(pid_integral), output);
          ESP_LOGI("pid", "Striac (avant sécurité): %.2f", id(striac));
  
  # Régule Quadratique
  - id: regul_quadratique
    mode: single
    then:
      - lambda: |-
          float inc = 0;

          if (id(etatbus_ve).state == 3) {
            // Mode Bulk : régule sur la puissance batterie
            inc = id(pu_batteries).state * abs(id(pu_batteries).state) /
                  (id(coeff_rbat).state * id(coeff_rbat).state * 10000);
            id(moderegul).publish_state("Sur Pu batteries Bulk");
            ESP_LOGI("regul", "Bulk: PuBatt=%.1f -> inc=%.2f", id(pu_batteries).state, inc);
            // les 3 lignes servent à l'affichage du PID, peuvent etre supprimées
            id(coeff_cours).publish_state(id(coeff_rbat).state);
            id(mes_cours).publish_state(id(pu_batteries).state);
            id(cons_cours).publish_state(id(pu_batteries).state-id(cons_pubatt).state);

          } else if (id(pu_batteries).state >= id(seuil_pubatt).state) {
            // Sinon, si la batterie débite trop, on régule via l'injection réseau (négatif)
            inc = -1 * id(pureseau1).state * abs(id(pureseau1).state) /
                  (id(coeff_r).state * id(coeff_r).state * 10000);
            id(moderegul).publish_state("Sur Pu reseau");
            ESP_LOGI("regul", "Reseau: PuR1=%.1f -> inc=%.2f", id(pureseau1).state, inc);
            // les 3 lignes servent à l'affichage du PID, peuvent etre supprimées
            id(coeff_cours).publish_state(id(coeff_r).state);
            id(mes_cours).publish_state(id(pureseau1).state);
            id(cons_cours).publish_state(0);          
            
          } else {
            // Sinon, on reste sur la puissance batterie en mode non-bulk
            inc = id(pu_batteries).state * abs(id(pu_batteries).state) /
                  (id(coeff_rbat).state * id(coeff_rbat).state * 10000);
            id(moderegul).publish_state("Sur Pu batteries Non Bulk");
            ESP_LOGI("regul", "Non Bulk: PuBatt=%.1f -> inc=%.2f", id(pu_batteries).state, inc);
            // les 3 lignes servent à l'affichage du PID, peuvent etre supprimées
            id(coeff_cours).publish_state(id(coeff_rbat).state);
            id(mes_cours).publish_state(id(pu_batteries).state);
            id(cons_cours).publish_state(0);
          }

          // Limite de l'incrément
          if (inc > 15) inc = 15;
          if (inc < -15) inc = -15;

          // Application de l'incrément sur striac
          if (!isnan(id(striac))) {
            id(striac) += inc;
          } else {
            id(striac) = 0;
            ESP_LOGW("regul", "striac is NaN, reset to 0");
          }

          // Clamp final du striac
          if (id(striac) < 0) id(striac) = 0;
          if (id(striac) > id(pmax).state) id(striac) = id(pmax).state;

          // Log final
          ESP_LOGI("regul", "Final: STRIAC=%.2f (inc=%.2f, pmax=%.1f)", id(striac), inc, id(pmax).state);



  # Régule Proportionnelle
  - id: regul_Propor
    mode: single
    then:  
      - lambda: |-
          if (id(etatbus_ve).state == 3){
            id(increment) = (id(pu_batteries).state-id(cons_pubatt).state)*id(coeff_rbat).state/1000;
            id(moderegul).publish_state( "Sur Pu batteries Bulk");
            // les 3 lignes servent à l'affichage du PID, peuvent etre supprimées
            id(coeff_cours).publish_state(id(coeff_rbat).state);
            id(mes_cours).publish_state(id(pu_batteries).state);
            id(cons_cours).publish_state(id(pu_batteries).state-id(cons_pubatt).state);

          } else {
            if (id(pu_batteries).state >= id(seuil_pubatt).state){
              id(increment) = id(pureseau1).state*id(coeff_r).state/1000*-1;
              id(moderegul).publish_state( "Sur Pu reseau");
              // les 3 lignes servent à l'affichage du PID, peuvent etre supprimées
              id(coeff_cours).publish_state(id(coeff_r).state);
              id(mes_cours).publish_state(id(pureseau1).state);
              id(cons_cours).publish_state(0);

            } else { 
              id(increment) = id(pu_batteries).state*id(coeff_rbat).state/1000;
              id(moderegul).publish_state( "Sur Pu batteries Non Bulk");
              // les 3 lignes servent à l'affichage du PID, peuvent etre supprimées
              id(coeff_cours).publish_state(id(coeff_rbat).state);
              id(mes_cours).publish_state(id(pu_batteries).state);
              id(cons_cours).publish_state(0);
            } 
          } 

          if (!isnan(id(striac))) {
            id(striac) = id(striac) + id(increment);
          } else {
            id(striac) = 0;
          }

          if (id(striac) <= 0) {
            id(striac) = 0;
          } else if (id(striac) >= id(pmax).state) {
            id(striac) = id(pmax).state;
          }
     
      - logger.log:
          format: "Log S Triac %f - Increment %f"
          args: [ 'id(striac)', 'id(increment)' ]
          level: "info"

 ########################################################################""
    # ------------  Pilotage led
  - id: etat_production
    mode: single
    then:
      - if: 
          condition:
            sensor.in_range:
              id: pureseau1
              below: -50
          then:
            - output.turn_on: led_rouge
          else:
            - output.turn_off: led_rouge
            
      - if: 
          condition:
            switch.is_on: validrouteur
          then:
            - output.turn_on: led_jaune
          else:
            - output.turn_off: led_jaune
 
 ########################################################################""
  - id: calcul_relais_surprod
    mode: single
    then:
     # Si sortie triac > pmax-5%, ce qui signifie que le triac est au max sans effet, pendant plus de 60s
     # alors on active le relais
     # si triac <= 0 alors on desactive le relais
      - if: 
          condition:
            - lambda: 'return (id(striac)>=id(pmax).state-5 && id(puecs).state<100);'
          then:
            - delay: 300s
            - switch.turn_on: relais
            - logger.log: "Relais Activé"

      - if: 
          condition:
            - lambda: 'return id(puecs).state >= 100;'
          then:
            - switch.turn_off: relais
            - logger.log: "Relais Désactivé"

  # Envoi d'un message à Telegram via HA, celui ci doit etre operationnel
  # Message à construire au format String avant appel de ce script
  - id: _message_telegram
    parameters:
      mess1: string
    then:
      - lambda: |-
          std::string mess = id(sntp_time).now().strftime("%Y-%m-%d %H:%M:%S").c_str();
          mess += "\n";
          mess += mess1;
          id(telegram_msg_buffer) = mess;
      - homeassistant.service:
          service: notify.telegram
          data:
            message: !lambda 'return id(telegram_msg_buffer).c_str();'  