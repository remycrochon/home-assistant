substitutions:
  device_name: "esp176-esp32-routeur-1r"
  friendly_name: esp176
  adress_ip: "192.168.0.176"
  time_timezone: "Europe/Paris"

packages:
  ph: !include pack_esp176/jsk.yaml

esphome:
  name: ${device_name}
  project:
    name: "rem81.esp176-esp32-routeur"
    version: "1.0.0"
  on_boot:
    priority: -100
    # Force mode auto et tempok au demarrage
    then: 
      - switch.turn_on: modeauto
      - binary_sensor.template.publish:
          id: temperatureok
          state: ON

esp32:
  board: esp32dev
  framework:
    type: arduino
    
wifi:
  networks:
    - ssid: !secret wifi
      password: !secret mdpwifi
  reboot_timeout: 5min

  manual_ip:
    static_ip: ${adress_ip}
    gateway: 192.168.0.254
    subnet: 255.255.255.0
    
# Utilisez la LED bleue de l'appareil comme LED d'état, qui clignotera s'il y a des avertissements (lent) ou des erreurs (rapide)
status_led:
  pin:
    number: GPIO32 # led jaune
    inverted: true

# Enable logging
logger:
  baud_rate: 0
  level: info

#    modbus.component: INFO
# Enable Home Assistant API
api:

ota:
  platform: esphome
web_server:
  port: 80
  version: 3

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Paris
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org  

# Protocole I2C
i2c:
  sda: GPIO21 
  scl: GPIO22
  scan: True
  id: bus_a
  frequency: 400kHz

# Mosquitto Proxmox
mqtt:
  broker: 192.168.0.204
  username: !secret mqtt_pve_name
  password: !secret mqtt_pve_pw
  #internal_mqtt_default: internal

globals:
  - id: increment
    type: float
    restore_value: yes
    initial_value: '0'

  - id: p_dispo_lisse
    type: float
    restore_value: yes
    initial_value: '0'

  - id: striac
    type: float
    restore_value: yes
    initial_value: '0.0'

  # raffraichit la consigne pour Graphana
  - id: valeur_consigne
    type: float
    restore_value: no
    initial_value: '0.0'

# Sonde Temperature Dallas
one_wire:
  - platform: gpio  
    pin: GPIO27 #

# Informations supplementaires sur le WIFI
#text_sensor:
#  - platform: wifi_info
#    ip_address:
#      name: ${friendly_name}_ESP IP Address
#    ssid:
#      name: ${friendly_name}_ESP Connected SSID
#    bssid:
#      name: ${friendly_name}_ESP Connected BSSID
#    mac_address:
#      name: ${friendly_name}_ESP Mac Wifi Address
#    scan_results:
#      name: ${friendly_name}_ESP Latest Scan Results


binary_sensor:
  #Etat de la connection
    - platform: status
      name: "${friendly_name}_Status"
  
    - platform: template
      name: "${friendly_name} Temp Ok"
      id: temperatureok
  
    - platform: template
      name: "${friendly_name} Seuil Prod Ok"
      id: seuil_prod_ok

    - platform: template
      name: "${friendly_name} Seuil SOC Ok"
      id: seuil_soc_ok
  
# Input Number
number:
  # Seuil Max sortie triac
  - platform: template
    name: "${friendly_name} P Max"
    id: pmax
    optimistic: true
    restore_value: true
    mode: box
    min_value: 50
    max_value: 100
    unit_of_measurement: "%"
    step: 1

  # Seuil MAX temperature
  - platform: template
    name: "${friendly_name} T Max"
    id: tmax
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 75
    unit_of_measurement: "C°"
    step: 0.1

  # Coeff Réactivité
  - platform: template
    name: "${friendly_name} Coeff R"
    id: coeff_r
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 1000
    unit_of_measurement: ""
    step: 0.1

  # Coeff Réactivité Puissance Batteries
  - platform: template
    name: "${friendly_name} Coeff R bat"
    id: coeff_rbat
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 1000
    unit_of_measurement: ""
    step: 0.1   

  # Seuil sur Regul Puissance batteries 
  - platform: template
    name: "${friendly_name} Seuil Pu Batteries"
    id: seuil_pubatt
    optimistic: true
    restore_value: true
    mode: box
    min_value: -2500
    max_value: 0
    unit_of_measurement: "W"
    step: 1
  
  # Consigne Régul sur Puissance Batteries
  - platform: template
    name: "${friendly_name} Consigne Pu Batteries"
    id: cons_pubatt
    optimistic: true
    restore_value: true
    mode: box
    min_value: -2500
    max_value: 2500
    unit_of_measurement: "W"
    step: 1

  # seuil SOC validation routeur
  - platform: template
    name: "${friendly_name} Seuil SOC"
    id: seuil_soc
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 100
    unit_of_measurement: "%"
    step: 1

  # seuil Production validation routeur 
  - platform: template
    name: "${friendly_name} Seuil Production Val Routeur"
    id: seuil_prod
    optimistic: true
    restore_value: true
    mode: box
    min_value: 100
    max_value: 3000
    unit_of_measurement: "W"
    step: 1

  # Limite de l'increment 
  - platform: template
    id: delta_striac_max
    name: "Delta Max Increment"
    mode: box
    min_value: 0
    max_value: 10
    step: 0.001
    initial_value: 0.05
    restore_value: true       
    optimistic: true 

  # Coeff régulation PID
  - platform: template
    name: "PID Kp"
    id: kp_gain
    mode: box
    min_value: 0
    max_value: 5
    step: 0.01
    initial_value: 0.5
    restore_value: true    
    optimistic: true

  - platform: template
    name: "PID Ki"
    id: ki_gain
    mode: box
    min_value: 0
    max_value: 1
    step: 0.001
    initial_value: 0.1
    restore_value: true       
    optimistic: true

  - platform: template
    name: "PID Kd"
    id: kd_gain
    mode: box
    min_value: 0
    max_value: 1
    step: 0.001
    initial_value: 0.05
    restore_value: true       
    optimistic: true 

sensor:
    
  # Informations WI_FI
  - platform: wifi_signal # Affiche le signal WiFi strength/RSSI en dB
    name: "${friendly_name} WiFi Signal dB"
    update_interval: 60s

  ############### TEMPLATE  ######################"
  # Affichage dans HA et sur l'afficheur
  - platform: template
    name: "${friendly_name} Pu Reseau"
    id: pureseau1
    unit_of_measurement: "W"
    state_class: "measurement"  

  - platform: template
    name: "${friendly_name} Increment"
    id: afincrement
    unit_of_measurement: ""
    accuracy_decimals: 2
    state_class: "measurement"

  - platform: template
    name: "${friendly_name} Sortie Triac"
    id: afstriac
    unit_of_measurement: "%"
    state_class: "measurement"  
    accuracy_decimals: 2
  
  - platform: template
    name: "Pu Disponible"
    id: afpdispo
    unit_of_measurement: "W"
    state_class: "measurement"      
    accuracy_decimals: 0

  # Les MQTT sont déclarés dans le Node Red du Cerbo GX
  # https://venus.local:1881/#flow/dbd727f16cbe7b5f
  - platform: mqtt_subscribe
    name: "${friendly_name} Conso Maison"
    id: conso_maison
    topic: mp2/multiplus2/conso_out1
    unit_of_measurement: "W"
    state_class: "measurement"  
    accuracy_decimals: 2
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 1

  - platform: mqtt_subscribe
    name: "${friendly_name} Pu batterie"
    id: pu_batteries
    topic: mp2/batteries/puissance
    unit_of_measurement: "W"
    state_class: "measurement"  
    accuracy_decimals: 2
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 1
        
  - platform: mqtt_subscribe
    name: "${friendly_name} Pu Produite"
    id: pu_prod
    topic: mp2/multiplus2/prod_totale
    unit_of_measurement: "W"
    state_class: "measurement"  
    accuracy_decimals: 2

  - platform: mqtt_subscribe
    name: "${friendly_name} Soc"
    id: soc
    topic: mp2/batteries/soc
    unit_of_measurement: "%"
    state_class: "measurement"  
    accuracy_decimals: 2

  - platform: mqtt_subscribe
    name: "${friendly_name} Etat Bus VE"
    id: etatbus_ve
    topic: mp2/multiplus2/etatbusve
    accuracy_decimals: 0

  # lecture sensor Home Assistant
  - platform: homeassistant
    name: "${friendly_name} Status Bus VE"
    entity_id: sensor.mp2_status_bus_ve
    id: statusbusve

  - platform: homeassistant
    name: "${friendly_name} Tarif Num"
    entity_id: sensor.linky_n_tarif
    id: hc

  # Sonde Temperature radiateur
  - platform: dallas_temp
    address: 0xeb012112e461b128
    name: "${friendly_name} Temp triac"
    id: temp_triac
    update_interval: 60s
    filters:
      - filter_out: NAN

  # Sensor Intermediaire pour affichage PID
  - platform: template
    name: "Coeff en Cours"
    unit_of_measurement: " "
    id: coeff_cours
    state_class: "measurement"  
    accuracy_decimals: 2

  - platform: template
    name: "Mes en Cours"
    id: mes_cours
    unit_of_measurement: "W"
    state_class: "measurement"  
    accuracy_decimals: 0

  - platform: template
    name: "Cons en Cours"
    id: cons_cours
    unit_of_measurement: "W"
    state_class: "measurement"  
    accuracy_decimals: 0
    update_interval: 10s
    lambda: |-
      return id(valeur_consigne);
  
# déclaration des "text_sensors"
text_sensor:
  - platform: template
    name: "${friendly_name} Mode Regulation"
    id: moderegul

switch:
  - platform: gpio
    name: "${friendly_name} Relais"
    pin: GPIO5
    id: relais

  - platform: template
    name: "${friendly_name} Mode Auto"    
    id: modeauto
    optimistic: true
    restore_mode: always_on
    on_turn_off:
      - light.turn_off: gradateur

  - platform: template
    name: "${friendly_name} Valid Routeur"    
    id: validrouteur
    optimistic: true
    restore_mode: always_on

  - platform: restart
    name: "${friendly_name} Restart"

output:
  #LEDS --------------------------------------
  - id: led_jaune
    platform: gpio
    pin: GPIO26 #GPIO32

  - id: led_rouge
    platform: gpio
    pin: GPIO25

  # Pilotage du Dimmer
  - platform: ac_dimmer
    id: ecs
    gate_pin: GPIO33
    method: leading
    zero_cross_pin:
      number: GPIO34 
      mode:
        input: true
      inverted: yes
    min_power: 5%

light:
  - platform: monochromatic
    name: "${friendly_name} STriac"
    output: ecs
    id: gradateur
    default_transition_length: 50ms

  # Affichage
display:
  - platform: lcd_pcf8574
    dimensions: 20x4
    address: 0x27
    update_interval: 20s  # Plus espacé pour alléger la charge CPU
    lambda: |-
      char ligne0[21];
      char ligne1[21];
      char ligne2[21];
      char ligne3[21];

      snprintf(ligne0, sizeof(ligne0), "Pr=%0.0fW Pe=%0.0fW", id(pureseau1).state, id(puecs).state);
      snprintf(ligne1, sizeof(ligne1), "Tr=%0.1f%% V:%s", id(striac), id(validrouteur).state ? "OK" : "NOK");
      snprintf(ligne2, sizeof(ligne2), "Tp=%0.1fc E:%s", id(temp_triac), id(temperatureok).state ? "OK" : "NOK");
      snprintf(ligne3, sizeof(ligne3), "Mode:%s Inc=%0.1f", id(modeauto).state ? "Auto" : "Manu", id(increment));

      it.print(0, 0, ligne0);
      it.print(0, 1, ligne1);
      it.print(0, 2, ligne2);
      it.print(0, 3, ligne3);

interval:
  - interval: 1s
    then:
      - script.execute: calcul_injection
      - script.execute: calcul_relais_surprod      
  - interval: 3s
    then:      
      - script.execute: etat_production 


 ########################################################################""
script:
  # Calcul puissance de la puissance à injecter dans le triac pilotant l'ECS
  - id: calcul_injection
    mode: single
    then:
      - lambda: |-
          //  Pu production > Seuil de production
          id(seuil_prod_ok).publish_state(id(pu_prod).state > id(seuil_prod).state);

          // # Seuil de SOC (avec hysteresis de 2 %)
          if (id(soc).state >= id(seuil_soc).state) {
            id(seuil_soc_ok).publish_state(true);
          } else if (id(soc).state < (id(seuil_soc).state - 2)) {
            id(seuil_soc_ok).publish_state(false);
          }

          // Surveille température triac
          if (id(temp_triac).state < (id(tmax).state - 2)) {
            id(temperatureok).publish_state(true);
          } else if (id(temp_triac).state >= id(tmax).state) {
            id(temperatureok).publish_state(false);
          }
          // Log de débug
          // ESP_LOGI("regulp", "P Prod; %.0f Seuil: %.2f",id(pu_prod).state,id(seuil_prod).state);
      # Si conditions non Ok alors RAZ du Triac
      - if:
          condition:
            or:
              # Cas 1 : Mode manuel => OFF
              - switch.is_off: modeauto

              # Cas 2 : Mode auto avec conditions NOK => OFF
              - and:
                  - switch.is_on: modeauto
                  - or:
                      - switch.is_off: validrouteur
                      - binary_sensor.is_off: temperatureok
                      - binary_sensor.is_off: seuil_prod_ok
                      - lambda: 'return id(soc).state < id(seuil_soc).state;'
          then:
            - lambda: |-
                id(striac) = 0;
                id(increment) = 0;
                id(moderegul).publish_state("OFF");

                // RAZ de l'affichage du PID A supprimer si inutile
                id(coeff_cours).publish_state(0);
                id(mes_cours).publish_state(0);
                id(valeur_consigne) = 0;

            - light.turn_off: gradateur
            - logger.log:
                format: "Régulation OFF - Mode: %s - Striac: %.1f"
                args: ['id(moderegul).state.c_str()', 'id(striac)']
                level: DEBUG
      # Si toutes les conditions OK alors on calcule la S triac
      - if:
          condition:
            and:
              # Cas 3 : Mode auto + toutes les conditions OK => PID actif
              - switch.is_on: modeauto
              - switch.is_on: validrouteur
              - binary_sensor.is_on: seuil_prod_ok
              - binary_sensor.is_on: temperatureok
              - lambda: 'return id(soc).state >= id(seuil_soc).state;'
          then:
            # Script de régulation
            - script.execute: regulation
            
            - light.turn_on:
                id: gradateur
                brightness: !lambda |-
                  return id(striac) / 100;
            - logger.log:
                format: "Régul ON - S triac (Après Securité): %.2f"
                args: [ 'id(striac)' ]
                level: DEBUG

      # Affichage STriac et Increment
      - lambda: |-
            id(afstriac).publish_state( id(striac) );
            id(afincrement).publish_state( id(increment) );
  
  ########################################################################""
  # Principe de la régulation:
  # Si Bus Ve en Bulk, on paratge le surplus entre la batterie et l'ECS avec une consigne de (1200W)
  #   Consigne= Consigne pu Batteries & Mesure = Pu Batteries
  # Si Bus Ve non Bulk (float), cela signifie que la batterie est chargée, alors:
  # Si la PU Batteries est superieure à un seuil (-100), ça veut dire que la batterie se charge un peu
  #   Consigne= 0 & Mesure = Pu Réseau
  # Sinon:
  #   Consigne= 0 & Mesure = Pu Batteries
  # C'est popur éviter de décharger la batterie dans l'ECS

  - id: regulation
    mode: single
    then:
      - lambda: |-
          float mesure = 0, consigne = 0, coeff = 0, inc = 0, p_dispo=0;          
          std::string regul;

          // id(p_dispo)= id(pu_prod).state - id(conso_maison).state;
          // Calcul de la puissance disponible (pu prod-pu maison) qui doit se situé entre 
          //float p_dispo = id(pu_prod).state - id(conso_maison).state;
          //p_dispo = (p_dispo < 100.0) ? 100.0 : p_dispo;
          //p_dispo = (p_dispo > id(cons_pubatt).state) ? id(cons_pubatt).state : p_dispo;

          // Evolution progressive de la consigne par pas de 10W
          float p_dispo_target = id(pu_prod).state - id(conso_maison).state;
          p_dispo_target = (p_dispo_target < 0.0) ? 0.0 : p_dispo_target;
          p_dispo_target = (p_dispo_target > id(cons_pubatt).state) ? id(cons_pubatt).state : p_dispo_target;

          // seuil de variation max (W)
          float max_step = 10.0;

          float delta = p_dispo_target - id(p_dispo_lisse);
          if (delta > max_step) {
            id(p_dispo_lisse) += max_step;
          } else if (delta < -max_step) {
            id(p_dispo_lisse) -= max_step;
          } else {
            id(p_dispo_lisse) = p_dispo_target;
          }

          p_dispo=id(p_dispo_lisse);

          id(afpdispo).publish_state(p_dispo);

          // Sélection de Consigne et Mesure en fonction de la charge des batteries
          if (id(etatbus_ve).state == 3) {
            // Mode Bulk : régule sur la puissance batterie
            mesure = id(pu_batteries).state;
            //consigne = id(cons_pubatt).state;
            consigne = p_dispo;
            coeff= id(coeff_rbat).state;
            regul= "Sur Pu batteries Bulk";

          } else if (id(pu_batteries).state >= id(seuil_pubatt).state) {
            // Sinon, si la batterie débite trop, on régule via l'injection réseau (négatif)
            mesure = id(pureseau1).state*-1;
            consigne = 0;
            coeff= id(coeff_r).state;
            regul= "Sur Pu reseau";

          } else {
            // Sinon, on reste sur la puissance batterie en mode non-bulk
            mesure = id(pu_batteries).state;
            consigne = 0;
            coeff= id(coeff_rbat).state;
            regul= "Sur Pu batteries Non Bulk";
          }

          // Calcul de l'erreur et de l'incrément quadratique
          float erreur = mesure - consigne;

          // Zone morte : si l'erreur est trop petite, on ignore
          if (abs(erreur) < 10.0) {
            inc = 0;
          ESP_LOGI("regul", "Zone morte active - Erreur %.2f < 10 W, aucune action sur striac", erreur);            
          } else {
            // Choix de l'algorithme de régulation

            // Calcul de l'incrément quadratique
            // inc = (erreur * erreur * coeff) / 1000.0;
            // if (erreur < 0) inc = -inc;

            // ou

            // Calcul de l'increment proportionnel
            inc = (mesure-consigne)*coeff/1000;
          }

          // Limitation de l'incrément par cycle (delta max)
          float delta_max = id(delta_striac_max).state;
          inc = constrain(inc, -delta_max, delta_max);

          // Application sur striac avec sécurité NaN
          if (isnan(id(striac))) id(striac) = 0;
          id(striac) = constrain(id(striac) + inc, 0, id(pmax).state);

          // Sortie finale du striac
          if (id(striac) < 0) id(striac) = 0;
          if (id(striac) > id(pmax).state) id(striac) = id(pmax).state;

          // Log de débug
          ESP_LOGI("regulp", "Pdispo; %.0f Mes: %.2f Cons: %.2f Inc: %.2f Striac: %.2f",
            p_dispo,mesure,consigne,inc,id(striac));

          // Publication Home Assistant
          id(moderegul).publish_state(regul);
          id(increment) = inc;
          id(coeff_cours).publish_state(inc);
          id(mes_cours).publish_state(mesure);
          id(valeur_consigne) = consigne;

  ########################################################################""
    # ------------  Pilotage led
  - id: etat_production
    mode: single
    then:
      - if: 
          condition:
            sensor.in_range:
              id: pureseau1
              below: -50
          then:
            - output.turn_on: led_rouge
          else:
            - output.turn_off: led_rouge
            
      - if: 
          condition:
            switch.is_on: validrouteur
          then:
            - output.turn_on: led_jaune
          else:
            - output.turn_off: led_jaune
 
 ########################################################################""
  - id: calcul_relais_surprod
    mode: single
    then:
     # Si sortie triac > pmax-5%, ce qui signifie que le triac est au max sans effet, pendant plus de 60s
     # alors on active le relais
     # si triac <= 0 alors on desactive le relais
      - if: 
          condition:
            - lambda: 'return (id(striac)>=id(pmax).state-5 && id(puecs).state<100);'
          then:
            - delay: 300s
            - switch.turn_on: relais
            - logger.log: "Relais Activé"

      - if: 
          condition:
            - lambda: 'return id(puecs).state >= 100;'
          then:
            - switch.turn_off: relais
            - logger.log: "Relais Désactivé"

