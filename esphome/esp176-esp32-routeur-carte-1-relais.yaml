substitutions:
  device_name: "esp176-esp32-routeur-1r"
  friendly_name: esp176
  adress_ip: "192.168.0.176"
  time_timezone: "Europe/Paris"
  
esphome:
  name: ${device_name}
  platform: ESP32
  board: esp32dev
  project:
    name: "rem81.esp176-esp32-routeur"
    version: "1.0.0"
#  on_boot:
#    priority: 800
#    then: 
#     - lambda: id(ecs).publish_state( 0.0001 );

wifi:
  networks:
    - ssid: !secret wifi
      password: !secret mdpwifi
  reboot_timeout: 5min

  manual_ip:
    static_ip: ${adress_ip}
    gateway: 192.168.0.254
    subnet: 255.255.255.0

# Enable logging
logger:
  baud_rate: 0
# Enable Home Assistant API
api:

ota:

web_server:
  port: 80


i2c:
  sda: GPIO21 
  scl: GPIO22
  scan: True
  id: bus_a

uart:
  id: mod_bus
  tx_pin: 17
  rx_pin: 16
  baud_rate: 4800
  stop_bits: 1
#  debug:
#    direction: BOTH
#    dummy_receiver: false
#    after:
#      delimiter: "\n"
#    sequence:
#      - lambda: UARTDebug::log_string(direction, bytes);

modbus:
#flow_control_pin: 5
#send_wait_time: 200ms
  id: modbus1

modbus_controller:
  - id: jsymk
    ## the Modbus device addr
    address: 0x1
    modbus_id: modbus1
    update_interval: 1s
    # setup_priority: -10

globals:
   - id: increment
     type: float
     restore_value: no
     initial_value: '0'
   - id: striac
     type: float
     restore_value: yes

   - id: palier0
     type: int
     restore_value: no
     initial_value: '0'
   - id: palier1
     type: int
     restore_value: no
     initial_value: '15'
   - id: palier2
     type: int
     restore_value: no
     initial_value: '50'
   - id: palier3
     type: int
     restore_value: no
     initial_value: '100'
   - id: palier4
     type: int
     restore_value: no
     initial_value: '200'
   - id: palier5
     type: int
     restore_value: no
     initial_value: '300'
   - id: palier6
     type: int
     restore_value: no
     initial_value: '600'
   - id: palier7
     type: int
     restore_value: no
     initial_value: '900'

# Utilisez la LED bleue de l'appareil comme LED d'état, qui clignotera s'il y a des avertissements (lent) ou des erreurs (rapide)
status_led:
  pin:
    number: GPIO26
    inverted: true

#sonde Dallas
dallas:
  - pin: GPIO27 #
    update_interval: 10s

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${friendly_name}_ESP IP Address
    ssid:
      name: ${friendly_name}_ESP Connected SSID
    bssid:
      name: ${friendly_name}_ESP Connected BSSID
    mac_address:
      name: ${friendly_name}_ESP Mac Wifi Address
#    scan_results:
#      name: ${friendly_name}_ESP Latest Scan Results


binary_sensor:
#Etat de la connection
  - platform: status
    name: "${friendly_name}_Status"


# Reception de la puissance avant transfert vers le template
number:

  - platform: template
    name: "${friendly_name} P Max"
    id: pmax
    optimistic: true
    restore_value: true
    mode: box
    min_value: 50
    max_value: 100
    unit_of_measurement: "%"
    step: 1

  - platform: template
    name: "${friendly_name} P Min"
    id: pmin
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 25
    unit_of_measurement: "%"
    step: 1

sensor:  

#Voltage = ByteData[1] * 0.0001;     // Tension         48
#Intensite1 = ByteData[2] * 0.0001;     // Intensité 1  49
#Power1 = ByteData[3] * 0.0001;     // Puissance 1      4A
#Energy1 = ByteData[4] * 0.0001;     // Energie 1       4B   
#Sens1 = ByteData[7];     // Sens 1                          
#Sens2 = ByteData[9];     // Sens 2
#Frequency = ByteData[8] * 0.01;     // Fréquence
#Intensite2 = ByteData[10] * 0.0001;     // Intensité 2
#Power2 = ByteData[11] * 0.0001;     // Puissance 2
#Energy2 = ByteData[12] * 0.0001;     // Energie 2

# tension de l'alimentation
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: Tension
    name: "${friendly_name} Tension JSKPV"
    address: 0x0048
    unit_of_measurement: "V"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001

# Intensité traversant le tore
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: Itore
    name: "${friendly_name} I_Tore JSKPV"
    address: 0x0049
    unit_of_measurement: "A"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001

# Puissance traversant le tore
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: putore
    name: "${friendly_name} P_Tore JSKPV"
    address: 0x004A
    unit_of_measurement: "W"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001

# Energie lue dans le tore
#  - platform: modbus_controller
#    modbus_controller_id: jsymk
#    id: energie1
#    name: "${friendly_name} Energie1 JSKPV"
#    address: 0x004B
#    unit_of_measurement: "kWh"
#    register_type: holding
#    value_type: U_DWORD
#    accuracy_decimals: 1
#    filters:
#      - multiply: 0.0001

# Sens du courant dans le tore
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: senstore
    name: "${friendly_name} Sens_Tore JSKPV"
    address: 0x004E
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

# Fréquence de l'alimentation  
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: frequence
    name: "${friendly_name} Frequence JSKPV"
    address: 0x0050
    unit_of_measurement: "hz"    
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01

# Sens du courant dans la pince
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: sensreseau
    name: "${friendly_name} Sens_Reseau JSKPV"
    address: 0x004F
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 1

# Intensité lue dans la pince
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: Ireseau
    name: "${friendly_name} I_Reseau JSKPV"
    address: 0x0051
    unit_of_measurement: "A"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001

# puissance lue dans la pince
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: pureseau
    name: "${friendly_name} P_Reseau JSKPV"
    address: 0x0052
    unit_of_measurement: "W"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    on_value:
      then:
        - lambda: |-
            if ( id(sensreseau).state == 0 ) {
              id(pureseau1).publish_state( id(pureseau).state *-1);
            } else {
              id(pureseau1).publish_state( id(pureseau).state );
            }
        - lambda: id(afincrement).publish_state( id(increment) );
        - lambda: id(afstriac).publish_state( id(striac) );
        - script.execute: calcul_injection 
        - script.execute: etat_production 

# Energie lue dans la pince
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: energietore
    name: "${friendly_name} Energie_tore JSKPV"
    address: 0x0053
    unit_of_measurement: "kWh"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001

# Informations WI_FI
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "${friendly_name} WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "${friendly_name} WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"

############### TEMPLATE  ######################"
# 
  - platform: template
    name: "${friendly_name} Pu Reseau"
    id: pureseau1
    unit_of_measurement: "W"
    state_class: "measurement"  
 
  - platform: template
    name: "${friendly_name} Increment"
    id: afincrement
    unit_of_measurement: ""
    accuracy_decimals: 2
    state_class: "measurement"
    update_interval: 60s
    lambda: |-
     return id(increment);  

  - platform: template
    name: "${friendly_name} Sortie Triac"
    id: afstriac
    unit_of_measurement: "%"
    state_class: "measurement"  
    accuracy_decimals: 2
    update_interval: 60s
    lambda: |-
      return id(striac);

# Sonde Temperature radiateur
  - platform: dallas
    address: 0x82012111efe81d28
    name: "${friendly_name} Temp triac"
    id: temp_triac
    filters:
      - filter_out: NAN
                    
switch:
  - platform: gpio
    name: "${friendly_name} Relais"
    pin: GPIO5
    id: relais

  - platform: template
    name: "${friendly_name} Validation Router"    
    id: val_router
    optimistic: true
    restore_state: true   

  - platform: restart
    name: "${friendly_name} Restart"

#AC dimmer level 0 à 1-----------------------------------------------------------------------

output:
  #LEDS -----------------------------------------------------------------------------------------
  - id: led_conso
    platform: gpio
    pin: GPIO32
    
  - id: led_injec
    platform: gpio
    pin: GPIO25

  - platform: ac_dimmer
    id: ecs
    gate_pin: GPIO33
    method: leading
    zero_cross_pin:
      number: GPIO34 
      mode:
        input: true
      inverted: yes
    min_power: 25%

light:
  - platform: monochromatic
    name: "${friendly_name}+STriac"
    output: ecs
    id: gradateur
    default_transition_length: 50ms

# Affichage
display:
  - platform: lcd_pcf8574
    dimensions: 20x4
    address: 0x27
    lambda: |-
      it.printf(0,0,"Pu=%8.0f W",id(pureseau1).state);
      it.printf(0,1,"Inc=%7.1f ",id(increment));
      it.printf(0,2,"Triac=%5.1f %%",id(striac));
      it.printf(0,3,"Valid: %s", id(val_router).state ? "ON" : "OFF");
      
#interval:

#  - interval: 0.5s
#    then:

    #calcul niveau d'injection et injection dans triac
    #  - script.execute: calcul_injection 

    #script affichage
    #  - script.execute: etat_production 

#Scripts
script:
#calcul puissance injection
  - id: calcul_injection
    mode: single
    then:
      - lambda: |-
         id(increment) = 0.0;
      - if: 
          condition:
            lambda: |-
              return abs(id(pureseau1).state) >= id(palier0) && abs(id(pureseau1).state) < id(palier1);
          then:
            - lambda: |-
                id(increment) = 0.0;
      - if: 
          condition:
            lambda: |-
              return abs(id(pureseau1).state) >= id(palier1) && abs(id(pureseau1).state) < id(palier2);
          then:
            - lambda: |-
               id(increment) = 0.5;
      - if: 
          condition:
            lambda: |-
              return abs(id(pureseau1).state) >= id(palier2) && abs(id(pureseau1).state) < id(palier3);
          then:
            - lambda: |-
               id(increment) = 1.0;               
      - if: 
          condition:
            lambda: |-
              return abs(id(pureseau1).state) >= id(palier3) && abs(id(pureseau1).state) < id(palier4);
          then:
            - lambda: |-
               id(increment) = 1.5;               
      - if: 
          condition:
            lambda: |-
              return abs(id(pureseau1).state) >= id(palier4) && abs(id(pureseau1).state) < id(palier5);
          then:
            - lambda: |-
               id(increment) = 2.0;
      - if: 
          condition:
            lambda: |-
              return abs(id(pureseau1).state) >= id(palier5) && abs(id(pureseau1).state) < id(palier6);
          then:
            - lambda: |-
               id(increment) = 2.5;
      - if: 
          condition:
            lambda: |-
              return abs(id(pureseau1).state) >= id(palier6) && abs(id(pureseau1).state) < id(palier7);
          then:
            - lambda: |-
               id(increment) = 3.0;                                       
      - if: 
          condition:
            lambda: |-
              return abs(id(pureseau1).state) >= id(palier7);
          then:
            - lambda: |-
               id(increment) = 4.0;

      - if: 
          condition:
            lambda: |-
              return id(pureseau1).state < 0;
          then:
            - lambda: |-
                id(striac) = id(striac)+id(increment);
          else:
            - lambda: |-
                id(striac) = id(striac)-id(increment);            

      - logger.log:
          format: "Log S Triac= %f"
          args: [ 'id(striac)']

      - lambda: |-
          if (id(striac) <= id(pmin).state) {
            id(striac) = 0;
          } else if(id(striac)>=id(pmax).state){
            id(striac) = id(pmax).state;
          }

      - if: 
          condition:
             switch.is_on: val_router
          then:
            - light.turn_on:
                id: gradateur
                brightness: !lambda |-
                  return id(striac)/100 ;  
          else:
            - lambda: |-
                id(striac) = 0;
                id(increment) = 0;
            - light.turn_on:
                id: gradateur
                brightness: !lambda |-
                  return id(0) ;  

          
# Pilotage led
  - id: etat_production
    mode: single
    then:
     - if: 
         condition:
           sensor.in_range:
              id: pureseau1
              below: 50
              above: -50
         then:
           - output.turn_on: led_conso
           - output.turn_on: led_injec
                
     - if: 
         condition:
           sensor.in_range:
             id: pureseau1
             above: 50
         then:
           - output.turn_off: led_injec
           - output.turn_on: led_conso

     - if: 
         condition:
           sensor.in_range:
             id: pureseau1
             below: -50
         then:
          - output.turn_off: led_conso
          - output.turn_on: led_injec
