substitutions:
  device_name: "esp177-esp32-test"
  friendly_name: esp177
  adress_ip: "192.168.0.177"
  time_timezone: "Europe/Paris"

esphome:
  name: ${device_name}
  on_boot:
    priority: -10
    then:
    - wait_until:
        api.connected:
    - logger.log: API is connected!
    
esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: info

mqtt:
  broker: 192.168.0.37
  username: !secret mqtt_ha_name
  password: !secret mqtt_ha_pw
  #internal_mqtt_default: internal
  
# Enable Home Assistant API
api:
ota:
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    static_ip: ${adress_ip}
    gateway: 192.168.0.254
    subnet: 255.255.255.0

web_server:
  port: 80

captive_portal:

globals:
   - id: increment
     type: float
     restore_value: no
     initial_value: '0'
   - id: striac
     type: float
     restore_value: yes



# Input Number
number:


# regulation PID
# Consigne sur Puissance PID
  - platform: template
    name: "${friendly_name} Consigne Pu PID"
    id: cons_pid
    optimistic: true
    restore_value: true
    mode: box
    min_value: -100
    max_value: 8000
    unit_of_measurement: "W"
    step: 1

  - platform: template
    name: "${friendly_name} Coeff Kp"
    id: kp
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 10
    unit_of_measurement: ""
    step: 0.01

  - platform: template
    name: "${friendly_name} Coeff Ki"
    id: ki
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 10
    unit_of_measurement: ""
    step: 0.01

  - platform: template
    name: "${friendly_name} Coeff Kd"
    id: kd
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 10
    unit_of_measurement: ""
    step: 0.01


binary_sensor:
#Etat de la connection
  - platform: status
    name: "${friendly_name}_Status"


sensor:

# Les MQTT sont déclarés dans le Node Red du Cerbo GX
# https://venus.local:1881/#flow/dbd727f16cbe7b5f

  - platform: mqtt_subscribe
    name: "${friendly_name} Pu Reseau"
    id: pureseau
    topic: mp2/multiplus2/grid_l1_ac
    unit_of_measurement: "W"
    state_class: "measurement"  
    accuracy_decimals: 2
    
interval:
  - interval: 1500ms
    then:
      - script.execute: pid
# ------------------------  Scripts
script:
# 
# Calcul PID
# https://www.ferdinandpiette.com/blog/2011/08/implementer-un-pid-sans-faire-de-calculs/
#    erreur = consigne - mesure;
#    somme_erreurs += erreur;
#    variation_erreur = erreur - erreur_précédente;
#    commande = Kp * erreur + Ki * somme_erreurs + Kd * variation_erreur;
#    erreur_précédente = erreur
  - id: pid
    mode: single
    then:
      - lambda: |-
          static float num_executions = 0.0;
          ESP_LOGI("main", "I am at execution number %f", num_executions);
          num_executions += 1;

      - lambda: |-
          static float erreur;
          static float somme_erreurs;
          static float variation_erreur;
          static float erreur_precedente;
          static float sortie;

          somme_erreurs = 0.0;

          erreur = id(cons_pid).state-id(pureseau).state;
          somme_erreurs += erreur;
          variation_erreur=erreur-erreur_precedente;
          sortie = (id(kp).state*erreur)+(id(ki).state*somme_erreurs)+(id(kd).state*variation_erreur);
          erreur_precedente= erreur;
          id(striac) = sortie; 

          ESP_LOGI("Log","Erreurs: %f", erreur);
          ESP_LOGI("Log","SomErr: %f", somme_erreurs);
          ESP_LOGI("Log","ErrPre: %f", erreur_precedente);
          ESP_LOGI("Log","Sortie: %f",sortie);          

