substitutions:
  device_name: "esp178-esp32-piscine"
  friendly_name: esp178
  adress_ip: "192.168.0.178"
  time_timezone: "Europe/Paris"
  
esphome:
  name: ${device_name}
  platform: ESP32
  board: esp32dev
  project:
    name: "rem81.esp178-esp32-piscine"
    version: "0.0.0"

wifi:
  networks:
    - ssid: !secret wifi
      password: !secret mdpwifi
  reboot_timeout: 5min

  manual_ip:
    static_ip: ${adress_ip}
    gateway: 192.168.0.254
    subnet: 255.255.255.0

# Utilisez la LED bleue de l'appareil comme LED d'état, qui clignotera s'il y a des avertissements (lent) ou des erreurs (rapide)
status_led:
  pin:
    number: GPIO23
    inverted: true

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

captive_portal:
 
web_server:
  port: 80

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Paris
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org
# Connection Bus i2c (Afficheur, EZO,...)
i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a

# Connection sonde(s) de température DS18b20
dallas:
  - pin: GPIO9

globals:
    - id: g_tps_injection_ph_moins
      type: float
      restore_value: no
    - id: g_memoire_temp_eau
      type: float
      restore_value: yes
    - id: g_tps_filtration
      type: float
      restore_value: no
    - id: flag_tempo_ppe_filtre
      type: bool
# Limite haute du temps de filtration
    - id: g_temps_max_filtration
      type: float
      initial_value: '17'
# Limite basse du temps de filtration
    - id: g_temps_min_filtration
      type: float
      initial_value: '5'            
# Palier temperature/Temps filtration avec le mode "Palier"
    - id: g_temp_palier1
      type: float
      initial_value: '9'
    - id: g_temp_palier2
      type: float
      initial_value: '12'
    - id: g_temp_palier3
      type: float
      initial_value: '17'
    - id: g_temp_palier4
      type: float
      initial_value: '24' 

    - id: g_tps_palier1
      type: float
      initial_value: '1'      
    - id: g_tps_palier2
      type: float
      initial_value: '4'
    - id: g_tps_palier3
      type: float
      initial_value: '6'
    - id: g_tps_palier4
      type: float
      initial_value: '8'
    - id: g_tps_palier5
      type: float
      initial_value: '10'


# Constante utilisé dans le mode "Abaque"  
    # coeficients utilisées en duree_abaque():
#    abaque_a: float = 0.00335
#    abaque_b: float = -0.14953
#    abaque_c: float = 2.43489
#    abaque_d: float = -10.72859

    - id: g_abaque_a
      type: float
      initial_value: '0.00335'
    - id: g_abaque_b
      type: float
      initial_value: '-0.14953'
    - id: g_abaque_c
      type: float
      initial_value: '2.43489'
    - id: g_abaque_d
      type: float
      initial_value: '-10.72859'

    - id: g_hh
      type: int
    - id: g_mm
      type: int
    - id: g_ss
      type: int

# regulation pH
#    {% set a=states('sensor.ph_stat_median') | float(default=0) %} {% set
#    x=states('input_number.simul_ph') | float(default=0) %} {% set
#    b=states('input_number.ph_cible') | float(default=0) %} {% set
#    d=states('input_number.ph_debit_ppe') | float(default=0) %} {% set
#    e=states('input_number.ph_concentration') | float(default=0) %} {% set
#"    r=(((a-b)/(e/100))/d)*3600|round(2)|int(default=0) %} {% if r < 0 %} {{ 0 }}
#    {% else %} {{ (r%60)|int(default=0) }} {% endif %}

select:
  - platform: template
    name: "${friendly_name}_Mode_Fonctionnement_filtration"
    optimistic: true
    restore_value: true
    options:
      - Palier
      - Classique
      - Abaque
      - Ma_f
      - At_f
    id: _Mode_Fonctionnement_filtration
    on_value: 
      then:
        - script.execute: Fonctionnement_filtration

  - platform: template
    name: "${friendly_name}_Mode_Fonctionnement_regul_ph"
    optimistic: true
    restore_value: true
    options:
      - Auto
      - Ma_f
      - At_f
    id: _Mode_Fonctionnement_regul_ph
    on_value: 
      then:
        - script.execute: _regul_ph        

# Input Number
number:
  # Simulation Temp eau
  - platform: template
    name: "${friendly_name}_simule_Temp"
    id: temp_eau
    optimistic: true
    restore_value: true
    mode: box
    min_value: -10
    max_value: 50
    device_class: temperature
    step: 0.1  

  # Simulation Niveau pH
  - platform: template
    name: "${friendly_name}_simule_pH"
    id: simule_ph
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 10
    unit_of_measurement: "pH"
    step: 0.1  

  # Cible Niveau pH
  - platform: template
    name: "${friendly_name}_pH_Cible"
    id: _ph_cible
    optimistic: true
    restore_value: true
    mode: box
    min_value: 7
    max_value: 7.6
    unit_of_measurement: "pH"
    step: 0.1

  - platform: template
    name: "${friendly_name}_debit_ppe_ph_moins"
    id: _debit_ppe_moins
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 7.2
    unit_of_measurement: "l/h"
    step: 0.1

  - platform: template
    name: "${friendly_name}_taux_concentration_ph_moins"
    id: _taux_concentration_ph_moins
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 100
    unit_of_measurement: "%"
    step: 0.1
    icon: mdi:percent

binary_sensor:
#Etat de la connection
  - platform: status
    name: "${friendly_name}_Status"

  # Entrée logique permettant de lire le BP I00 de la carte
  - platform: gpio
    pin:
      number: GPIO00
      inverted: True
      mode:
        input: true
        pullup: true
    name: "${friendly_name}_bp1"

  # Entrées logiques permettant de lire des contacts exterieurs
  - platform: gpio
    pin:
      number: GPIO16
      inverted: True
      mode:
        input: true
        pullup: true
    name: "${friendly_name}_volet_ferme"
    id: volet_ferme

  - platform: gpio
    pin:
      number: GPIO17
      inverted: True
      mode:
        input: true
        pullup: true
    name: "${friendly_name}_tp_plein_lsh"

  - platform: gpio
    pin:
      number: GPIO04
      inverted: True
      mode:
        input: true
        pullup: true
    name: "${friendly_name}_tp_plein_lsl"

  - platform: gpio
    pin:
      number: GPIO18
      inverted: True
      mode:
        input: true
        pullup: true
    name: "${friendly_name}_ETOR4"

  - platform: gpio
    pin:
      number: GPIO5
      inverted: True
      mode:
        input: true
        pullup: true
    name: "${friendly_name}_ETOR5"

  - platform: gpio
    pin:
      number: GPIO19
      inverted: True
      mode:
        input: true
        pullup: true
    name: "${friendly_name}_ETOR6"
   
datetime:
  - platform: template
    id: heure_pivot
    type: time
    name: "${friendly_name}_heure_pivot"
    optimistic: yes
    initial_value: "13:30:00"
    restore_value: true
    disabled_by_default: false

  - platform: template
    id: h_debut
    type: time
    name: "${friendly_name}_h_debut"
    optimistic: yes
    initial_value: "13:00:00"
    restore_value: true

  - platform: template
    id: h_fin
    type: time
    name: "${friendly_name}_h_fin"
    optimistic: yes
    initial_value: "13:40:00"
    restore_value: true

  - platform: template
    id: h_duree
    type: time
    name: "${friendly_name}_h_duree"
    optimistic: yes
    initial_value: "01:00:00"
    restore_value: true


sensor:
  - platform: dallas
    address: 0x82012111efe81d28
    name: "${friendly_name}_temperature_eau"
    id: old_temp_eau
    filters:
      - filter_out: 0.0

# Mesure du pH
  - platform: ezo
    id: ph_ezo
    name: "${friendly_name}_ph_ezo"
    address: 99
    unit_of_measurement: "pH"
    accuracy_decimals: 2
    update_interval: 60s # Mettre 1 s pour etalonnage attendre 2/3 minutes que la valeur se tabilise
  #  moyenne sur 15 mn-affichage toutes les 5mn
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 5
          send_first_at: 1
  # Etalonné le 28 juin 2023          
      - calibrate_linear:
        - 4.547 -> 4.0
        - 7.282 -> 6.86
        - 9.447 -> 9.18
  # Etalonné le 6 juillet 2022          
  #    - calibrate_linear:
  #      - 4.44 -> 4.0
  #      - 7.17 -> 6.86
  #      - 9.41 -> 9.18

# Mesure de la pression filtre Entrée ANA 1
  - platform: adc
    pin: GPIO36
    id: pression_filtre
    name: "${friendly_name}_Pression_filtre"
    unit_of_measurement: "Bars"
    update_interval: 60s
    attenuation: 11db
    filters:
      - calibrate_linear:
        - 0.58 -> 0.0
        - 0.82 -> 0.8
# moyenne sur 30 mn + affichage toutes les mn
      - sliding_window_moving_average:
          window_size: 30
          send_every: 1

# Entrée ANA2 GPIO34
  - platform: adc
    pin: GPIO34
    id: eana2
    name: "${friendly_name}_EANA2"
    unit_of_measurement: "Bars"
    update_interval: 60s
    attenuation: 11db

# Entrée ANA3 GPIO39
  - platform: adc
    pin: GPIO39
    id: eana3
    name: "${friendly_name}_EANA3"
    unit_of_measurement: "Bars"
    update_interval: 60s
    attenuation: 11db

# calcul temps injection
  - platform: template
    name: "${friendly_name}_tps_injection_ph_moins"
    id: _tps_injection_ph_moins
    unit_of_measurement: "s"
    state_class: "measurement"  

cover:
  - platform: template
    name: "${friendly_name}_volet_piscine"
#    lambda: |-
#      if (id(volet_ferme).state) {
#        return COVER_OPEN;
#      } else {
#        return COVER_CLOSED;
#      }
    open_action:
      - script.execute: script_ouv_volet
    close_action:
      - script.execute: script_ferm_volet
    stop_action:
      - script.execute: script_stop_volet
    optimistic: true

switch:
  - platform: gpio
    name: "${friendly_name} cde_pompe_filtration"
    pin: GPIO32
    id: cde_ppe_filtration
    on_turn_on:
      then:
        - delay: 10s
        - logger.log: "Set tempo cde ppe"
        - lambda: |-
            id(flag_tempo_ppe_filtre) = true;
    on_turn_off: 
      then:
        - logger.log: "Reset tempo cde ppe"
        - lambda: |-
            id(flag_tempo_ppe_filtre) = false;

  - platform: gpio
    name: "${friendly_name} cde_ppe_ph-"
    pin: GPIO33
    id: cde_ppe_ph_moins
    interlock: [cde_ppe_ph_plus]

  - platform: gpio
    name: "${friendly_name} cde_ppe_ph+"
    pin: GPIO25
    id: cde_ppe_ph_plus
    interlock: [cde_ppe_ph_moins]

  - platform: gpio
    name: "${friendly_name} cde_eclairage"
    pin: GPIO26
    id: cde_eclairage

  - platform: gpio
    name: "${friendly_name} cde_volet_ouverture"
    pin: GPIO27
    id: cde_volet_ouverture
    interlock: [cde_volet_fermeture]

  - platform: gpio
    name: "${friendly_name} cde_volet_fermeture"
    pin: GPIO14
    id: cde_volet_fermeture
    interlock: [cde_volet_ouverture]

  - platform: gpio
    name: "${friendly_name} cde_ev_eau"
    pin: GPIO12
    id: cde_ev_eau

  - platform: gpio
    name: "${friendly_name} relais8"
    pin: GPIO13
    id: relais8

  - platform: restart
    name: "${friendly_name} Restart"

# gestion afficheur
display:
  - platform: lcd_pcf8574
    dimensions: 16x2
    address: 0x27
    update_interval: 5s
    lambda: |-
      it.printf(0,0,"Ph=%.2f",id(ph_ezo).state);
      it.printf(8,0,"P=%.3f",id(pression_filtre).state);
#      it.printf(8,1,"T=%.1f",id(g_memoire_temp_eau);
#it.printf(15,1,"T=%.1s",id(mode_f).state);

interval:
  - interval: 90s
    then:
      - script.execute: _regul_ph
  - interval: 5s
    then:      
      - script.execute: Fonctionnement_filtration
  - interval: 5s
    then: 
      - script.execute: memorisation_temperature_eau
    

# Script
script:
  # Si la pompe tourne depuis au moins 5min on raffraichit la memoire de la temperature eau qui est
  # prise en compte dans les scripts.
  # sinon on travaille avec la témpérature mémorisée avant l'arret précédent
  
  - id: memorisation_temperature_eau
    then:
      - if:
          condition:
            lambda: 'return id(flag_tempo_ppe_filtre) == true;'
          then:
            - lambda: |-
                id(g_memoire_temp_eau)=id(temp_eau).state;            
            - logger.log:
                format: "Flag=1 / Valeur Temp Dallas: %.2f / Valeur Mem Temp: %.2f"
                args: [ 'id(temp_eau).state','id(g_memoire_temp_eau)' ]
          else:
            - lambda: |-
                id(g_memoire_temp_eau)=id(g_memoire_temp_eau);
            - logger.log:
                format: "Flag=0 / Valeur Temp Dallas: %.2f / Valeur Mem Temp: %.2f"
                args: [ 'id(temp_eau).state','id(g_memoire_temp_eau)' ]

# Calcul de la durée de la filtration
  - id: Fonctionnement_filtration
    then:
      - if:
          condition:
            - lambda: 'return id(_Mode_Fonctionnement_filtration).state == "At_f";'
          then:
            - switch.turn_off: cde_ppe_filtration
            - logger.log: "arret_forcé_ppe_filtration"
      - if:
          condition:
            - lambda: 'return id(_Mode_Fonctionnement_filtration).state == "Ma_f";'
          then:
            - switch.turn_on: cde_ppe_filtration
            - logger.log: "Marche_forcée_ppe_filtration"
      - if:
          condition:
            - lambda: 'return id(_Mode_Fonctionnement_filtration).state == "Palier";'
          then:
            - lambda: |-
                if (id(g_memoire_temp_eau)<id(g_temp_palier1)){
                  id(g_tps_filtration)=id(g_tps_palier1);
                } else {
                  if (id(g_memoire_temp_eau)>=id(g_temp_palier1) && (id(g_memoire_temp_eau)<id(g_temp_palier2))){
                    id(g_tps_filtration)=id(g_tps_palier2);
                  } else {
                    if (id(g_memoire_temp_eau)>=id(g_temp_palier2) && (id(g_memoire_temp_eau)<id(g_temp_palier3))){
                    id(g_tps_filtration)=id(g_tps_palier3);
                    } else {
                      if (id(g_memoire_temp_eau)>=id(g_temp_palier3) && (id(g_memoire_temp_eau)<id(g_temp_palier4))){
                      id(g_tps_filtration)=id(g_tps_palier4);
                      } else {
                        id(g_tps_filtration)=id(g_tps_palier5);
                      }
                    }
                  }
                }
            - logger.log:
                format: "Mode: Palier / Valeur Mem Temp: %.2f / Tps Filtrat: %2f"
                args: [ 'id(g_memoire_temp_eau)','id(g_tps_filtration)' ]
            - script.execute: calcul_hdebut_hfin

      - if:
          condition:
            - lambda: 'return id(_Mode_Fonctionnement_filtration).state == "Classique";'
          then:
            - lambda: |-
                id(g_tps_filtration)=id(g_memoire_temp_eau)/2;
                id(g_tps_filtration)=min(id(g_temps_max_filtration),id(g_tps_filtration));
                id(g_tps_filtration)=max(id(g_temps_min_filtration),id(g_tps_filtration));
            - logger.log:
                format: "Mode Classique / Valeur Mem Temp: %.2f / Tps Filtrat: %2f"
                args: [ 'id(g_memoire_temp_eau)','id(g_tps_filtration)' ] 

      - if:
          condition:
            - lambda: 'return id(_Mode_Fonctionnement_filtration).state == "Abaque";'
          then:
            - lambda: |-
                  id(g_tps_filtration)=id(g_abaque_a)*pow(id(g_memoire_temp_eau),3)+id(g_abaque_b)*pow(id(g_memoire_temp_eau),2)+id(g_abaque_c)*id(g_memoire_temp_eau)+id(g_abaque_d);
                  id(g_tps_filtration)=min(id(g_temps_max_filtration),id(g_tps_filtration));
                  id(g_tps_filtration)=max(id(g_temps_min_filtration),id(g_tps_filtration));
            - logger.log:
                format: "Mode Abaque / Valeur Mem Temp: %.2f / Tps Filtrat: %2f"
                args: [ 'id(g_memoire_temp_eau)','id(g_tps_filtration)' ]

#                 id(g_tps_filtration)=id(g_abaque_a)*pow(id(g_memoire_temp_eau),3)+id(g_abaque_b)*pow(id(g_memoire_temp_eau),2)+id(g_abaque_c)*id(g_memoire_temp_eau)+id(g_abaque_d)*id(g_memoire_temp_eau);                
#id(g_tps_filtration)=min(id(g_temps_max_filtration),(id(g_abaque_a)*pow(id(g_memoire_temp_eau),3)+id(g_abaque_b)*pow(id(g_memoire_temp_eau),2)+id(g_abaque_c)*id(g_memoire_temp_eau)+id(g_abaque_d)*id(g_memoire_temp_eau)));
#        duree_m = (
#               self.abaque_a * temperature_min ** 3
#                + self.abaque_b * temperature_min ** 2
#                + self.abaque_c * temperature_min
#                + self.abaque_d
#        )        
#  y = (0.00335 * temperature^3) + (-0.14953 * temperature^2) + (2.43489 * temperature) -10.72859

#  - id: _calcul_heure_debut_fin_filtration
#    then:
#      - if:
#          condition:
#            lambda: 'return (id(sntp).now() >= '07:00') && (id(sntp).now().hour < '23:00';'
#          then:
#            - switch.turn_on: relais8
#      - if:
#          condition:
#            lambda: 'return (id(sntp).now().hour >= '23:00') || (id(sntp).now().hour < '07:00');'
#          then:
#            - switch.turn_off: relais8
# https://www.reddit.com/r/Esphome/comments/13o56md/loggerlog_what_am_i_doing_wrong/?tl=fr

# regulation pH
#    {% set a=states('sensor.ph_stat_median') | float(default=0) %} {% set
#    x=states('input_number.simul_ph') | float(default=0) %} {% set
#    b=states('input_number.ph_cible') | float(default=0) %} {% set
#    d=states('input_number.ph_debit_ppe') | float(default=0) %} {% set
#    e=states('input_number.ph_concentration') | float(default=0) %} {% set
#"    r=(((a-b)/(e/100))/d)*3600|round(2)|int(default=0) %} {% if r < 0 %} {{ 0 }}
#    {% else %} {{ (r%60)|int(default=0) }} {% endif %}
#          id(g_tps_injection_ph_moins)=(((id(ph_ezo).state-id(_ph_cible).state)/id(_taux_concentration_ph_moins).state/100)/id(_debit_ppe_moins).state)*3600;

# Convertir la valeur décimale en secondes
#seconds: {{ decimal_value * 3600 | int }}

# Extraire les parties entières pour les heures, les minutes et les secondes
#hours: {{ seconds // 3600 }}
#"minutes: {{ (seconds % 3600) // 60 }}
#seconds: {{ seconds % 60 }}

# Définir la variable datetime.time.set
#datetime.time.set:
#  hours: {{ hours }}
#  minutes: {{ minutes }}
#  seconds: {{ seconds }}


  - id: calcul_hdebut_hfin
    mode: single
    then:
      - lambda: |-
          static int ts = 0;
          static int hh = 0;
          static int mm = 0;
          static int ss = 0;
          
          ts=id(g_tps_filtration)*3600;
          hh= ts / 3600;
          mm= (ts-hh)// 60;
          ss= mm-(mm//60);
          id(g_hh)=hh;
          id(g_mm)=mm;
          id(g_ss)=ss;
      - logger.log:
          format: "hh: %2d - mm: %.2d / ss: %2d"
          args: [ 'id(g_hh)', 'id(g_mm)', 'id(g_ss)' ]
          

      - datetime.time.set:
          id: heure_pivot
          time: !lambda |-
            return {second: id(g_ss), minute: id(g_mm), hour: id(g_hh)};

      - logger.log:
          format: "HPivot H: %2d / M: %.2d / Tps Filtrat: %2d"
          args: [ 'id(heure_pivot).hour', 'id(heure_pivot).minute', 'id(heure_pivot).second' ]

      - switch.turn_on: cde_ppe_filtration          

#      - ESP_LOGI("main", "Value of my datetime: %04d-%02d-%02d", id(heure_pivot).hour, id(heure_pivot).minute, id(heure_pivot).seconde);
#      - datetime.time.set:
#          id: h_duree
#          time: !lambda |-
#            // Return an ESPTime struct
#            return {.second: 56, .minute: 34, .hour: id(g_tps_filtration)};
#      - lambda: |-
#          id(h_debut).state_as_esptime()=id(heure_pivot).state_as_esptime()-id(h_duree).state_as_esptime();
#          id(h_fin).state_as_esptime()=id(heure_pivot).state_as_esptime()+id(h_duree).state_as_esptime();



  - id: _regul_ph
    mode: single  
    then:
      - lambda: |-
          id(g_tps_injection_ph_moins)=(((id(simule_ph).state-id(_ph_cible).state)/(id(_taux_concentration_ph_moins).state/100)/id(_debit_ppe_moins).state))*3600;
          id(_tps_injection_ph_moins).publish_state(id(g_tps_injection_ph_moins));
      
      - logger.log:
          format: "Log tps injection: %f"
          args: [ 'id(g_tps_injection_ph_moins)' ]
          level: "info"

      - if:
          condition:
            and:
              - lambda: 'return id(_Mode_Fonctionnement_regul_ph).state == "Auto";'
              - lambda: 'return id(simule_ph).state > id( _ph_cible).state;'
              - lambda: 'return id(simule_ph).state > 0;'
              - switch.is_on: cde_ppe_filtration
          then:
            - switch.turn_on: cde_ppe_ph_moins
            - delay: !lambda "return id(g_tps_injection_ph_moins)*1000;"
            - switch.turn_off: cde_ppe_ph_moins

      - if:
          condition:
            and:
              - lambda: 'return id(_Mode_Fonctionnement_regul_ph).state == "Ma_f";'
              - switch.is_on: cde_ppe_filtration
          then:
            - switch.turn_on: cde_ppe_ph_moins

      - if:
          condition:
            and:
              - lambda: 'return id(_Mode_Fonctionnement_regul_ph).state == "At_f";'
          then:
            - switch.turn_off: cde_ppe_ph_moins


# Scripts Commande Volet
  - id: script_ouv_volet
    then:
      - switch.turn_off: cde_volet_fermeture
      - delay: 2s
      - switch.turn_on: cde_volet_ouverture
      - delay: 5s
      - switch.turn_off: cde_volet_ouverture
          
  - id: script_ferm_volet
    then:
      - switch.turn_off: cde_volet_ouverture
      - delay: 2s
      - switch.turn_on: cde_volet_fermeture
      - switch.turn_on: cde_eclairage
      - delay: 90s
      - switch.turn_off: cde_volet_fermeture
      - switch.turn_off: cde_eclairage
                    
  - id: script_stop_volet
    then:
      - switch.turn_off: cde_volet_ouverture
      - switch.turn_off: cde_volet_fermeture
      - delay: 2s
      - switch.turn_on: cde_volet_fermeture
      - delay: 2s
      - switch.turn_off: cde_volet_fermeture
      - switch.turn_off: cde_eclairage
                    