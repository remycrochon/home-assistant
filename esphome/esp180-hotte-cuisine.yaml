substitutions:
  device_name: esp180-hotte-aspirante
  adress_ip: "192.168.0.180"
  friendly_name: esp180
  time_timezone: "Europe/Paris"
  
esphome:
  name: ${device_name}
  platform: ESP32
#  board: esp32dev
  board: mhetesp32minikit

#  on_boot:
#    priority: 800
#    then: 
#      - script.execute: calcul_vitesse    
    
wifi:
  networks:
    - ssid: !secret wifi
      password: !secret mdpwifi
      
  reboot_timeout: 1min

  manual_ip:
    static_ip: ${adress_ip}
    gateway: 192.168.0.254
    subnet: 255.255.255.0

# Enable logging
logger:
  baud_rate: 0
  level: debug
#  logs:
#    light.component: very_verbose
# Enable Home Assistant API
api:

ota:
  platform: esphome

web_server:
  port: 80

# Input Number
number:
  # Seuil humidité v1->v2
  - platform: template
    name: "${friendly_name} Seuil_V2 Hum"
    id: seuilv2_hum
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 100
    initial_value: 55
    unit_of_measurement: "%"
    step: 1

  # Seuil humidité v2->v3
  - platform: template
    name: "${friendly_name} Seuil_V3 Hum"
    id: seuilv3_hum
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 100
    initial_value: 80
    unit_of_measurement: "%"
    step: 1

binary_sensor:
#Etat de la connection
  - platform: status
    name: "${friendly_name}_Status"

sensor:
  - platform: homeassistant
    entity_id: "sensor.temperature_hotte_zb"
    id: temp_hotte

  - platform: homeassistant
    entity_id: "sensor.humidite_hotte_zb"
    id: hum_hotte
    on_value:
      then:
        - script.execute: calcul_vitesse

switch:
  - platform: template
    name: "${friendly_name} Hotte"    
    id: hotte
    optimistic: true
    turn_on_action:
      - switch.turn_on: v1
      - delay: 500ms
      - switch.turn_on: r1

    turn_off_action:
      - switch.turn_off: v1
      - switch.turn_off: v2
      - switch.turn_off: v3  
      - delay: 500ms
      - switch.turn_off: r1


  - platform: template
    name: "${friendly_name} Hotte V1"    
    id: v1
    optimistic: true
    turn_on_action:
      - switch.turn_off: v2
      - switch.turn_off: v3
      - delay: 500 ms
      - switch.turn_on: r3
    turn_off_action:
      - switch.turn_off: r3

  - platform: template
    name: "${friendly_name} Hotte V2"    
    id: v2
    optimistic: true
    turn_on_action:
      - switch.turn_off: v1
      - switch.turn_off: v3      
      - delay: 500 ms      
      - switch.turn_on: r2
    turn_off_action:
      - switch.turn_off: r2
               
  - platform: template
    name: "${friendly_name} Hotte V3"    
    id: v3
    optimistic: true
    turn_on_action:
      - switch.turn_off: v1
      - switch.turn_off: v2
      - delay: 500 ms      
      - switch.turn_on: r3
      - delay: 200ms
      - switch.turn_on: r4

    turn_off_action:
      - switch.turn_off: r3
      - delay: 250ms
      - switch.turn_off: r4

  - platform: restart
    name: "${friendly_name} Restart"

  - platform: gpio
    name: "${friendly_name} Hotte Lumiere"
    pin: GPIO25 
    id: r1

  - platform: gpio
    name: "${friendly_name} R2"
    pin: GPIO22
    id: r2

  - platform: gpio
    name: "${friendly_name} R3"
    pin: GPIO26
    id: r3

  - platform: gpio
    name: "${friendly_name} R4"
    pin: GPIO21
    id: r4


script:
  # Calcul vitesse aspiration
  - id: calcul_vitesse
    mode: single
    then:

      # Si Hotte en marche
      # Si Humidité hotte < seuil v2 depuis 2 mn alors on enclenche V1
      - if:
          condition:
            for:
              time: 30s
              condition:
                - switch.is_on: hotte
                - lambda: 'return id(hum_hotte).state < id(seuilv2_hum).state;'
          then:
            - switch.turn_on: v1
            - delay: 1500ms
            - switch.turn_on: r1
      
      # Si Hotte en marche
      # Si (humidité hotte > au seuil V1 et < seuil v2) depuis 2 mn alors on enclenche V2
      - if:
          condition:
            for:
              time: 30s
              condition:            
                - switch.is_on: hotte
                - lambda: 'return id(hum_hotte).state > id(seuilv2_hum).state;'
                - lambda: 'return id(hum_hotte).state < id(seuilv3_hum).state;'
          then:
            - switch.turn_on: v2
            - delay: 1500ms
            - switch.turn_on: r1
      
      # Si Hotte en marche
      # Si Humidité hotte > au seuil V3 depuis 2 mn alors on enclenche V3 pendant 2mn    
      - if:
          condition:
            for:
              time: 30s
              condition:            
              - switch.is_on: hotte
              - lambda: 'return id(hum_hotte).state > id(seuilv3_hum).state;'
          then:
            - switch.turn_on: v3
            - delay: 1500ms            
            - switch.turn_on: r1

