globals:
    # flag marche Hors gel activé
    - id: g_flag_hg
      type: bool
      restore_value: yes

select:
  # défini l'activation du mode Hors Gel
  - platform: template
    name: "Mode_Hors_Gel"
    optimistic: true
    restore_value: true
    options:
      - Desactivé
      - Activé
    id: _Mode_Fonctionnement_hg
    on_value: 
      then:
        - logger.log:
            format: "Mode Fonct Hors Gel --> %s"
            args: [ 'id(_Mode_Fonctionnement_hg).state.c_str()' ]
            level: INFO
number:
  # Seuil 1 Temp Hors gel
  - platform: template
    name: "Seuil1_Temp_HG"
    id: s1_temp_hg
    optimistic: true
    restore_value: true
    mode: box
    min_value: -5
    max_value: 0
    device_class: temperature
    step: 0.1

  # Seuil 2 Temp Hors gel
  - platform: template
    name: "Seuil2_Temp_HG"
    id: s2_temp_hg
    optimistic: true
    restore_value: true
    mode: box
    min_value: -10
    max_value: 0
    device_class: temperature
    step: 0.1

sensor:
  - platform: homeassistant
    name: "temperature_exterieure"
    entity_id: "sensor.vp2_temp_out"
    id: temp_ext

interval:
  - interval: 900s # Test HG toutes les 15 mn (900s)
    then: 
      - script.execute: _fonction_hors_gel

script: 
# Fonctionnement Hors Gel
# Si temp extérieure inferieur à seuil1 et supérieur à seuil2 alors Ma pompe Filtration pendant 15 mn
# Si temp extérieure inferieur à seuil2 alors Ma pompe Filtration pendant 30 mn
  - id: _fonction_hors_gel
    then:
      # Reset flag HG si temp >S1
      - if:
          condition:
            and:
              - lambda: 'return id(_Mode_Fonctionnement_hg).state == "Activé";'
              - lambda: 'return id(temp_ext).state > id(s1_temp_hg).state;'
          then:
            - lambda: |-
                id(g_flag_hg) = false;
            - logger.log: 
                format: "Reset Flag HG"
                level: INFO
       
      # Activation si S1 >temp >S2
      - if:
          condition:
            and:
              - lambda: 'return id(_Mode_Fonctionnement_hg).state == "Activé";'
              - lambda: 'return id(temp_ext).state < id(s1_temp_hg).state;'
              - lambda: 'return id(temp_ext).state > id(s2_temp_hg).state;'
              - lambda: 'return id(g_flag_hg) == false;'
          then:
            - lambda: |-
                id(g_flag_hg) = true;
            - logger.log: 
                format: "Set Flag HG Seuil1"
                level: INFO
            - lambda: |-                
                std::string mess = "ESP178 Debut Marche HG Seuil1\n";
                mess += "Temp Ext: " + std::to_string(id(temp_ext).state) + "\n";
                mess += "Seuil1: "   + std::to_string(id(s1_temp_hg).state) + "\n";
                id(_message_telegram)->execute(mess);                 
            - delay: 900s  #900s
            - lambda: |-
                id(g_flag_hg) = false;
            - logger.log: 
                format: "Reset Flag HG Seuil1"
                level: INFO     
            - lambda: |-                
                std::string mess= "ESP178 Fin Marche HG Seuil1";
                mess += "Temp Ext: "+ std::to_string(id(temp_ext).state)+"\n";
                mess += "Seuil1: "+ std::to_string(id(s1_temp_hg).state)+"\n";
                id(_message_telegram)->execute(mess.c_str());                               
      # Activation si temp > S2
      - if:
          condition:
            and:
              - lambda: 'return id(_Mode_Fonctionnement_hg).state == "Activé";'
              - lambda: 'return id(temp_ext).state < id(s1_temp_hg).state;'
              - lambda: 'return id(temp_ext).state < id(s2_temp_hg).state;'
              - lambda: 'return id(g_flag_hg) == false;'
          then:
            - lambda: |-
                id(g_flag_hg) = true;
            - logger.log: 
                format: "Set Flag HG Seuil2"
                level: INFO
            - lambda: |-                
                std::string mess= "ESP178 Debut Marche HG Seuil2";
                mess += "Temp Ext: "+ std::to_string(id(temp_ext).state)+"\n";
                mess += "Seuil2: "+ std::to_string(id(s2_temp_hg).state)+"\n";
                id(_message_telegram)->execute(mess.c_str());                   
            - delay: 1800s  #1800s
            - lambda: |-
                id(g_flag_hg) = false;
            - logger.log: 
                format: "Reset Flag HG Seuil2"
                level: INFO      
            - lambda: |-                
                std::string mess= "ESP178 Fin Marche HG Seuil2";
                mess += "Temp Ext: "+ std::to_string(id(temp_ext).state)+"\n";
                mess += "Seuil2: "+ std::to_string(id(s2_temp_hg).state)+"\n";
                id(_message_telegram)->execute(mess.c_str());   

