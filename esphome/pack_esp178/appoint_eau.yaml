time:
  - platform: sntp
    timezone: Europe/Paris
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org

    on_time:
      # reset le compteur de temps à minuit
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - sensor.duty_time.reset: _temps_fonctionnement_ev_eau
globals:
  - id: ev_eau_on_start_time
    type: uint32_t
    restore_value: no
    initial_value: '0'
  - id: volet_ferme_off_time
    type: uint32_t
    restore_value: no
    initial_value: '0'


select:
  - platform: template
    name: "Mode_Fonct_appoint_eau"
    optimistic: true
    restore_value: true
    options:
      - Auto
      - Ma_f
      - At_f
    id: _Mode_Fonctionnement_regul_eau
    on_value: 
      then:
        - logger.log:
            format: "Mode Fonct Regul Eau --> %s"
            args: [ 'id(_Mode_Fonctionnement_regul_eau).state.c_str()' ]
            level: INFO        
        - script.stop: _regul_eau
        - delay: 1s            
        - script.execute: _regul_eau

button:
  # Lance un Appoint d'Eau
  - platform: template
    name: "BP_Appoint Eau"
    on_press:
      - script.execute: _regul_eau

binary_sensor: 
  # calcul des niveaux piscine
  # Si LSL ou LSH recouvert alors True sinon False
  - platform: template
    name: "niv_haut"
    id: niv_haut
    on_state:
      then:
        - if:
            condition:
              and:
                - binary_sensor.is_on: niv_haut
                - lambda: 'return id(_Mode_Fonctionnement_regul_eau).state == "Auto";'
            then:
              - logger.log:
                  format: "Fermeture vanne eau : Niveau haut atteint en mode Auto"
                  level: INFO
              - switch.turn_off: cde_ev_eau
              - script.stop: _regul_eau
      
  - platform: template
    name: "niv_inter"
    id: niv_inter

  - platform: template
    name: "niv_bas"
    id: niv_bas

  - platform: template
    name: "niv_defaut"
    id: niv_defaut

  # GPIO sur module extension SX1509
  # Niveau haut à 1 si decouvert
  - platform: gpio
    name: "tp_plein_lsh"
    id: lsh
    pin:
      sx1509: sx1509_hub1
      number: 1
      mode:
        input: true
        pullup: false
      inverted: true
    filters:
      - delayed_on_off: 5s
    on_press:
      then:
        - script.stop: _regul_eau
        - switch.turn_off: cde_ev_eau


  # Niveau bas à 1 si decouvert
  - platform: gpio
    name: "tp_plein_lsl"
    id: lsl
    pin:
      sx1509: sx1509_hub1
      number: 2
      mode:
        input: true
        pullup: false
      inverted: true
    filters:
      - delayed_on_off: 5s

sensor:
  # EV Eau
  - platform: duty_time
    id: _temps_fonctionnement_ev_eau
    name: 'temps_ma_ev_eau'
    lambda: "return id(cde_ev_eau).state == true;"
    restore: true
    filters: 
      - round: 0

switch:
  - platform: gpio
    name: "cde_ev_eau"
    pin: ${GPIO_rel_ev_eau}
    id: cde_ev_eau
    on_turn_on:
      - lambda: |-
          id(ev_eau_on_start_time) = millis() / 1000;
          ESP_LOGI("EV_EAU", "Vanne ouverte, temps initialisé à %u secondes", id(ev_eau_on_start_time));
    on_turn_off:
      - lambda: |-
          id(ev_eau_on_start_time) = 0;
          ESP_LOGI("EV_EAU", "Vanne fermée, temps réinitialisé");

interval:
  - interval: 60s
    then:      
      - script.execute: _calcul_niveau_eau
  - interval: 60s
    then:
      - lambda: |-
          // Reset le compteur à 00:00:00      
          auto now = id(sntp_time).now();
          if (now.hour == 0 && now.minute == 0 && now.second == 0) {
            id(_temps_fonctionnement_ev_eau).reset();            
          }
  ## Sécurisation de l'ouverture EV EAU si > à 1heure                  
  - interval: 60s
    then:
      - lambda: |-
          if (id(cde_ev_eau).state) {
            if (id(ev_eau_on_start_time) == 0) {
              ESP_LOGI("SECURITE", "Temps de démarrage de la vanne non initialisé !");
              return;
            }
            uint32_t now = millis() / 1000;
            uint32_t duration = now - id(ev_eau_on_start_time);
            if (duration > 3600) {  // 3600 secondes = 1h
              ESP_LOGI("SECURITE", "Vanne EV eau ouverte depuis plus de 1h, fermeture forcée.");
              id(cde_ev_eau).turn_off();
              id(_regul_eau).stop();
              std::string mess = "ESP178 Defaut->Vanne Eau ouverte depuis " +
                                std::to_string(duration / 3600) + "h " +
                                std::to_string((duration % 3600) / 60) + "min " +
                                std::to_string(duration % 60) + "s";
              id(_message_telegram_v2)->execute(mess, duration);
            }
          }          

script:
  # Regulation du niveau d'eau piscine
  # Déclenché par BP Appoint Eau 
  # ou 240s après ouverture volet
  - id: _regul_eau
    mode: single
    then:
      - if:
          condition:
            lambda: 'return id(_Mode_Fonctionnement_regul_eau).state == "Auto";'
          then:
            - if:
                condition:
                  and:
                    - binary_sensor.is_off: niv_defaut
                    - binary_sensor.is_on: volet_ouvert
                    - or:
                        - binary_sensor.is_on: niv_bas
                        - binary_sensor.is_on: niv_inter
                then:
                  - lambda: |-
                      uint32_t now = millis() / 1000;
                      if (id(volet_ferme_off_time) != 0 && (now - id(volet_ferme_off_time)) >= 240) {
                        if (!id(cde_ev_eau).state) {
                          ESP_LOGI("EV_EAU", "Ouverture vanne eau Mode Auto après temporisation de 240s");
                          id(cde_ev_eau).turn_on();
                        }
                      }
                else:
                  - logger.log:
                      format: "Conditions non remplies pour ouverture vanne eau Mode Auto"
                      level: INFO
                  - switch.turn_off: cde_ev_eau

      - if:
          condition:
            and:
              - lambda: 'return id(_Mode_Fonctionnement_regul_eau).state == "Ma_f";'
          then: 
            - logger.log: 
                format: "Ouverture vanne eau Mode Ma Forçé"
                level: DEBUG
            - switch.turn_on: cde_ev_eau

      - if:
          condition:
            or:
              - lambda: 'return id(_Mode_Fonctionnement_regul_eau).state == "At_f";'
          then:
            - logger.log: 
                format: "Fermeture vanne eau Mode At Forçé"
                level: DEBUG
            - switch.turn_off: cde_ev_eau

  # Calcul des niveaux d'eau en fonction des sondes de niveaux
  # si niveau haut et niveau bas => niveau haut
  - id: _calcul_niveau_eau
    then:
      - lambda: |-
          bool lsh_on = id(lsh).state;
          bool lsl_on = id(lsl).state;

          // Niveau haut : les deux sondes actives
          id(niv_haut).publish_state(lsh_on && lsl_on);

          // Niveau intermédiaire : seule la sonde basse active
          id(niv_inter).publish_state(!lsh_on && lsl_on);

          // Niveau bas : aucune sonde active
          id(niv_bas).publish_state(!lsh_on && !lsl_on);

          // Défaut : sonde haute active, sonde basse inactive
          id(niv_defaut).publish_state(lsh_on && !lsl_on);