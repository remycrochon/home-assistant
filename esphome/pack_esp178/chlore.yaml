time:
  - platform: sntp
    id: sntp_time1  
    timezone: Europe/Paris
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org
    on_time:
      # Déclenchement du script Injection Clhore liquide 
      - seconds: 0
        minutes: 00
        hours: 10
        then:
          - script.execute: _regul_chlore
      # reset le compteur de temps à minuit
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - sensor.duty_time.reset: _temps_fonctionnement_ppe_chlore
      # Notification du rapport journalier sur Telegram
      - seconds: 10
        minutes: 59
        hours: 23
        then:
          - lambda: |-
              std::string mess = "ESP178 Rapport Journalier Chlore\n";

              CONVERT_SECONDS(id(_temps_fonctionnement_ppe_chlore).state, id(g_hh), id(g_mm), id(g_ss));
              char buf1[32];
              snprintf(buf1, sizeof(buf1), "Tps Ppe Chlore: %02d:%02d:%02d\n", id(g_hh), id(g_mm), id(g_ss));
              mess += buf1;

              id(_message_telegram)->execute(mess);

globals:
    # temps d'injection chlore
    - id: g_tps_injection_chlore
      type: float
      restore_value: no
      initial_value: '0'

select:
  - platform: template
    name: "${friendly_name}_Mode_Fonct_regul_chlore"
    optimistic: true
    restore_value: true
    options:
      - Auto
      - Ma_f
      - At_f
    id: _Mode_Fonctionnement_regul_chlore
    on_value: 
      then:
        - logger.log:
            format: "Mode Fonct Regul chlore --> %s"
            args: [ 'id(_Mode_Fonctionnement_regul_chlore).state.c_str()' ]
            level: INFO 
        - if:
            condition:
              or:
                - lambda: 'return id(_Mode_Fonctionnement_regul_chlore).state == "Ma_f";'
                - lambda: 'return id(_Mode_Fonctionnement_regul_chlore).state == "At_f";'   
            then:                
              - script.stop: _regul_chlore
              - delay: 1s            
              - script.execute: _regul_chlore
button:
  - platform: template
    name: "${friendly_name}_BP_Cycle_Regul_chlore"
    on_press:
      - script.execute: _regul_chlore
  - platform: template
    name: "${friendly_name}_BP_RAZ_Tps_Galet_Chlore"
    on_press:
      - sensor.duty_time.reset: _temps_galet_chlore

binary_sensor:
  # Etat galets Chlore
  # Si Tps > à temps max alors = True
  - platform: template
    name: "${friendly_name}_Etat_Galets_Chlore"
    id: _etat_galets_chlore

datetime:
  - platform: template
    id: duree_injection_chlore
    type: time
    name: "${friendly_name}_duree_injection_chlore"
    optimistic: yes
    restore_value: true

number:
  # Cible Niveau Chlore
  - platform: template
    name: "${friendly_name}_chlore_Cible"
    id: _chlore_cible
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 10
    unit_of_measurement: "ppm"
    step: 0.01

  # Tps Max Galet Chlore
  - platform: template
    name: "${friendly_name}_tps_Max_galet_Chlore"
    id: _tps_max_galet_chlore
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 100
    unit_of_measurement: "h"
    step: 1

  # Debit Pompe chlore
  # Etalonnage du 17/05/2025: 4.957 l/h
  - platform: template
    name: "${friendly_name}_debit_ppe_chlore"
    id: _debit_ppe_chlore
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0.5
    max_value: 7.2
    unit_of_measurement: "l/h"
    step: 0.001

sensor:
  # Mesure de l'ORP
  # Procédure étalonnage:
    # Mettre 1 s dans "update interval"
    # Mettre accuracy_decimals: 3
    # Decommenter le log
    # Commenter les 3 lignes calibrate_linear
    # Décommenter le LOGI du "on_value"  
    # ainsi on moyenne sur 15 s avec un affichage toutes les 5s 
    # 1-Faire une mesure avec solution étalon de 256mV
    # 2-Attendre 2 à 3 minutes que ca se stabilise
    # 3-relever la valeur de ORP
    # Décommenter les 3 lignes calibrate_linear    
    # Remettre 60 s dans "update interval"
    # Mettre accuracy_decimals: 2
    # Commenter le LOGI du "on_value"  
    # Compiler
  # Fin procédure étalonnage    
  - platform: ezo
    id: orp_ezo
    name: "${friendly_name}_orp_ezo"
    address: 98
    unit_of_measurement: "mV"
    accuracy_decimals: 2
    device_class: voltage
    state_class: measurement
    update_interval: 60s    
    # Filtrage en option (décommenter si besoin)
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 1
          send_first_at: 1
      - calibrate_linear:
          - 0 -> 0
          - 256 -> 256
    on_value:
      then:
        - lambda: |-
            //ESP_LOGI("ORP_ezo", "Mesure ORP (étalonnage): %.2f", id(orp_ezo).state);


  # mémorise le temps d'injection calculé
  - platform: template
    name: "${friendly_name}_tps_injection_chlore"
    id: _tps_injection_chlore
    unit_of_measurement: "s"
    state_class: "measurement"

  - platform: duty_time
    id: _temps_galet_chlore
    name: '${friendly_name}_temps_galet_chlore'
    sensor: ppe_filt_en_fonctionnement
    restore: true
    filters: 
      - round: 0
    
  # Ppe Chlore
  - platform: duty_time
    id: _temps_fonctionnement_ppe_chlore
    name: '${friendly_name}_temps_ma_ppe_chlore'
    lambda: "return id(cde_ppe_chlore).state == true;"
    restore: true
    filters: 
      - round: 0

text_sensor:
  - platform: template
    name: "${friendly_name}_ORP_mode"
    id: orp_mode

switch: 
  - platform: gpio
    name: "${friendly_name} cde_ppe_chlore"
    pin: GPIO25
    id: cde_ppe_chlore

interval: 
  - interval: 1h # Test temps usage Galets Chlore
    then: 
      - script.execute: _fonction_galet_chlore

script: 
  # Injection chlore liquide
  # Calcul du temps d'injection
  - id: _regul_chlore
    mode: single
    then:
      - logger.log:
          format: "Script Injection Chlore"
          level: INFO      
      - if:
          condition:
            and:
              - switch.is_on: cde_ppe_filtration  
              - lambda: 'return id(_Mode_Fonctionnement_regul_chlore).state == "Auto";'        
          then:
            - lambda: |-
                static float nb = 0;
                static float mp = 96.0f;  // Concentration de chlore actif en g/L (9.6%)
                static float vb = 50000.0f;  // Volume de la piscine en L
                static float de = 0;
                static float q = 0;
                nb = id(_chlore_cible).state;  // Concentration cible en mg/L
                de = id(_debit_ppe_chlore).state;  // Débit en L/h
                q = (nb * vb) / (mp * 1000.0f);  // Quantité en L
                if (de > 0) {
                  id(g_tps_injection_chlore) = std::min((q / de) * 3600.0f, 3600.0f);  // Temps en secondes, limité à 1 heure
                } else {
                  id(g_tps_injection_chlore) = 0;
                }
                id(_tps_injection_chlore).publish_state(id(g_tps_injection_chlore));
                ESP_LOGI("Dosage Chlore", "Quantité: %.2f L, Temps: %.2f s", q, id(g_tps_injection_chlore));
          else:
            - lambda: |-
                id(g_tps_injection_chlore)=0;
                id(_tps_injection_chlore).publish_state(0);
            # Convertion et affichage de la durée d'injection pH en hh:mm
      - lambda: |-    
          CONVERT_SECONDS(id(g_tps_injection_chlore), id(g_hh), id(g_mm), id(g_ss));          
      - datetime.time.set:
          id: duree_injection_chlore
          time: !lambda |-
            return {second: static_cast<uint8_t>(id(g_ss)), minute: static_cast<uint8_t>(id(g_mm)), hour: static_cast<uint8_t>(id(g_hh))};
          
      - if:
          condition:
            - lambda: 'return id(_Mode_Fonctionnement_regul_chlore).state == "Auto";'
          then:
            - if:
                condition:
                  and:
                    - lambda: 'return id(_tps_injection_chlore).state > 0;'
                    - switch.is_on: cde_ppe_filtration
                then:
                  - switch.turn_on: cde_ppe_chlore
                  - logger.log: 
                      format: "Marche ppe Ph Chlore en Auto"
                      level: INFO
                  - lambda: |-
                      // Affichage du temps d'injection Ppe Chlore
                      std::string mess = "ESP178 Temps inj Chlore";
                      id(_message_telegram_v2)->execute(mess,id(g_tps_injection_chlore));

                  - delay: !lambda "return id(g_tps_injection_chlore)*1000;"
                  - switch.turn_off: cde_ppe_chlore
                  - logger.log: 
                      format: "Arret ppe chlore en Auto"
                      level: INFO
                  - lambda: |-
                      std::string mess = "Fin Injection Chlore en Auto";                                         
                      id(_message_telegram)->execute(mess.c_str());                      
                else:
                  - switch.turn_off: cde_ppe_chlore
                  - lambda: |-
                      id(_tps_injection_chlore).publish_state(0);
                  - logger.log: 
                      format: "Arret ppe chlore en Auto"
                      level: INFO

      - if:
          condition:
            and:
              - lambda: 'return id(_Mode_Fonctionnement_regul_chlore).state == "Ma_f";'
              - switch.is_on: cde_ppe_filtration
          then:
            - switch.turn_on: cde_ppe_chlore
            - logger.log: 
                format: "Marche Forcée ppe Chlore"
                level: INFO
      - if:
          condition:
            or:
              - lambda: 'return id(_Mode_Fonctionnement_regul_chlore).state == "At_f";'
              - switch.is_off: cde_ppe_filtration
          then:
            - switch.turn_off: cde_ppe_chlore
            - logger.log: 
                format: "Arret Forcé ppe Chlore"
                level: INFO

  # Surveille temps utilisation galets Chlore en heure
  - id: _fonction_galet_chlore
    then:
      - if:
          condition:
            and:
              - lambda: 'return (id(_temps_galet_chlore).state/3600) >= id(_tps_max_galet_chlore).state;'
          then:
            - lambda: 
                id(_etat_galets_chlore).publish_state(true);
            - logger.log: 
                format: "Galet Chlore Dépassé"
                level: INFO  
            - lambda: |-                
                std::string mess = "ESP178 Tps Utilisation Galets Chlore Atteint";
                id(_message_telegram)->execute(mess);

          else:
            - lambda: 
                id(_etat_galets_chlore).publish_state(false);