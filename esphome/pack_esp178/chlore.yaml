time:
  - platform: sntp
    id: sntp_time1  
    timezone: Europe/Paris
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org
    on_time:
      # Déclenchement du script Injection Clhore liquide 
      - seconds: 0
        minutes: 00
        hours: 16
        then:
          - script.execute: _regul_chlore
      # reset le compteur de temps à minuit
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - sensor.duty_time.reset: _temps_fonctionnement_ppe_chlore
          - lambda: |-
              id(g_conso_chl_jour) = 0.0;
              id(conso_chl_jour).publish_state(0.0);

      # Notification du rapport journalier sur Telegram
      - seconds: 40
        minutes: 59
        hours: 23
        then:
          - lambda: |-
              std::string mess = "ESP178 Rapport Journalier Chlore\n";
              CONVERT_SECONDS(id(_temps_fonctionnement_ppe_chlore).state, id(g_hh), id(g_mm), id(g_ss));
              char buf1[32];
              snprintf(buf1, sizeof(buf1), "Tps Ppe Chlore: %02d:%02d:%02d\n", id(g_hh), id(g_mm), id(g_ss));
              mess += buf1;
              id(_message_telegram)->execute(mess);

globals:
  - id: g_memoire_orp
    type: float
    restore_value: yes
    initial_value: '600'

  # temps d'injection chlore
  - id: g_tps_injection_chlore
    type: float
    restore_value: no

  # Cumul de la conso Chlore totale et jour
  - id: g_conso_chl_totale
    type: float
    restore_value: yes
    initial_value: '0.0'

  - id: g_conso_chl_jour
    type: float
    restore_value: yes
    initial_value: '0.0'

select:
  - platform: template
    name: "Mode_Fonct_regul_chlore"
    optimistic: true
    restore_value: true
    options:
      - Auto Ppm
      - Auto ORP
      - Ma_f
      - At_f
    id: _Mode_Fonctionnement_regul_chlore
    on_value: 
      then:
        - logger.log:
            format: "Mode Fonct Regul chlore --> %s"
            args: [ 'id(_Mode_Fonctionnement_regul_chlore).state.c_str()' ]
            level: INFO 
        - if:
            condition:
              or:
                - lambda: 'return id(_Mode_Fonctionnement_regul_chlore).state == "Ma_f";'
                - lambda: 'return id(_Mode_Fonctionnement_regul_chlore).state == "At_f";'   
            then:
              - script.stop: _regul_chlore
              - delay: 1s            
              - script.execute: _regul_chlore
button:
  - platform: template
    name: "BP_Cycle_Regul_chlore"
    on_press:
      - script.execute: _regul_chlore
  - platform: template
    name: "BP_RAZ_Tps_Galet_Chlore"
    on_press:
      - sensor.duty_time.reset: _temps_galet_chlore

binary_sensor:
  # Etat galets Chlore
  # Si Tps > à temps max alors = True
  - platform: template
    name: "Etat_Galets_Chlore"
    id: _etat_galets_chlore
    icon: mdi:biohazard
    lambda: |-
      return id(_temps_galet_chlore).state/3600 > id(_tps_max_galet_chlore).state;

datetime:
  - platform: template
    id: duree_injection_chlore
    type: time
    name: "duree_injection_chlore"
    optimistic: yes
    restore_value: true
    icon: mdi:clock    

number:
  # Cible Niveau Chlore
  - platform: template
    name: "chlore_Cible"
    id: _chlore_cible
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 10
    unit_of_measurement: "ppm"
    step: 0.01
    icon: mdi:biohazard

  # Consigne ORP
  - platform: template
    name: "Consigne ORP"
    id: consigne_orp
    optimistic: true
    min_value: 400
    max_value: 800
    step: 5
    initial_value: 700
    restore_value: true
    mode: box
    unit_of_measurement: "mV"
    icon: mdi:biohazard

  # Facteur de correction regulation ORP    
  - platform: template
    name: "Facteur Correction ORP"
    id: facteur_correction_orp
    optimistic: true
    min_value: 0.1
    max_value: 100.0
    step: 0.1
    initial_value: 50
    restore_value: true
    mode: box    
    unit_of_measurement: "%"
    icon: mdi:percent

  # Tps Max Galet Chlore
  - platform: template
    name: "tps_Max_galet_Chlore"
    id: _tps_max_galet_chlore
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 100
    unit_of_measurement: "h"
    step: 1
  # Etalonnage du 17/05/2025: 4.957 l/h
  - platform: template
    name: "debit_ppe_chlore"
    id: _debit_ppe_chlore
    optimistic: true
    initial_value: 4.957
    mode: box
    min_value: 0.5
    max_value: 7.2
    unit_of_measurement: "l/h"
    step: 0.001

sensor:
  # Mesure de l'ORP
  # Procédure étalonnage:
    # Mettre 1 s dans "update interval"
    # Mettre accuracy_decimals: 3
    # Decommenter le log
    # Commenter les 3 lignes calibrate_linear
    # Décommenter le LOGI du "on_value"  
    # ainsi on moyenne sur 15 s avec un affichage toutes les 5s 
    # 1-Faire une mesure avec solution étalon de 256mV
    # 2-Attendre 2 à 3 minutes que ca se stabilise
    # 3-relever la valeur de ORP
    # Décommenter les 3 lignes calibrate_linear    
    # Remettre 60 s dans "update interval"
    # Mettre accuracy_decimals: 2
    # Commenter le LOGI du "on_value"  
    # Compiler
  # Fin procédure étalonnage
  # Etalonnage du 20/06/2025: 282 pour 222
  - platform: ezo
    id: orp_ezo
    name: "orp_ezo"
    address: 98
    unit_of_measurement: "mV"
    accuracy_decimals: 2
    device_class: voltage
    state_class: measurement
    update_interval: 60s
    icon: mdi:biohazard
    # Filtrage en option (décommenter si besoin)
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 1
          send_first_at: 1
      - calibrate_linear:
          - 0 -> 0
          - 282 -> 222
    on_value:
      then:
        - lambda: |-
            //ESP_LOGI("ORP_ezo", "Mesure ORP (étalonnage): %.2f", id(orp_ezo).state);
  - platform: template
    id: orp_ezo_filtre
    name: "ORP EZO Filtré"
    unit_of_measurement: "mV"
    accuracy_decimals: 2
    device_class: voltage
    state_class: measurement
    icon: mdi:biohazard

  # mémorise le temps d'injection calculé
  - platform: template
    name: "tps_injection_chlore"
    id: _tps_injection_chlore
    unit_of_measurement: "s"
    state_class: "measurement"
    icon: mdi:clock-start    

  - platform: duty_time
    id: _temps_galet_chlore
    name: 'temps_galet_chlore'
    sensor: ppe_filt_en_fonctionnement
    restore: true
    icon: mdi:clock-start        
    filters: 
      - round: 0
    
  # Ppe Chlore
  - platform: duty_time
    id: _temps_fonctionnement_ppe_chlore
    name: 'temps_ma_ppe_chlore'
    lambda: "return id(cde_ppe_chlore).state == true;"
    restore: true
    icon: mdi:clock-start        
    filters: 
      - round: 0

  # Estimation du taux de chlore
  - platform: template
    name: "Chlore estimé (ppm)"
    unit_of_measurement: "ppm"
    accuracy_decimals: 2
    update_interval: 60s
    icon: mdi:biohazard
    lambda: |-
      const float orp = id(orp_ezo).state;  // en mV
      const float ph = id(ph_ezo).state;    // pH de 0 à 14

      if (orp <= 0 || ph <= 0) {
        return NAN;
      }

      // Formule empirique basée sur un modèle simplifié
      // Source : adaptation de modèles de traitement d'eau et docs industrielles
      float ppm = 10 * exp((orp - 650.0) / 100.0) * pow(10, -(ph - 7.0));

      // Optionnel : borne les valeurs
      if (ppm < 0.0) ppm = 0.0;
      if (ppm > 5.0) ppm = 5.0;

      return ppm;

  # Affiche la conso de chl
  - platform: template
    name: "Conso_Chl_Totale"
    id: conso_chl_totale
    lambda: "return id(g_conso_chl_totale);"
    update_interval: 60s  # ou plus fréquent selon besoin
    unit_of_measurement: "l"
    accuracy_decimals: 3
    icon: mdi:counter
    state_class: total_increasing
    device_class: water

  - platform: template
    name: "Conso_Chl_Jour"
    id: conso_chl_jour
    lambda: "return id(g_conso_chl_jour);"
    update_interval: 60s  # ou plus fréquent selon besoin
    unit_of_measurement: "l"
    accuracy_decimals: 3
    icon: mdi:counter
    state_class: total_increasing
    device_class: water    

  - platform: homeassistant
    name: "poids_bidon_chlore"
    entity_id: "sensor.esp129_pesage_chlore_poids_chlore"
    id: _poids_chlore

switch: 
  - platform: gpio
    name: "cde_ppe_chlore"
    pin: ${GPIO_rel_ppe_chlore}
    id: cde_ppe_chlore
    icon: mdi:pump

interval:
  - interval: 5s
    then: 
      - script.execute: _memorisation_orp
  - interval: 1h # Test temps usage Galets Chlore
    then: 
      - script.execute: _fonction_galet_chlore

script:
  # Si la pompe tourne depuis au moins "tempo_recirculation" on raffraichit la memoire de ORP qui est
  # prise en compte dans les scripts.
  # sinon on travaille avec l'ORP mémorisé avant l'arret précédent
  - id: _memorisation_orp
    then:
      - lambda: |-
          if (!isnan(id(orp_ezo).state) && id(flag_tempo_ppe_filtre)) {
            id(g_memoire_orp) = id(orp_ezo).state;
            ESP_LOGI("orp", "ORP actualisé à %.2f (pompe active)", id(g_memoire_orp));
          } else {
            ESP_LOGI("orp", "ORP non mis à jour (pompe inactive ou mesure invalide)");
          }
          id(orp_ezo_filtre).publish_state(id(g_memoire_orp));

  # Injection chlore liquide
  # Calcul du temps d'injection
  - id: _regul_chlore
    mode: single
    then:
      - logger.log:
          format: "Script Injection Chlore"
          level: INFO
      - if:
          condition:
            and:
              - switch.is_on: cde_ppe_filtration
              - or:
                  - lambda: 'return id(_Mode_Fonctionnement_regul_chlore).state == "Auto Ppm";'
                  - lambda: 'return id(_Mode_Fonctionnement_regul_chlore).state == "Auto ORP";'

          then:
            - lambda: |-
                float temps = 0.0f;

                if (id(_Mode_Fonctionnement_regul_chlore).state == "Auto Ppm") {
                  // Boucle ouverte : dosage selon concentration cible
                  float mp = 96.0f;   // concentration chlore actif en g/L (9.6%)
                  float vb = 50000.0f;  // volume piscine en L
                  float nb = id(_chlore_cible).state;  // mg/L
                  float de = id(_debit_ppe_chlore).state;  // L/h
                  float q = (nb * vb) / (mp * 1000.0f);  // L
                  if (de > 0) {
                    temps = std::min((q / de) * 3600.0f, 3600.0f);  // s, max 1h
                  }
                  ESP_LOGI("Dosage Chlore", "Mode Auto Ppm (mg/L) → Quantité: %.2f L, Temps: %.2f s", q, temps);

                } else if (id(_Mode_Fonctionnement_regul_chlore).state == "Auto ORP") {
                  // Boucle fermée : dosage selon ORP
                  float consigne = id(consigne_orp).state;
                  float mesure = id(orp_ezo).state;
                  float erreur = consigne - mesure;
                  float k = id(facteur_correction_orp).state/100;  // s/mV
                  float temps_max = 600.0f;  // max 10 min
                  if (erreur > 0) {
                    temps = std::min(k * erreur, temps_max);
                  }
                  ESP_LOGI("Dosage Chlore", "Mode Auto ORP → ORP: %.1f mV, Cible: %.1f mV, Erreur: %.1f, Temps: %.1f s", mesure, consigne, erreur, temps);
                }

                id(g_tps_injection_chlore) = temps;
                id(_tps_injection_chlore).publish_state(temps);

            - lambda: |-    
                CONVERT_SECONDS(id(g_tps_injection_chlore), id(g_hh), id(g_mm), id(g_ss));          
            - datetime.time.set:
                id: duree_injection_chlore
                time: !lambda |-
                  return {second: static_cast<uint8_t>(id(g_ss)), minute: static_cast<uint8_t>(id(g_mm)), hour: static_cast<uint8_t>(id(g_hh))};

      - if:
          condition:
            and:
              - lambda: 'return id(_tps_injection_chlore).state > 0;'
              - switch.is_on: cde_ppe_filtration
          then:
            - switch.turn_on: cde_ppe_chlore
            - logger.log:
                format: "Marche ppe Chlore en %s"
                args: [ 'id(_Mode_Fonctionnement_regul_chlore).state.c_str()' ]
                level: INFO
            - lambda: |-
                std::string mess = "ESP178 Temps inj Chlore";
                id(_message_telegram_v2)->execute(mess, id(g_tps_injection_chlore));

            - delay: !lambda "return id(g_tps_injection_chlore)*1000;"

            - switch.turn_off: cde_ppe_chlore
            - logger.log:
                format: "Arrêt ppe Chlore en %s"
                args: [ 'id(_Mode_Fonctionnement_regul_chlore).state.c_str()' ]
                level: INFO
            - lambda: |-
                float debit = id(_debit_ppe_chlore).state;
                float duree = id(_tps_injection_chlore).state;
                float volume = debit * duree / 3600.0f;
                // Mise à jour des compteurs
                id(g_conso_chl_totale) += volume;
                id(g_conso_chl_jour) += volume;
                id(conso_chl_totale).publish_state(id(g_conso_chl_totale));
                id(conso_chl_jour).publish_state(id(g_conso_chl_jour));
                std::string mess = "Fin Injection Chlore-Volume: " + std::to_string(volume)+ "l" + "\n";
                mess += "Poids Bidon Chlore: " + std::to_string(id(_poids_chlore).state)+" kg";
                id(_message_telegram)->execute(mess.c_str());

          else:
            - switch.turn_off: cde_ppe_chlore
            - lambda: 'id(_tps_injection_chlore).publish_state(0);'
            - logger.log:
                format: "Pas d'injection chlore (condition non remplie)"
                level: INFO

      - if:
          condition:
            and:
              - lambda: 'return id(_Mode_Fonctionnement_regul_chlore).state == "Ma_f";'
              - switch.is_on: cde_ppe_filtration
          then:
            - switch.turn_on: cde_ppe_chlore
            - logger.log: 
                format: "Marche Forcée ppe Chlore"
                level: INFO
      - if:
          condition:
            or:
              - lambda: 'return id(_Mode_Fonctionnement_regul_chlore).state == "At_f";'
              - switch.is_off: cde_ppe_filtration
          then:
            - switch.turn_off: cde_ppe_chlore
            - logger.log: 
                format: "Arret Forcé ppe Chlore"
                level: INFO

  # Log état galets Chlore en heure
  - id: _fonction_galet_chlore
    then:
      - if:
          condition:
            and:
              - lambda: 'return id(_Mode_Fonctionnement_regul_chlore).state == "Auto";'
              - lambda: 'return id(_etat_galets_chlore).state == true;'
          then:
            - logger.log: 
                format: "Galets Chlore Dépassé"
                level: INFO  
            - lambda: |-
                std::string mess = "ESP178 Tps Utilisation Galets Chlore Atteint";
                id(_message_telegram)->execute(mess);

          else:
            - lambda: 
                id(_etat_galets_chlore).publish_state(false);