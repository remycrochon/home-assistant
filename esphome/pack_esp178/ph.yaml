time:
  - platform: sntp
    timezone: Europe/Paris
    servers:
      - 0.pool.ntp.org
      - 1.pool.ntp.org
      - 2.pool.ntp.org
    on_time:
      # Déclenchement du script de regul pH deux fois par jour
      - seconds: 0
        minutes: 00
        hours: 12
        then:
          - script.execute: _regul_ph
      - seconds: 0
        minutes: 00
        hours: 16
        then:
          - script.execute: _regul_ph
      # reset le compteur de temps à minuit
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - sensor.duty_time.reset: _temps_fonctionnement_ppe_ph
      # Notification du rapport journalier sur Telegram
      - seconds: 05
        minutes: 59
        hours: 23
        then:
          - lambda: |-
              std::string mess = "ESP178 Rapport Journalier pH\n";

              CONVERT_SECONDS(id(_temps_fonctionnement_ppe_ph).state, id(g_hh), id(g_mm), id(g_ss));
              char buf1[32];
              snprintf(buf1, sizeof(buf1), "Tps Ppe pH: %02d:%02d:%02d\n", id(g_hh), id(g_mm), id(g_ss));
              mess += buf1;

              id(_message_telegram)->execute(mess);

globals:
  - id: g_memoire_ph
    type: float
    restore_value: yes
    initial_value: '7.2'

  # temps d'injection ph
  - id: g_tps_injection_ph_moins
    type: float
    restore_value: no

# déclaration des modes de fonctionnement dans des "input select"
select:
  - platform: template
    name: "${friendly_name}_Mode_Fonctionnement_regul_ph"
    optimistic: true
    restore_value: true
    options:
      - Auto
      - Ma_f
      - At_f
    id: _Mode_Fonctionnement_regul_ph
    on_value: 
      then:
        - logger.log:
            format: "Mode Fonct Regul pH --> %s"
            args: [ 'id(_Mode_Fonctionnement_regul_ph).state.c_str()' ]
            level: INFO
        - if:
            condition:
              or:
                - lambda: 'return id(_Mode_Fonctionnement_regul_ph).state == "Ma_f";'
                - lambda: 'return id(_Mode_Fonctionnement_regul_ph).state == "At_f";'
            then:                    
              - script.stop: _regul_ph   
              - delay: 1s            
              - script.execute: _regul_ph       

button:
  - platform: template
    name: "${friendly_name}_BP_Cycle_Regul_pH"
    on_press:
      - script.execute: _regul_ph

datetime: 
  - platform: template
    id: duree_injection_ph
    type: time
    name: "${friendly_name}_duree_injection_pH"
    optimistic: yes
    restore_value: true

# Input Number
number:
  # Simulation Niveau pH
  - platform: template
    name: "${friendly_name}_simule_pH"
    id: simul_ph_ezo
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 10
    unit_of_measurement: "pH"
    step: 0.01
  # Cible Régulation pH
  - platform: template
    name: "${friendly_name}_pH_Cible"
    id: _ph_cible
    optimistic: true
    restore_value: true
    mode: box
    min_value: 6
    max_value: 7.6
    unit_of_measurement: "pH"
    step: 0.01

  # Hysterisis pH: S'additionne à la consigne dans la comparaison avec la cible
  - platform: template
    name: "${friendly_name}_pH_Hysteris"
    id: _ph_hysteresis
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 1
    unit_of_measurement: "pH"
    step: 0.01

  # Facteur de correction par cycle (fraction de la correction totale)
  - platform: template
    name: "${friendly_name}_facteur_correction_ph"
    id: facteur_correction_ph
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0.01
    max_value: 1.0
    unit_of_measurement: ""
    step: 0.01
    icon: mdi:percent

  # Debit Pompe pH moins
  # Etalonnage du 18/07/2024: 4.272 l/h
  # Etalonnage du 17/05/2025: 4.269 l/h
  - platform: template
    name: "${friendly_name}_debit_ppe_ph_moins"
    id: _debit_ppe_moins
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0.5
    max_value: 7.2
    unit_of_measurement: "l/h"
    step: 0.001

  # Durée marche pompe ph cycle
  - platform: template
    name: "${friendly_name}_durée_injection_phmoins"
    id: duree_inject_phmoins
    optimistic: true
    restore_value: true
    mode: box
    min_value: 0
    max_value: 120
    unit_of_measurement: "s"
    step: 1
    icon: mdi:clock


sensor:
  # Mesure du pH
  # Procédure étalonnage:
    # Mettre 1 s dans "update interval"
    # Mettre accuracy_decimals: 3
    # Decommenter le log
    # Commenter les 4 lignes calibrate_linear
    # Décommenter le LOGI du "on_value"  
    # ainsi on moyenne sur 15 s avec un affichage toutes les 5s 
    # 1-Faire une mesure avec solution étalon de 4.0
    # 2-Attendre 2 à 3 minutes que ca se stabilise
    # 3-relever la valeur du pH
    # 4-Toujours bien rincer la sonde à l'eau déminéralisée entre deux solutions
    # Refaire étapes 1 à 4 avec une solution étalon de 6.86
    # Puis avec une solution étalon de 9.18
    # Saisir les valeurs relevés dans "Calibrate_linear"
    # Décommenter les 4 lignes calibrate_linear    
    # Remettre 60 s dans "update interval"
    # Mettre accuracy_decimals: 2
    # Commenter le LOGI du "on_value"  
    # Compiler
  # Fin procédure étalonnage

  # Etalonnage 28 juin 2023          
  #      - 4.547 -> 4.0
  #      - 7.282 -> 6.86
  #      - 9.447 -> 9.18
  # Etalonnage 6 juillet 2022          
  #      - 4.44 -> 4.0
  #      - 7.17 -> 6.86
  #      - 9.41 -> 9.18
  # Etalonnage 20 juin 2024
  #      - 4.665 -> 4.0
  #      - 7.482 -> 6.86
  #      - 9.505 -> 9.18
  # Etalonnage 21 mai 2025
  #      - 4.76 -> 4.0
  #      - 7.50 -> 6.86
  #      - 9.49 -> 9.18
  - platform: ezo
    id: ph_ezo
    name: "${friendly_name}_ph_ezo"
    address: 99
    unit_of_measurement: "pH"
    accuracy_decimals: 2
    state_class: measurement
    update_interval: 60s
    filters:
      - sliding_window_moving_average:
          window_size: 15
          send_every: 1
          send_first_at: 1
      - calibrate_linear:
          - 4.76 -> 4.0
          - 7.50 -> 6.86
          - 9.49 -> 9.18
    on_value:
      then:
        - lambda: |-
            // ESP_LOGI("ph_ezo", "Mesure pH (étalonnage): %.2f", id(ph_ezo).state);
  
  # Capteur Kalman pour lisser ph_ezo
  - platform: combination
    type: kalman
    id: ph_kalman
    name: "${friendly_name}_ph_filtered"
    process_std_dev: 0.01  # Changements lents (0.01 pH/s)
    sources:
      - source: ph_ezo
        error: 0.1  # Bruit typique du capteur
    std_dev:
      id: ph_kalman_std_dev
      name: "${friendly_name}_ph_kalman_std_dev"
    device_class: ph
    state_class: "measurement"

  # mémorise le temps d'injection calculé
  - platform: template
    name: "${friendly_name}_tps_injection_ph_moins"
    id: _tps_injection_ph_moins
    unit_of_measurement: "s"
    state_class: "measurement" 

  # Affiche le volume de pH moins à injecter
  - platform: template
    name: "${friendly_name}_vol_injection_ph_moins"
    id: _vol_injection_ph_moins
    unit_of_measurement: "l"
    state_class: "measurement" 
    
  # Ppe pH
  - platform: duty_time
    id: _temps_fonctionnement_ppe_ph
    name: '${friendly_name}_temps_ma_ppe_ph'
    lambda: "return id(cde_ppe_ph_moins).state == true;"
    restore: true
    filters: 
      - round: 0

text_sensor:
  - platform: template
    name: "${friendly_name}_ph_mode"
    id: ph_mode
    update_interval: never

switch:
  - platform: gpio
    name: "${friendly_name} cde_ppe_ph_moins"
    pin: GPIO33
    id: cde_ppe_ph_moins

interval:
  - interval: 5s
    then: 
      - script.execute: _memorisation_ph
      - script.execute: _securisation_regul_ph

script:
  # Si la pompe tourne depuis au moins "tempo_recirculation" on raffraichit la memoire du Ph qui est
  # prise en compte dans les scripts.
  # sinon on travaille avec le pH mémorisé avant l'arret précédent
  - id: _memorisation_ph
    then:
      - if:
          condition:
            lambda: 'return id(flag_tempo_ppe_filtre) == true;'
          then:
            - lambda: |-
                id(g_memoire_ph)=id(ph_ezo).state;            
          else:
            - lambda: |-
                id(g_memoire_ph)=id(g_memoire_ph);
      - if:
          condition:
            lambda: 'return isnan(id(ph_ezo).state);' # verifie si ph_ezo est valide
          then:
            - logger.log:
                format: "ph_EZO invalide: %.2f"
                args: [ 'id(ph_ezo).state']
                level: DEBUG
            - lambda: |-
                id(g_memoire_ph)=id(g_memoire_ph);
          else: 
            - logger.log:
                format: "ph_EZO Valide: %.2f"
                args: [ 'id(ph_ezo).state']
                level: DEBUG   

      - logger.log:
          format: "Flag Temp: %i / Ph EZO: %.2f / Mem Ph: %.2f"
          args: [ 'id(flag_tempo_ppe_filtre)','id(ph_ezo).state','id(g_memoire_ph)' ]
          level: DEBUG
  # Script principal pour la régulation du pH
  - id: _regul_ph
    mode: single
    then:
      - if:
          condition:
            - lambda: 'return id(_Mode_Fonctionnement_regul_ph).state == "Auto";'
          then:
            - logger.log:
                format: "Log mem ph: %f / pH Cible: %f"
                args: [ 'id(g_memoire_ph)','id(_ph_cible).state' ]
                level: debug      
            - if:
                condition:
                  and:
                    - lambda: 'return id(g_memoire_ph) > (id(_ph_cible).state+id(_ph_hysteresis).state);'
                    - lambda: 'return id(g_memoire_ph) > 0;'
                    - switch.is_on: cde_ppe_filtration          
                then:
                  - lambda: |-
                      float ecart = abs(id(g_memoire_ph) - id(_ph_cible).state);
                          // Volume de la piscine (fixe à 43,2 m³)
                          float volume_piscine = 43.2;
                          // Quantité de référence : 0,2 l pour 0,1 unité de pH pour 10 m³
                          float quantite_ref_ph = 0.2;
                          // Calcul de la quantité nécessaire pour corriger l'écart total (en litres)
                          float quantite_necessaire = (ecart / 0.1) * quantite_ref_ph * (volume_piscine / 10.0);
                          // Conversion du débit de l/h en ml/s (1 l = 1000 ml, 1 h = 3600 s)
                          float debit_ml_s = (id(_debit_ppe_moins).state * 1000.0) / 3600.0;  // Exemple : 4,272 l/h = 1,187 ml/s
                          // Calcul de la durée nécessaire pour injecter la quantité (quantité en ml, débit en ml/s)
                          float duree = (quantite_necessaire * 1000.0) / debit_ml_s;
                          // Ajustement pour éviter des corrections trop brutales : on limite à une fraction par cycle
                          // Utilisation du facteur de correction défini par l'utilisateur
                          float facteur_correction = id(facteur_correction_ph).state;
                          duree = duree * facteur_correction;
                          // Limites de sécurité : entre 1 et 60 secondes
                          duree = std::max(1.0f, std::min(duree, 60.0f));
                          // Log pour débogage
                          ESP_LOGI("regul_ph", "Écart: %.2f, Quantité: %.2f ml, Débit: %.3f ml/s, Facteur: %.2f, Durée: %.2f s", ecart, quantite_necessaire * 1000.0, debit_ml_s, facteur_correction, duree);
                          id(g_tps_injection_ph_moins) = duree;

                else:
                  - lambda: |-
                      id(g_tps_injection_ph_moins)=0;

            - lambda: |-
                id(_tps_injection_ph_moins).publish_state(id(g_tps_injection_ph_moins));

            # Convertion et affichage de la durée d'injection pH en hh:mm
            - lambda: |-
                CONVERT_SECONDS(id(g_tps_injection_ph_moins), id(g_hh), id(g_mm), id(g_ss));                        
            - datetime.time.set:
                id: duree_injection_ph
                time: !lambda |-
                  return {second: static_cast<uint8_t>(id(g_ss)), minute: static_cast<uint8_t>(id(g_mm)), hour: static_cast<uint8_t>(id(g_hh))};

            - logger.log:
                format: "Log tps injection: %f"
                args: [ 'id(g_tps_injection_ph_moins)' ]
                level: DEBUG

            - if:
                condition:
                  and:
                    - lambda: 'return id(g_tps_injection_ph_moins) > 0;'
                then:
                  - lambda: |-
                      std::string mess = "ESP178 Debut injection pH\n";
                      mess += "Cible pH: " + std::to_string(id(_ph_cible).state) + "\n";
                      mess += "Mesure pH: " + std::to_string(id(g_memoire_ph));
                      id(_message_telegram_v2)->execute(mess,id(g_tps_injection_ph_moins));                      
                  - logger.log:
                      format: "Ph Mesure ph: %f / pH Cible: %f"
                      args: [ 'id(g_memoire_ph)','id(_ph_cible).state' ]
                      level: INFO                      
                  - switch.turn_on: cde_ppe_ph_moins
                  - logger.log: 
                      format: "Marche ppe Ph moins en Auto"
                      level: INFO        
                  - delay: !lambda "return id(g_tps_injection_ph_moins)*1000;"
                  - switch.turn_off: cde_ppe_ph_moins
                  - lambda: |-
                      std::string mess = "ESP178 Fin Injection pH";
                      id(_message_telegram_v2)->execute(mess,id(g_memoire_ph));
                  - logger.log: 
                      format: "Arret ppe Ph moins en Auto"
                      level: INFO
                else:
                  - switch.turn_off: cde_ppe_ph_moins
                  - logger.log: 
                      format: "Arret ppe Ph moins en Auto"
                      level: INFO
                        
      - if:
          condition:
            and:
              - lambda: 'return id(_Mode_Fonctionnement_regul_ph).state == "Ma_f";'
              - switch.is_on: cde_ppe_filtration
          then:
            - switch.turn_on: cde_ppe_ph_moins
            - logger.log: 
                format: "Marche Forcée ppe pH"
                level: INFO
      - if:
          condition:
            or:
              - lambda: 'return id(_Mode_Fonctionnement_regul_ph).state == "At_f";'
              - switch.is_off: cde_ppe_filtration
          then:
            - switch.turn_off: cde_ppe_ph_moins
            - logger.log: 
                format: "Arret Forcé ppe pH"
                level: INFO                           
  # Stoppe le Script de regule pH quand la mesure devient inferieure à la consigne
  # Cela évite de trop injecter de pH Moins
  - id: _securisation_regul_ph
    mode: single
    then:
      - if:
          condition:
            - lambda: 'return id(_Mode_Fonctionnement_regul_ph).state == "Auto";'
            - lambda: 'return id(g_memoire_ph) < id(_ph_cible).state;'
            - script.is_running: _regul_ph

          then:
            - logger.log:
                format: "Log mem ph: %f / pH Cible: %f"
                args: [ 'id(g_memoire_ph)','id(_ph_cible).state' ]
                level: DEBUG  
            - script.stop: _regul_ph                
            - switch.turn_off: cde_ppe_ph_moins
            - lambda: |-
                float Q = id(_temps_fonctionnement_ppe_ph).state * id(_debit_ppe_moins).state / 3600;
                std::string mess = "ESP178 Arret Sécurisé Script Injection pH\n";
                mess += "Cible pH: " + std::to_string(id(_ph_cible).state) + "\n";
                mess += "Mesure pH: " + std::to_string(id(g_memoire_ph)) + "\n";
                CONVERT_SECONDS(id(g_tps_injection_ph_moins), id(g_hh), id(g_mm), id(g_ss));
                char buf[64];
                snprintf(buf, sizeof(buf), "Tps Injec pH: %02d:%02d:%02d\n", id(g_hh), id(g_mm), id(g_ss));
                mess += buf;
                snprintf(buf, sizeof(buf), "Volume inj: %.2f L\n", Q);
                mess += buf;
                CONVERT_SECONDS(id(_temps_fonctionnement_ppe_ph).state, id(g_hh), id(g_mm), id(g_ss));
                snprintf(buf, sizeof(buf), "Tps Fonct Ppe pH: %02d:%02d:%02d\n", id(g_hh), id(g_mm), id(g_ss));
                mess += buf;
                id(_message_telegram)->execute(mess);               
