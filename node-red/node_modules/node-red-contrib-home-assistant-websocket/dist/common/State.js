"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _State_instances, _State_enabled, _State_lastPayload, _State_node, _State_onClose, _State_emitChange;
Object.defineProperty(exports, "__esModule", { value: true });
const Events_1 = require("./events/Events");
const Storage_1 = __importDefault(require("./Storage"));
class State {
    constructor(node) {
        var _a;
        _State_instances.add(this);
        _State_enabled.set(this, true);
        _State_lastPayload.set(this, void 0);
        _State_node.set(this, void 0);
        __classPrivateFieldSet(this, _State_node, node, "f");
        __classPrivateFieldSet(this, _State_enabled, (_a = Storage_1.default.getNodeData(node.id, 'isEnabled')) !== null && _a !== void 0 ? _a : true, "f");
        __classPrivateFieldSet(this, _State_lastPayload, Storage_1.default.getNodeData(node.id, 'lastPayload'), "f");
        node.on(Events_1.NodeEvent.Close, __classPrivateFieldGet(this, _State_instances, "m", _State_onClose).bind(this));
    }
    isEnabled() {
        return __classPrivateFieldGet(this, _State_enabled, "f");
    }
    async setEnabled(state) {
        __classPrivateFieldSet(this, _State_enabled, state, "f");
        await Storage_1.default.saveNodeData(__classPrivateFieldGet(this, _State_node, "f").id, 'isEnabled', state).catch(__classPrivateFieldGet(this, _State_node, "f").error);
        __classPrivateFieldGet(this, _State_instances, "m", _State_emitChange).call(this);
    }
    async setLastPayload(payload) {
        __classPrivateFieldSet(this, _State_lastPayload, payload, "f");
        await Storage_1.default.saveNodeData(__classPrivateFieldGet(this, _State_node, "f").id, 'lastPayload', payload).catch(__classPrivateFieldGet(this, _State_node, "f").error);
        __classPrivateFieldGet(this, _State_instances, "m", _State_emitChange).call(this);
    }
    getLastPayload() {
        return __classPrivateFieldGet(this, _State_lastPayload, "f");
    }
}
_State_enabled = new WeakMap(), _State_lastPayload = new WeakMap(), _State_node = new WeakMap(), _State_instances = new WeakSet(), _State_onClose = async function _State_onClose(removed, done) {
    if (removed) {
        await Storage_1.default.removeNodeData(__classPrivateFieldGet(this, _State_node, "f").id).catch(done);
    }
    done();
}, _State_emitChange = function _State_emitChange() {
    __classPrivateFieldGet(this, _State_node, "f").emit(Events_1.NodeEvent.StateChanged, {
        isEnabled: __classPrivateFieldGet(this, _State_enabled, "f"),
        lastPayload: __classPrivateFieldGet(this, _State_lastPayload, "f"),
    });
};
exports.default = State;
