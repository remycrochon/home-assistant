"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _BaseError_statusMessage;
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTranslationKey = void 0;
const globals_1 = require("../../globals");
function isTranslationKey(key) {
    if (typeof key !== 'string') {
        return false;
    }
    return !key.includes(' ') && (key.includes('.') || key.includes('__'));
}
exports.isTranslationKey = isTranslationKey;
class BaseError extends Error {
    constructor({ data, statusMessage, name, defaultStatusMessage, }) {
        const [key, params] = Array.isArray(data) ? data : [data, undefined];
        let message;
        if (key) {
            message = isTranslationKey(key) ? globals_1.RED._(key, params) : key;
        }
        super(message);
        _BaseError_statusMessage.set(this, void 0);
        this.name = name !== null && name !== void 0 ? name : 'BaseError';
        // Set status message
        let [statusKey, statusParams] = Array.isArray(statusMessage)
            ? statusMessage
            : [statusMessage, undefined];
        statusKey !== null && statusKey !== void 0 ? statusKey : (statusKey = defaultStatusMessage !== null && defaultStatusMessage !== void 0 ? defaultStatusMessage : 'home-assistant.status.error');
        __classPrivateFieldSet(this, _BaseError_statusMessage, globals_1.RED._(statusKey, statusParams), "f");
    }
    get statusMessage() {
        return __classPrivateFieldGet(this, _BaseError_statusMessage, "f");
    }
}
_BaseError_statusMessage = new WeakMap();
exports.default = BaseError;
