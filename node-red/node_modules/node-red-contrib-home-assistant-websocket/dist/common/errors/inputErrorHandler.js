"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setTimeoutWithErrorHandling = exports.inputErrorHandler = exports.getErrorData = void 0;
const joi_1 = require("joi");
const globals_1 = require("../../globals");
const BaseError_1 = __importDefault(require("./BaseError"));
const HomeAssistantError_1 = __importStar(require("./HomeAssistantError"));
function getErrorData(e) {
    let statusMessage = globals_1.RED._('home-assistant.status.error');
    if ((0, joi_1.isError)(e)) {
        statusMessage = globals_1.RED._('home-assistant.status.validation_error');
    }
    else if ((0, HomeAssistantError_1.isHomeAssistantApiError)(e)) {
        e = new HomeAssistantError_1.default(e);
    }
    else if (e instanceof BaseError_1.default) {
        statusMessage = e.statusMessage;
    }
    else if (typeof e === 'string') {
        e = new Error(e);
    }
    else {
        e = new Error(globals_1.RED._('home-assistant.error.unrecognized_error', {
            error: JSON.stringify(e),
        }));
    }
    return { error: e, statusMessage };
}
exports.getErrorData = getErrorData;
function inputErrorHandler(e, deps) {
    var _a, _b;
    const { error, statusMessage } = getErrorData(e);
    (_a = deps === null || deps === void 0 ? void 0 : deps.status) === null || _a === void 0 ? void 0 : _a.setFailed(statusMessage);
    (_b = deps === null || deps === void 0 ? void 0 : deps.done) === null || _b === void 0 ? void 0 : _b.call(deps, error);
}
exports.inputErrorHandler = inputErrorHandler;
function setTimeoutWithErrorHandling(callback, timeout, deps) {
    const timeoutId = setTimeout(() => {
        try {
            callback();
        }
        catch (e) {
            inputErrorHandler(e, deps);
        }
    }, timeout);
    return timeoutId;
}
exports.setTimeoutWithErrorHandling = setTimeoutWithErrorHandling;
