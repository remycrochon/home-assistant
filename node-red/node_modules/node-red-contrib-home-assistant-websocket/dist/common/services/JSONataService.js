"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _JSONataService_homeAssistant, _JSONataService_node;
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const globals_1 = require("../../globals");
const JSONataError_1 = __importDefault(require("../errors/JSONataError"));
function evaluateJSONataExpression(expr, message) {
    return new Promise((resolve, reject) => {
        globals_1.RED.util.evaluateJSONataExpression(expr, message, (err, res) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(res);
            }
        });
    });
}
function isJSONataError(error) {
    if (typeof error !== 'object' || !error)
        return false;
    return ('code' in error &&
        'message' in error &&
        'stack' in error &&
        'token' in error);
}
class JSONataService {
    constructor({ homeAssistant, node, }) {
        _JSONataService_homeAssistant.set(this, void 0);
        _JSONataService_node.set(this, void 0);
        __classPrivateFieldSet(this, _JSONataService_homeAssistant, homeAssistant, "f");
        __classPrivateFieldSet(this, _JSONataService_node, node, "f");
    }
    async evaluate(expression, objs = {}) {
        let expr;
        try {
            expr = globals_1.RED.util.prepareJSONataExpression(expression, __classPrivateFieldGet(this, _JSONataService_node, "f"));
        }
        catch (err) {
            if (isJSONataError(err)) {
                throw new JSONataError_1.default(err);
            }
            throw err;
        }
        const { entity, message, prevEntity } = objs;
        expr.assign('entity', () => entity);
        expr.assign('entities', (val) => { var _a, _b; return (_b = (_a = __classPrivateFieldGet(this, _JSONataService_homeAssistant, "f")) === null || _a === void 0 ? void 0 : _a.websocket) === null || _b === void 0 ? void 0 : _b.getStates(val); });
        expr.assign('outputData', (obj) => {
            if (!obj) {
                const filtered = Object.keys(objs).reduce((acc, key) => {
                    // ignore message as it already accessable
                    if (key !== 'message' && objs[key] !== undefined) {
                        acc[key] = objs[key];
                    }
                    return acc;
                }, {});
                return filtered;
            }
            return objs[obj];
        });
        expr.assign('prevEntity', () => prevEntity);
        expr.assign('randomNumber', lodash_1.random);
        expr.assign('sampleSize', lodash_1.sampleSize);
        try {
            // await here to catch JSONataError
            return await evaluateJSONataExpression(expr, message);
        }
        catch (err) {
            if (isJSONataError(err)) {
                throw new JSONataError_1.default(err);
            }
            throw err;
        }
    }
}
_JSONataService_homeAssistant = new WeakMap(), _JSONataService_node = new WeakMap();
exports.default = JSONataService;
