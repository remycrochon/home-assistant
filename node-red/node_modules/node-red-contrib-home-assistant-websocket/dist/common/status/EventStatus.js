"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _EventsStatus_instances, _EventsStatus_connectionState, _EventsStatus_onClientError, _EventsStatus_onClientClose, _EventsStatus_onClientConnecting, _EventsStatus_onClientOpen, _EventsStatus_onClientRunning, _EventsStatus_updateConnectionStatus;
Object.defineProperty(exports, "__esModule", { value: true });
const Websocket_1 = require("../../homeAssistant/Websocket");
const Status_1 = __importStar(require("./Status"));
class EventsStatus extends Status_1.default {
    constructor(props) {
        super(props);
        _EventsStatus_instances.add(this);
        _EventsStatus_connectionState.set(this, Websocket_1.ClientState.Disconnected);
        props.clientEvents.addListeners(this, [
            [Websocket_1.ClientEvent.Close, __classPrivateFieldGet(this, _EventsStatus_instances, "m", _EventsStatus_onClientClose)],
            [Websocket_1.ClientEvent.Connecting, __classPrivateFieldGet(this, _EventsStatus_instances, "m", _EventsStatus_onClientConnecting)],
            [Websocket_1.ClientEvent.Error, __classPrivateFieldGet(this, _EventsStatus_instances, "m", _EventsStatus_onClientError)],
            [Websocket_1.ClientEvent.Open, __classPrivateFieldGet(this, _EventsStatus_instances, "m", _EventsStatus_onClientOpen)],
            [Websocket_1.ClientEvent.Running, __classPrivateFieldGet(this, _EventsStatus_instances, "m", _EventsStatus_onClientRunning)],
        ]);
    }
    getConnectionStatus() {
        const status = {
            fill: Status_1.StatusColor.Red,
            shape: Status_1.StatusShape.Ring,
            text: 'home-assistant.status.disconnected',
        };
        switch (__classPrivateFieldGet(this, _EventsStatus_connectionState, "f")) {
            case Websocket_1.ClientState.Connected:
                status.fill = Status_1.StatusColor.Green;
                status.text = 'home-assistant.status.connected';
                break;
            case Websocket_1.ClientState.Connecting:
                status.fill = Status_1.StatusColor.Yellow;
                status.text = 'home-assistant.status.connecting';
                break;
            case Websocket_1.ClientState.Error:
                status.text = 'home-assistant.status.error';
                break;
            case Websocket_1.ClientState.Running:
                status.fill = Status_1.StatusColor.Green;
                status.text = 'home-assistant.status.running';
                break;
        }
        return status;
    }
}
_EventsStatus_connectionState = new WeakMap(), _EventsStatus_instances = new WeakSet(), _EventsStatus_onClientError = function _EventsStatus_onClientError() {
    __classPrivateFieldSet(this, _EventsStatus_connectionState, Websocket_1.ClientState.Error, "f");
    __classPrivateFieldGet(this, _EventsStatus_instances, "m", _EventsStatus_updateConnectionStatus).call(this);
}, _EventsStatus_onClientClose = function _EventsStatus_onClientClose() {
    __classPrivateFieldSet(this, _EventsStatus_connectionState, Websocket_1.ClientState.Disconnected, "f");
    __classPrivateFieldGet(this, _EventsStatus_instances, "m", _EventsStatus_updateConnectionStatus).call(this);
}, _EventsStatus_onClientConnecting = function _EventsStatus_onClientConnecting() {
    __classPrivateFieldSet(this, _EventsStatus_connectionState, Websocket_1.ClientState.Connecting, "f");
    __classPrivateFieldGet(this, _EventsStatus_instances, "m", _EventsStatus_updateConnectionStatus).call(this);
}, _EventsStatus_onClientOpen = function _EventsStatus_onClientOpen() {
    __classPrivateFieldSet(this, _EventsStatus_connectionState, Websocket_1.ClientState.Connected, "f");
    __classPrivateFieldGet(this, _EventsStatus_instances, "m", _EventsStatus_updateConnectionStatus).call(this);
}, _EventsStatus_onClientRunning = function _EventsStatus_onClientRunning() {
    __classPrivateFieldSet(this, _EventsStatus_connectionState, Websocket_1.ClientState.Running, "f");
    __classPrivateFieldGet(this, _EventsStatus_instances, "m", _EventsStatus_updateConnectionStatus).call(this);
}, _EventsStatus_updateConnectionStatus = function _EventsStatus_updateConnectionStatus() {
    const status = this.getConnectionStatus();
    this.lastStatus = status;
    this.updateStatus(status);
};
exports.default = EventsStatus;
