"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.subscribeEntityRegistryDisplay = exports.subscribeEntityRegistry = exports.subscribeDeviceRegistry = exports.subscribeAreaRegistry = void 0;
const home_assistant_js_websocket_1 = require("home-assistant-js-websocket");
const lodash_1 = require("lodash");
function subscribeAreaRegistry(conn, cb) {
    const fetchAreaRegistry = (conn) => conn.sendMessagePromise({
        type: 'config/area_registry/list',
    });
    const subscribeUpdates = (conn, store) => conn.subscribeEvents((0, lodash_1.throttle)(() => fetchAreaRegistry(conn).then((areas) => store.setState(areas, true)), 500), 'area_registry_updated');
    const collection = (0, home_assistant_js_websocket_1.getCollection)(conn, '_areas', fetchAreaRegistry, subscribeUpdates);
    collection.subscribe(cb);
}
exports.subscribeAreaRegistry = subscribeAreaRegistry;
function subscribeDeviceRegistry(conn, cb) {
    const fetchDeviceRegistry = (conn) => conn.sendMessagePromise({
        type: 'config/device_registry/list',
    });
    const subscribeUpdates = (conn, store) => conn.subscribeEvents((0, lodash_1.throttle)(() => fetchDeviceRegistry(conn).then((devices) => store.setState(devices, true)), 500), 'device_registry_updated');
    const collection = (0, home_assistant_js_websocket_1.getCollection)(conn, '_devices', fetchDeviceRegistry, subscribeUpdates);
    collection.subscribe(cb);
}
exports.subscribeDeviceRegistry = subscribeDeviceRegistry;
function subscribeEntityRegistry(conn, cb) {
    const fetchEntityRegistry = (conn) => conn.sendMessagePromise({
        type: 'config/entity_registry/list',
    });
    const subscribeUpdates = (conn, store) => conn.subscribeEvents((0, lodash_1.throttle)(() => fetchEntityRegistry(conn).then((devices) => store.setState(devices, true)), 500), 'entity_registry_updated');
    const collection = (0, home_assistant_js_websocket_1.getCollection)(conn, '_entity', fetchEntityRegistry, subscribeUpdates);
    collection.subscribe(cb);
}
exports.subscribeEntityRegistry = subscribeEntityRegistry;
function subscribeEntityRegistryDisplay(conn, cb) {
    const fetchEntityRegistry = (conn) => conn.sendMessagePromise({
        type: 'config/entity_registry/list_for_display',
    });
    const subscribeUpdates = (conn, store) => conn.subscribeEvents((0, lodash_1.throttle)(() => fetchEntityRegistry(conn).then((devices) => store.setState(devices, true)), 500), 'entity_registry_updated');
    const collection = (0, home_assistant_js_websocket_1.getCollection)(conn, '_entityRegistryDisplay', fetchEntityRegistry, subscribeUpdates);
    collection.subscribe(cb);
}
exports.subscribeEntityRegistryDisplay = subscribeEntityRegistryDisplay;
