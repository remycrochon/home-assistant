{
	"home-assistant": {
		"ui": {
			"migrations": {
				"all_nodes_updated": "Home Assistant nodes have been updated. Deploy to save changes.",
				"button_cancel": "Cancel",
				"button_label": "Update Home Assistant Nodes",
				"button_ok": "Update Nodes",
				"message": "This will update all Home Assistant nodes to the current schema. This is not required for the nodes to function.\nNodes with yellow labels need to be updated before they can be edited. This can be done by either opening each node individually in the Node-RED editor or running this command.",
				"node_schema_updated": "Node schema has been updated",
				"title": "Update Home Assistant Nodes",
				"warning": "It is recommended to back up your flows before doing an update of all Home Assistant nodes."
			},
			"notifications": {
				"attention": "Attention"
			}
		},
		"error": {
			"cannot_connect": "Cannot connect to Home Assistant server",
			"connection_lost": "connection lost",
			"hass_host_required": "Base URL not set in server config",
			"integration_not_loaded": "Integration not loaded",
			"invalid_auth": "Invalid access token for WebSocket",
			"invalid_state": "Invalid state",
			"no_connection": "No connection to Home Assistant",
			"pattern_not_matched": "Pattern not matched",
			"unknown_error": "Unknown error",
			"unrecognized_error": "Unrecognized error: __error__",
			"user_not_admin": "User required to have admin privileges in Home Assistant"
		},
		"status": {
			"connected": "connected",
			"connecting": "connecting",
			"disabled": "DISABLED",
			"disconnected": "disconnected",
			"error": "error",
			"error_registering": "error registering",
			"failed": "failed",
			"jsonata_error": "JSONata error",
			"no_connection": "no connection",
			"off": "off",
			"on": "on",
			"pressed": "pressed",
			"received": "received",
			"registered": "registered",
			"running": "running",
			"sending": "sending",
			"state_change": "state change",
			"success": "success",
			"triggered": "triggered",
			"updated": "updated",
			"validation_error": "validation error"
		},
		"label": {
			"output_properties": "Output properties",
			"cancel": "Cancel",
			"filter_results_title": "Filter results",
			"no_matches_found": "No matches found",
			"done": "Done"
		}
	},
	"ha-api": {
		"label": {
			"data": "Data",
			"method": "Method",
			"method_option": {
				"get": "GET",
				"post": "POST"
			},
			"name": "Name",
			"path": "Path",
			"protocol": "Protocol",
			"protocol_option": {
				"http": "HTTP",
				"websocket": "WebSocket"
			},
			"response_type": "Return",
			"response_type_option": {
				"arraybuffer": "a binary buffer",
				"json": "a parsed JSON object",
				"text": "a UTF-8 string"
			},
			"server": "Server",
			"show_debug": "Show debug information"
		}
	},
	"ha-binary-sensor": {
		"error": {
			"api_error": "API error",
			"integration_not_loaded": "Integration not loaded/enabled",
			"invalid_state": "State must be defined",
			"no_connection": "Sensor update attempted without connection to server"
		},
		"label": {
			"attribute_key": "Attribute key",
			"attribute_value": "Value",
			"entity_config": "Entity config",
			"input_override": "Input Override",
			"input_override_option": {
				"allow": "allow",
				"block": "block",
				"merge": "merge"
			},
			"name": "Name",
			"resend": "Resend state and attributes",
			"state": "State"
		}
	},
	"ha-button": {
		"label": {
			"entity_config": "Entity Config",
			"name": "Name"
		}
	},
	"api-call-service": {
		"error": {
			"invalid_entity_id": "Invalid entity ID format"
		},
		"label": {
			"alternate_tags": "Use alternate template tags for the data field",
			"area": "Area",
			"data": "Data",
			"device": "Device",
			"domain": "Domain",
			"entity": "Entity",
			"load_example_data": "Load example data",
			"merge_context": "Merge context",
			"name": "Name",
			"queue": "Queue",
			"queue_option": {
				"queue_all": "all messages",
				"queue_first": "first message only",
				"queue_last": "last message only",
				"queue_none": "don't queue messages"
			},
			"server": "Server",
			"service": "Service",
			"show_debug": "Show debug information"
		}
	},
	"config-server": {
		"errors": {
			"empty_base_url": "Home Assistant base URL needs to be set",
			"invalid_base_url": "Invalid base URL for Home Assistant: [__url__]",
			"invalid_protocol": "Home Assistant base URL needs to begin with http:// or https://",
			"no_server_selected": "No server selected and deployed.",
			"server_deploy": "Deploy a valid server config for autocomplete to show results."
		},
		"label": {
			"accept_all_certs": "Accept Unauthorized SSL Certificates",
			"access_token": "Access token",
			"area_selector": "Area Selector",
			"base_url": "Base URL",
			"cache_autocomplete_results": "Cache autocomplete results",
			"date_option": {
				"hidden": "hidden",
				"long": "long",
				"numeric": "numeric",
				"short": "short",
				"two_digit": "2-digit"
			},
			"day": "Day",
			"delay_connection_attempts": "Delay connection attempts",
			"device_selector": "Device Selector",
			"enable_global_context_store": "Enable global context store",
			"enable_heartbeat": "Enable heartbeat",
			"entity_selector": "Entity Selector",
			"heartbeat_interval": "Heartbeat interval",
			"hour_cycle": "Hour cycle",
			"hour_cycle_option": {
				"12_hour_format": "12-hour format",
				"24_hour_format": "24-hour format",
				"default": "default"
			},
			"id_selector": "ID Selector",
			"month": "Month",
			"name": "Name",
			"seconds": "Seconds",
			"selector_option": {
				"friendly_name": "friendly name",
				"id": "id"
			},
			"separator": "Separator",
			"state_boolean_list": "State boolean",
			"status_title": "Status date format",
			"time_format": "Time format",
			"time_format_option": {
				"hour_min": "hours and minutes",
				"hour_min_sec": "hours, minutes and seconds",
				"hour_min_sec_ms": "hours, minutes, seconds and milliseconds"
			},
			"ui_settings": "UI Settings",
			"using_add_on": "Using the Home Assistant Add-on",
			"year": "Year"
		},
		"status": {
			"connected": "connected",
			"connecting": "connecting",
			"disabled": "DISABLED",
			"disconnected": "disconnected",
			"error": "error",
			"registered": "registered",
			"running": "running",
			"triggered": "triggered"
		}
	},
	"api-current-state": {
		"label": {
			"block_input_overrides": "Block Input Overrides",
			"entity_id": "Entity ID",
			"for": "For",
			"for_option": {
				"days": "days",
				"hours": "hours",
				"milliseconds": "milliseconds",
				"minutes": "minutes",
				"seconds": "seconds"
			},
			"if_state": "If State",
			"if_state_option": {
				"does_not_include": "not in",
				"greater_than": ">",
				"greater_than_or_equal_to": ">=",
				"includes": "in",
				"is": "is",
				"is_not": "is not",
				"jsonata": "JSONata",
				"less_than": "<",
				"less_than_or_equal_to": "<="
			},
			"name": "Name",
			"server": "Server",
			"state_type": "State Type",
			"state_type_option": {
				"boolean": "boolean",
				"number": "number",
				"string": "string"
			}
		}
	},
	"ha-device": {
		"label": {
			"name": "Name",
			"server": "Server",
			"type": "Type",
			"trigger": "Trigger",
			"action": "Action",
			"device": "Device",
			"seconds": "seconds",
			"minutes": "minutes",
			"hours": "hours"
		},
		"error": {
			"invalid_device_config": "Invalid config for device trigger",
			"unknown_field_type": "Unknown field type: __type__",
			"report": "Report",
			"invalid_device_type": "Invalid device type: __type__"
		},
		"ui": {
			"no_area": "No Area"
		}
	},
	"ha-device-config": {
		"label": {
			"name": "Name",
			"manufacturer": "Manufacturer",
			"model": "Model",
			"hw_version": "Hardware Version",
			"sw_version": "Software Version"
		}
	},
	"ha-entity": {
		"label": {
			"debug": "Show Debug Information",
			"input_override": "Input Override",
			"name": "Name",
			"on_state_change": "Output on state change",
			"output_location": "Output Location",
			"payload": "Payload",
			"server": "Server",
			"state": "State",
			"type": "Type"
		}
	},
	"ha-entity-config": {
		"label": {
			"device": "Device",
			"name": "Name",
			"resend": "Resend state and attributes",
			"server": "Server",
			"show_debug": "Show debug information",
			"type": "Type",
			"type_option": {
				"binary_sensor": "binary sensor",
				"button": "button",
				"number": "number",
				"select": "select",
				"sensor": "sensor",
				"switch": "switch",
				"text": "text",
				"time": "time"
			}
		},
		"data": {
			"label": {
				"device_class": "Device class",
				"device_class_options": {
					"apparent_power": "apparent power",
					"aqi": "aqi",
					"atmospheric_pressure": "atmospheric pressure",
					"battery": "battery",
					"battery_charging": "battery charging",
					"carbon_dioxide": "carbon dioxide",
					"carbon_monoxide": "carbon monoxide",
					"co": "co",
					"cold": "cold",
					"connectivity": "connectivity",
					"current": "current",
					"data_rate": "data rate",
					"data_size": "data size",
					"date": "date",
					"distance": "distance",
					"door": "door",
					"duration": "duration",
					"energy": "energy",
					"energy_storage": "energy storage",
					"frequency": "frequency",
					"garage_door": "garage door",
					"gas": "gas",
					"heat": "heat",
					"humidity": "humidity",
					"illuminance": "illuminance",
					"irradiance": "irradiance",
					"light": "light",
					"lock": "lock",
					"moisture": "moisture",
					"monetary": "monetary",
					"motion": "motion",
					"moving": "moving",
					"nitrogen_dioxide": "nitrogen dioxide",
					"nitrogen_monoxide": "nitrogen monoxide",
					"nitrous_oxide": "nitrous oxide",
					"occupancy": "occupancy",
					"opening": "opening",
					"outlet": "outlet",
					"ozone": "ozone",
					"plug": "plug",
					"pm1": "pm1",
					"pm10": "pm10",
					"pm25": "pm25",
					"power": "power",
					"power_factor": "power factor",
					"precipitation": "precipitation",
					"precipitation_intensity": "precipitation intensity",
					"presence": "presence",
					"pressure": "pressure",
					"problem": "problem",
					"reactive_power": "reactive power",
					"restart": "restart",
					"running": "running",
					"safety": "safety",
					"signal_strength": "signal strength",
					"smoke": "smoke",
					"sound": "sound",
					"sound_pressure": "sound pressure",
					"speed": "speed",
					"sulphur_dioxide": "sulfur dioxide",
					"switch": "switch",
					"tamper": "tamper",
					"temperature": "temperature",
					"timestamp": "timestamp",
					"update": "update",
					"vibration": "vibration",
					"volatile_organic_compounds": "volatile organic compounds",
					"voltage": "voltage",
					"volume": "volume",
					"volume_storage": "volume storage",
					"water": "water",
					"weight": "weight",
					"wind_speed": "wind speed",
					"window": "window"
				},
				"entity_category": "Category",
				"entity_category_options": {
					"config": "config",
					"diagnostic": "diagnostic"
				},
				"entity_picture": "Entity picture",
				"icon": "Icon",
				"last_reset": "Last reset",
				"max_length": "Max length",
				"max_value": "Max value",
				"min_length": "Min length",
				"min_value": "Min value",
				"mode": "Mode",
				"mode_options": {
					"auto": "auto",
					"box": "box",
					"password": "password",
					"slider": "slider",
					"text": "text"
				},
				"name": "Friendly name",
				"options": "Options",
				"pattern": "Pattern",
				"state_class": "State class",
				"state_class_options": {
					"measurement": "measurement",
					"total": "total",
					"total_increasing": "total increasing"
				},
				"step_value": "Step",
				"unit_of_measurement": "Unit of measurement"
			}
		}
	},
	"server-events": {
		"alert": "Alert",
		"alert_message": "Leaving Event Type empty and listening for all events may overload the WebSocket message queue.",
		"error": {
			"invalid_json": "Event data is not valid JSON"
		},
		"label": {
			"event_data": "Event data",
			"event_type": "Event type",
			"name": "Name",
			"output_only_after_running": "Output only after Home Assistant is running",
			"server": "Server"
		},
		"placeholder": {
			"all_events": "leave empty for all events"
		}
	},
	"server-state-changed": {
		"error": {
			"entity_id_required": "Entity ID is required",
			"invalid_for": "Invalid config value for 'for': \"__for__\" (type: __type__)"
		},
		"label": {
			"entity": "Entity",
			"entity_option": {
				"exact": "exact",
				"list": "list",
				"regex": "regex",
				"substring": "substring"
			},
			"for": "For",
			"for_option": {
				"days": "days",
				"hours": "hours",
				"milliseconds": "milliseconds",
				"minutes": "minutes",
				"seconds": "seconds"
			},
			"if_state": "If State",
			"if_state_option": {
				"does_not_include": "not in",
				"greater_than": ">",
				"greater_than_or_equal_to": ">=",
				"includes": "in",
				"is": "is",
				"is_not": "is not",
				"jsonata": "JSONata",
				"less_than": "<",
				"less_than_or_equal_to": "<="
			},
			"ignore_current_state_unavailable": "Current state is unavailable",
			"ignore_current_state_unknown": "Current state is unknown",
			"ignore_prev_state_null": "Previous state doesn't exist",
			"ignore_prev_state_unavailable": "Previous state is unavailable",
			"ignore_prev_state_unknown": "Previous state is unknown",
			"ignore_state_change_event_when": "Ignore state change event when:",
			"name": "Name",
			"output_on_connect": "Output on Connect",
			"output_only_on_state_change": "Current state equals previous state",
			"server": "Server",
			"state_type": "State Type",
			"state_type_option": {
				"boolean": "boolean",
				"number": "number",
				"string": "string"
			}
		}
	},
	"ha-fire-event": {
		"label": {
			"data": "Data",
			"event": "Event",
			"name": "Name",
			"server": "Server"
		}
	},
	"api-get-history": {
		"label": {
			"max_results": "Max number of results",
			"name": "Name",
			"output_location": "Output location",
			"output_type": "Output type",
			"output_type_option": {
				"array": "array",
				"count": "count",
				"random": "random",
				"split": "split"
			},
			"send_empty_results": "Send empty results",
			"server": "Server",
			"date_format": "dates must be in ISO format",
			"end_date": "End date",
			"entity_id": "Entity ID",
			"entity_id_option": {
				"includes": "includes",
				"is": "is"
			},
			"example": "example",
			"flatten_results": "Flatten results",
			"in_the_last": "In the last",
			"start_date": "Start date",
			"use_relative_time": "Use relative time"
		},
		"error": {
			"invalid_relative_time": "Invalid relative time"
		},
		"placeholder": {
			"relative_time": "20 minutes"
		}
	},
	"ha-number": {
		"error": {
			"value_not_number": "The state is not a number",
			"mode_not_supported": "Mode not supported"
		},
		"label": {
			"entity_config": "Entity config",
			"mode": "Mode",
			"mode_option": {
				"in": "listen for changes",
				"out": "set value"
			},
			"name": "Name",
			"value": "Value"
		}
	},
	"poll-state": {
		"error": {
			"entity_id_not_found": "could not find entity with entity ID: __entity_id__",
			"entity_id_required": "An entity ID is required",
			"interval_not_a_number": "Interval is not a number: __interval__"
		},
		"label": {
			"entity_id": "Entity ID",
			"if_state": "If State",
			"if_state_option": {
				"does_not_include": "not in",
				"greater_than": ">",
				"greater_than_or_equal_to": ">=",
				"includes": "in",
				"is": "is",
				"is_not": "is not",
				"jsonata": "JSONata",
				"less_than": "<",
				"less_than_or_equal_to": "<="
			},
			"name": "Name",
			"output_on_change": "Output on change",
			"output_on_connect": "Output on connect",
			"server": "Server",
			"state_type": "State Type",
			"state_type_option": {
				"boolean": "boolean",
				"number": "number",
				"string": "string"
			},
			"update_interval": "Update Interval",
			"update_interval_option": {
				"hours": "hours",
				"minutes": "minutes",
				"seconds": "seconds"
			}
		},
		"output_label": {
			"if_state_false": "if state is false",
			"if_state_true": "if state is true"
		}
	},
	"api-render-template": {
		"label": {
			"name": "Name",
			"results": "Results",
			"server": "Server",
			"template": "Template"
		}
	},
	"ha-select": {
		"error": {
			"invalid_value": "Option value does not exist in the list of options",
			"mode_not_supported": "Mode not supported"
		},
		"label": {
			"entity_config": "Entity config",
			"mode": "Mode",
			"mode_option": {
				"in": "listen for changes",
				"out": "set value"
			},
			"name": "Name",
			"value": "Value"
		}
	},
	"ha-sensor": {
		"label": {
			"entity_config": "Entity config",
			"input_override": "Input Override",
			"input_override_option": {
				"allow": "allow",
				"block": "block",
				"merge": "merge"
			},
			"name": "Name",
			"resend": "Resend state and attributes",
			"state": "State"
		}
	},
	"ha-sentence": {
		"label": {
			"name": "Name",
			"response": "Response",
			"sentences": "Sentences",
			"server": "Server"
		}
	},
	"ha-switch": {
		"label": {
			"enable_input": "Enable input",
			"entity_config": "Entity config",
			"name": "Name",
			"output_on_state_change": "Output on state change"
		}
	},
	"ha-tag": {
		"errors": {
			"no_tags_found": "No tags found in Home Assistant"
		},
		"label": {
			"all_tags": "ALL TAGS",
			"device_id": "Device ID",
			"devices": "Devices",
			"expose_as": "Expose as",
			"name": "Name",
			"server": "Server",
			"tag": "Tag",
			"tags": "Tags",
			"update_tag_list": "update tag list"
		}
	},
	"ha-text": {
		"error": {
			"mode_not_supported": "Mode not supported"
		},
		"label": {
			"entity_config": "Entity config",
			"mode": "Mode",
			"mode_option": {
				"get": "get value",
				"listen": "listen for changes",
				"set": "set value"
			},
			"name": "Name",
			"text": "Text"
		}
	},
	"ha-time": {
		"error": {
			"in_the_past": "Date is in the past: __date__",
			"invalid_date": "Invalid date: __date__",
			"invalid_jsonata_payload": "Invalid JSONata sending entity state as payload",
			"jsonata_error": "JSONata Error: __message__",
			"no_days_selected": "No days selected",
			"offset_nan": "Offset is not a number: __offset__"
		},
		"label": {
			"entity_id": "Entity ID",
			"friday": "Friday",
			"monday": "Monday",
			"name": "Name",
			"offset": "Offset",
			"offset_unit_option": {
				"hours": "hours",
				"minutes": "minutes",
				"seconds": "seconds"
			},
			"payload": "Payload",
			"property": "Property",
			"randomize_offset": "Randomize time within the offset",
			"repeat_daily": "Repeat Daily",
			"saturday": "Saturday",
			"server": "Server",
			"show_debug": "Show Debug Information",
			"sunday": "Sunday",
			"thursday": "Thursday",
			"tuesday": "Tuesday",
			"wednesday": "Wednesday"
		},
		"status": {
			"error": "Error",
			"in_the_past": "In the past",
			"invalid_date": "Invalid date",
			"invalid_property": "Invalid property",
			"next_at": "Next at __nextTime__",
			"sent": "Sent",
			"sent_and_next": "Sent at __sentTime__ Next at __nextTime__",
			"unavailable": "Unavailable"
		}
	},
	"ha-time-entity": {
		"error": {
			"invalid_format": "Time value must be in 24-hour format HH:MM[:SS]"
		},
		"label": {
			"entity_config": "Entity config",
			"mode": "Mode",
			"mode_option": {
				"get": "get value",
				"listen": "listen for changes",
				"set": "set value"
			},
			"name": "Name",
			"value": "Value"
		}
	},
	"trigger-state": {
		"error": {
			"custom_output_message_needs_to_be_object": "Custom output message needs to be an key/value object",
			"entity_id_not_found": "Entity \"__entity_id__\" not found",
			"entity_id_required": "Entity ID is required"
		},
		"label": {
			"comparator_option": {
				"does_not_include": "not in",
				"greater_than": ">",
				"greater_than_or_equal_to": ">=",
				"includes": "in",
				"is": "is",
				"is_not": "is not",
				"jsonata": "JSONata",
				"less_than": "<",
				"less_than_or_equal_to": "<="
			},
			"comparator_property_value_option": {
				"always": "always",
				"if_prev_state": "if previous state",
				"if_property": "if property",
				"if_state": "if state"
			},
			"conditions": "Conditions",
			"enable_input": "Enable input",
			"entity": "Entity",
			"entity_filter_type_option": {
				"exact": "exact",
				"list": "list",
				"regex": "regex",
				"substring": "substring"
			},
			"message_value_option": {
				"custom": "custom message",
				"custom_payload": "custom payload",
				"default": "default message"
			},
			"name": "Name",
			"output_on_connect": "Output on connect",
			"server": "Server",
			"show_debug": "Show debug information",
			"state_type": "State Type",
			"state_type_option": {
				"boolean": "boolean",
				"number": "number",
				"string": "string"
			},
			"target_type_option": {
				"current_state": "current state",
				"previous_state": "previous state",
				"property": "property"
			},
			"target_value_option": {
				"entity_id": "entity id",
				"this_entity": "this entity"
			}
		}
	},
	"ha-update-config": {
		"label": {
			"entity_config": "Entity Config",
			"name": "Name",
			"server": "Server"
		}
	},
	"ha-wait-until": {
		"label": {
			"block_input_overrides": "Block input overrides",
			"check_current_state": "Check against current state",
			"comparator_option": {
				"does_not_include": "not in",
				"greater_than": ">",
				"greater_than_or_equal_to": ">=",
				"includes": "in",
				"is": "is",
				"is_not": "is not",
				"jsonata": "JSONata",
				"less_than": "<",
				"less_than_or_equal_to": "<="
			},
			"entity": "Entity",
			"entity_filter_type_option": {
				"exact": "exact",
				"list": "list",
				"regex": "regex",
				"substring": "substring"
			},
			"name": "Name",
			"server": "Server",
			"timeout": "Timeout",
			"timeout_units_option": {
				"days": "days",
				"hours": "hours",
				"milliseconds": "milliseconds",
				"minutes": "minutes",
				"seconds": "seconds"
			},
			"wait_until": "Wait until"
		},
		"placeholder": {
			"property": "property",
			"value": "value"
		},
		"status": {
			"timed_out": "timed out",
			"true": "true",
			"waiting": "waiting"
		}
	},
	"ha-webhook": {
		"label": {
			"allowed_methods": "Allowed Methods",
			"get": "GET",
			"head": "HEAD",
			"id": "ID",
			"name": "Name",
			"post": "POST",
			"put": "PUT",
			"server": "Server"
		}
	},
	"ha-zone": {
		"label": {
			"event": "Event",
			"name": "Name",
			"option": {
				"enter": "enter",
				"enter_or_leave": "enter or leave",
				"leave": "leave"
			},
			"server": "Server"
		}
	}
}