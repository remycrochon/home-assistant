"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Comms_clientEvents, _Comms_homeAssistant, _Comms_serverId;
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("../../globals");
const homeAssistant_1 = require("../../homeAssistant");
const Websocket_1 = require("../../homeAssistant/Websocket");
const convertSetToArray = (obj) => {
    const result = {};
    Object.keys(obj).forEach((key) => {
        result[key] = Array.from(obj[key]);
    });
    return result;
};
class Comms {
    constructor(serverId, homeAssistant, clientEvents) {
        _Comms_clientEvents.set(this, void 0);
        _Comms_homeAssistant.set(this, void 0);
        _Comms_serverId.set(this, void 0);
        __classPrivateFieldSet(this, _Comms_clientEvents, clientEvents, "f");
        __classPrivateFieldSet(this, _Comms_homeAssistant, homeAssistant, "f");
        __classPrivateFieldSet(this, _Comms_serverId, serverId, "f");
        this.startListeners();
    }
    startListeners() {
        __classPrivateFieldGet(this, _Comms_clientEvents, "f").addListeners(this, [
            [homeAssistant_1.HaEvent.ServicesUpdated, this.onServicesUpdated],
            [Websocket_1.ClientEvent.StatesLoaded, this.onStatesLoaded],
            ['ha_events:state_changed', this.onStateChanged],
            [Websocket_1.ClientEvent.Integration, this.onIntegrationEvent],
            [homeAssistant_1.HaEvent.AreaRegistryUpdated, this.onAreaRegistryUpdate],
            [homeAssistant_1.HaEvent.DeviceRegistryUpdated, this.onDeviceRegistryUpdate],
            [homeAssistant_1.HaEvent.RegistryUpdated, this.onRegistryUpdate],
        ]);
    }
    publish(type, data, retain = true) {
        globals_1.RED.comms.publish(`homeassistant/${type}/${__classPrivateFieldGet(this, _Comms_serverId, "f")}`, data, retain);
    }
    onAreaRegistryUpdate(areas) {
        this.publish('areas', areas);
    }
    onDeviceRegistryUpdate(devices) {
        this.publish('devices', devices);
    }
    onRegistryUpdate({ devices, entities, }) {
        const areaDomains = {};
        const deviceDomains = {};
        entities.forEach((entity) => {
            if (entity.area_id) {
                if (!(entity.area_id in areaDomains)) {
                    areaDomains[entity.area_id] = new Set();
                }
                areaDomains[entity.area_id].add(entity.entity_id.split('.')[0]);
            }
            if (entity.device_id) {
                if (!(entity.device_id in deviceDomains)) {
                    deviceDomains[entity.device_id] = new Set();
                }
                deviceDomains[entity.device_id].add(entity.entity_id.split('.')[0]);
            }
        });
        devices.forEach((device) => {
            var _a;
            if (device.area_id) {
                if (!(device.area_id in areaDomains)) {
                    areaDomains[device.area_id] = new Set();
                }
                areaDomains[device.area_id] = new Set([
                    ...areaDomains[device.area_id],
                    ...((_a = deviceDomains[device.id]) !== null && _a !== void 0 ? _a : []),
                ]);
            }
        });
        this.publish('targetDomains', {
            areas: convertSetToArray(areaDomains),
            devices: convertSetToArray(deviceDomains),
        });
    }
    onIntegrationEvent(eventType) {
        this.publish('integration', {
            event: eventType,
            version: __classPrivateFieldGet(this, _Comms_homeAssistant, "f").integrationVersion,
        });
    }
    onServicesUpdated(services) {
        this.publish('services', services);
    }
    onStateChanged(event) {
        const entity = event.event.new_state;
        if (entity) {
            this.publish('entity', entity);
        }
    }
    onStatesLoaded(entities) {
        this.publish('entities', entities);
    }
}
_Comms_clientEvents = new WeakMap(), _Comms_homeAssistant = new WeakMap(), _Comms_serverId = new WeakMap();
exports.default = Comms;
