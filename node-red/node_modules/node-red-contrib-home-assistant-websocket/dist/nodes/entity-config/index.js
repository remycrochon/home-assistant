"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ClientEvents_1 = __importDefault(require("../../common/events/ClientEvents"));
const BidirectionalEntityIntegration_1 = __importDefault(require("../../common/integration/BidirectionalEntityIntegration"));
const UnidirectionalEntityIntegration_1 = __importDefault(require("../../common/integration/UnidirectionalEntityIntegration"));
const ValueEntityIntegration_1 = __importDefault(require("../../common/integration/ValueEntityIntegration"));
const State_1 = __importDefault(require("../../common/State"));
const const_1 = require("../../const");
const globals_1 = require("../../globals");
const migrate_1 = require("../../helpers/migrate");
const node_1 = require("../../helpers/node");
const homeAssistant_1 = require("../../homeAssistant");
function entityConfigNode(config) {
    globals_1.RED.nodes.createNode(this, config);
    this.config = (0, migrate_1.migrate)(config);
    const serverConfigNode = (0, node_1.getServerConfigNode)(this.config.server);
    const homeAssistant = (0, homeAssistant_1.getHomeAssistant)(serverConfigNode);
    const clientEvents = new ClientEvents_1.default({
        node: this,
        emitter: homeAssistant.eventBus,
    });
    const deviceConfigNode = (0, node_1.getNode)(this.config.deviceConfig);
    this.state = new State_1.default(this);
    const props = {
        clientEvents,
        deviceConfigNode,
        entityConfigNode: this,
        homeAssistant,
        state: this.state,
    };
    switch (this.config.entityType) {
        case const_1.EntityType.BinarySensor:
        case const_1.EntityType.Sensor: {
            this.integration = new UnidirectionalEntityIntegration_1.default(props);
            break;
        }
        case const_1.EntityType.Button:
        case const_1.EntityType.Switch: {
            this.integration = new BidirectionalEntityIntegration_1.default(props);
            break;
        }
        case const_1.EntityType.Number:
        case const_1.EntityType.Select:
        case const_1.EntityType.Text:
        case const_1.EntityType.Time: {
            this.integration = new ValueEntityIntegration_1.default(props);
            break;
        }
        default:
            throw new Error(`Unknown entity type: ${this.config.entityType}`);
    }
    this.integration.init();
}
exports.default = entityConfigNode;
