"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startListeners = void 0;
const inputErrorHandler_1 = require("../../common/errors/inputErrorHandler");
const helpers_1 = require("../trigger-state/helpers");
function startListeners(clientEvents, controller, homeAssistant, node, status) {
    let eventTopic = `ha_events:state_changed`;
    if (node.config.entityIdType === 'exact') {
        eventTopic =
            eventTopic = `ha_events:state_changed:${node.config.entityId}`;
    }
    clientEvents.addListener(eventTopic, controller.onHaEventsStateChanged.bind(controller));
    if (node.config.outputInitially) {
        const generateStateChanges = async () => {
            const events = (0, helpers_1.createStateChangeEvents)(homeAssistant);
            for (const event of events) {
                await controller
                    .onHaEventsStateChanged(event, true)
                    .catch((e) => {
                    const { error, statusMessage } = (0, inputErrorHandler_1.getErrorData)(e);
                    status.setError(statusMessage);
                    node.error(error);
                });
            }
        };
        // Here for when the node is deploy without the server config being deployed
        if (homeAssistant.isHomeAssistantRunning) {
            generateStateChanges();
        }
        else {
            clientEvents.addListener('ha_client:initial_connection_ready', generateStateChanges);
        }
    }
}
exports.startListeners = startListeners;
