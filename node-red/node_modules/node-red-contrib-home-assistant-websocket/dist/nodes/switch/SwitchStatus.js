"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SwitchStatus_instances, _SwitchStatus_entityConfigNode, _SwitchStatus_isSwitchOn_get;
Object.defineProperty(exports, "__esModule", { value: true });
const Events_1 = require("../../common/events/Events");
const Status_1 = __importStar(require("../../common/status/Status"));
class SwitchStatus extends Status_1.default {
    constructor(props) {
        super(props);
        _SwitchStatus_instances.add(this);
        _SwitchStatus_entityConfigNode.set(this, void 0);
        __classPrivateFieldSet(this, _SwitchStatus_entityConfigNode, props.entityConfigNode, "f");
        props.entityConfigEvents.addListener(Events_1.NodeEvent.StateChanged, this.onNodeStateChange.bind(this));
    }
    set({ fill = Status_1.StatusColor.Yellow, shape = Status_1.StatusShape.Dot, text = '', } = {}) {
        const status = {
            fill,
            shape,
            text,
        };
        super.set(status);
    }
    onNodeStateChange() {
        const status = {
            fill: Status_1.StatusColor.Yellow,
            shape: __classPrivateFieldGet(this, _SwitchStatus_instances, "a", _SwitchStatus_isSwitchOn_get) ? Status_1.StatusShape.Dot : Status_1.StatusShape.Ring,
            text: __classPrivateFieldGet(this, _SwitchStatus_instances, "a", _SwitchStatus_isSwitchOn_get)
                ? 'home-assistant.status.on'
                : 'home-assistant.status.off',
        };
        if (this.node.config.outputOnStateChange) {
            status.fill = Status_1.StatusColor.Blue;
            status.text = 'home-assistant.status.state_change';
        }
        status.text = this.translateText(status.text);
        this.updateStatus(status);
    }
    // Overload the default updateStatus() method because there is no need to show disabled status
    updateStatus(status) {
        this.node.status(status);
    }
}
_SwitchStatus_entityConfigNode = new WeakMap(), _SwitchStatus_instances = new WeakSet(), _SwitchStatus_isSwitchOn_get = function _SwitchStatus_isSwitchOn_get() {
    return __classPrivateFieldGet(this, _SwitchStatus_entityConfigNode, "f").state.isEnabled();
};
exports.default = SwitchStatus;
