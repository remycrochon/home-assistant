"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _TriggerStateStatus_state;
Object.defineProperty(exports, "__esModule", { value: true });
const EventStatus_1 = __importDefault(require("../../common/status/EventStatus"));
const homeAssistant_1 = require("../../homeAssistant");
// trigger-state node can be enabled/disabled without being exposed to HA
// a custom status is needed to handle this
class TriggerStateStatus extends EventStatus_1.default {
    constructor(props) {
        super(props);
        _TriggerStateStatus_state.set(this, void 0);
        __classPrivateFieldSet(this, _TriggerStateStatus_state, props.state, "f");
        props.events.addListener(homeAssistant_1.HaEvent.StateChanged, this.onStateChange.bind(this));
    }
    get isExposeAsEnabled() {
        if (this.exposeAsEntityConfigNode) {
            return this.exposeAsEntityConfigNode.state.isEnabled();
        }
        return __classPrivateFieldGet(this, _TriggerStateStatus_state, "f").isEnabled();
    }
}
_TriggerStateStatus_state = new WeakMap();
exports.default = TriggerStateStatus;
