"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const joi_1 = __importDefault(require("joi"));
const helpers_1 = require("../../common/controllers/helpers");
const ConfigError_1 = __importDefault(require("../../common/errors/ConfigError"));
const inputErrorHandler_1 = require("../../common/errors/inputErrorHandler");
const ClientEvents_1 = __importDefault(require("../../common/events/ClientEvents"));
const Events_1 = __importDefault(require("../../common/events/Events"));
const ComparatorService_1 = __importDefault(require("../../common/services/ComparatorService"));
const InputService_1 = __importDefault(require("../../common/services/InputService"));
const State_1 = __importDefault(require("../../common/State"));
const EventStatus_1 = __importDefault(require("../../common/status/EventStatus"));
const TransformState_1 = __importDefault(require("../../common/TransformState"));
const const_1 = require("../../const");
const globals_1 = require("../../globals");
const migrate_1 = require("../../helpers/migrate");
const node_1 = require("../../helpers/node");
const homeAssistant_1 = require("../../homeAssistant");
const const_2 = require("./const");
const helpers_2 = require("./helpers");
const TriggerStateController_1 = __importDefault(require("./TriggerStateController"));
const TriggerStateStatus_1 = __importDefault(require("./TriggerStateStatus"));
const testingSchema = joi_1.default.object({
    payload: joi_1.default.object({
        entity_id: joi_1.default.string().required(),
        old_state: joi_1.default.object({
            state: joi_1.default.string().required(),
        }).unknown(true),
        new_state: joi_1.default.object({
            state: joi_1.default.string().required(),
        }).unknown(true),
    }),
}).unknown(true);
const enableSchema = joi_1.default.object({
    payload: joi_1.default.string().valid(const_2.ENABLE, const_2.DISABLE),
}).unknown(true);
function triggerState(config) {
    globals_1.RED.nodes.createNode(this, config);
    this.config = (0, migrate_1.migrate)(config);
    if (!this.config.entityId) {
        throw new ConfigError_1.default('trigger-state.error.enttity_id_required');
    }
    const serverConfigNode = (0, node_1.getServerConfigNode)(this.config.server);
    const homeAssistant = (0, homeAssistant_1.getHomeAssistant)(serverConfigNode);
    const exposeAsConfigNode = (0, node_1.getExposeAsConfigNode)(this.config.exposeAsEntityConfig);
    const clientEvents = new ClientEvents_1.default({
        node: this,
        emitter: homeAssistant.eventBus,
    });
    let status;
    let state;
    if (exposeAsConfigNode) {
        status = new EventStatus_1.default({
            clientEvents,
            config: serverConfigNode.config,
            exposeAsEntityConfigNode: exposeAsConfigNode,
            node: this,
        });
    }
    else {
        // create a state to track the enabled state of the node
        // only needed if the node is not exposed to HA
        const events = new Events_1.default({
            node: this,
            emitter: this,
        });
        state = new State_1.default(this);
        status = new TriggerStateStatus_1.default({
            clientEvents,
            config: serverConfigNode.config,
            events,
            exposeAsEntityConfigNode: exposeAsConfigNode,
            node: this,
            state,
        });
    }
    clientEvents.setStatus(status);
    exposeAsConfigNode === null || exposeAsConfigNode === void 0 ? void 0 : exposeAsConfigNode.integration.setStatus(status);
    const controllerDeps = (0, helpers_1.createControllerDependencies)(this, homeAssistant);
    const transformState = new TransformState_1.default(serverConfigNode.config.ha_boolean);
    const comparatorService = new ComparatorService_1.default({
        nodeRedContextService: controllerDeps.nodeRedContextService,
        homeAssistant,
        jsonataService: controllerDeps.jsonataService,
        transformState,
    });
    const inputService = new InputService_1.default({
        nodeConfig: this.config,
    });
    const controller = new TriggerStateController_1.default({
        comparatorService,
        inputService,
        node: this,
        state,
        status,
        transformState,
        ...controllerDeps,
    });
    controller.setExposeAsConfigNode(exposeAsConfigNode);
    // register custom inputs if inputs are enabled
    if (this.config.enableInput) {
        controller.addOptionalInput('enable', enableSchema, controller.onInputEnabled.bind(controller));
        controller.addOptionalInput('testing', testingSchema, controller.onInputTesting.bind(controller));
    }
    let eventTopic = 'ha_events:state_changed';
    // If the entity id type is exact, then we need to listen to a specific entity
    if (this.config.entityIdType === const_1.EntityFilterType.Exact) {
        const id = Array.isArray(this.config.entityId)
            ? this.config.entityId[0]
            : this.config.entityId;
        eventTopic = `${eventTopic}:${id.trim()}`;
    }
    clientEvents.addListener(eventTopic, controller.onEntityStateChanged.bind(controller));
    if (controller.isEnabled && this.config.outputInitially) {
        const generateStateChanges = async () => {
            const events = (0, helpers_2.createStateChangeEvents)(homeAssistant);
            for (const event of events) {
                await controller.onEntityStateChanged(event).catch((e) => {
                    const { error, statusMessage } = (0, inputErrorHandler_1.getErrorData)(e);
                    status.setError(statusMessage);
                    this.error(error);
                });
            }
        };
        // Here for when the node is deploy without the server config being deployed
        if (homeAssistant.isHomeAssistantRunning) {
            generateStateChanges();
        }
        else {
            clientEvents.addListener('ha_client:initial_connection_ready', generateStateChanges);
        }
    }
}
exports.default = triggerState;
