"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const joi_1 = __importDefault(require("joi"));
const helpers_1 = require("../../common/controllers/helpers");
const ClientEvents_1 = __importDefault(require("../../common/events/ClientEvents"));
const ComparatorService_1 = __importDefault(require("../../common/services/ComparatorService"));
const InputService_1 = __importDefault(require("../../common/services/InputService"));
const Status_1 = __importDefault(require("../../common/status/Status"));
const TransformState_1 = __importDefault(require("../../common/TransformState"));
const const_1 = require("../../const");
const globals_1 = require("../../globals");
const migrate_1 = require("../../helpers/migrate");
const node_1 = require("../../helpers/node");
const homeAssistant_1 = require("../../homeAssistant");
const WaitUntilController_1 = __importDefault(require("./WaitUntilController"));
const inputs = {
    entityId: {
        messageProp: ['payload.entity_id', 'payload.entityId'],
        configProp: 'entityId',
    },
    entityIdFilterType: {
        messageProp: 'payload.entityIdFilterType',
        configProp: 'entityIdFilterType',
        default: 'exact',
    },
    property: {
        messageProp: 'payload.property',
        configProp: 'property',
    },
    comparator: {
        messageProp: 'payload.comparator',
        configProp: 'comparator',
    },
    value: {
        messageProp: 'payload.value',
        configProp: 'value',
    },
    valueType: {
        messageProp: 'payload.valueType',
        configProp: 'valueType',
    },
    timeout: {
        messageProp: 'payload.timeout',
        configProp: 'timeout',
    },
    timeoutUnits: {
        messageProp: 'payload.timeoutUnits',
        configProp: 'timeoutUnits',
    },
    checkCurrentState: {
        messageProp: 'payload.checkCurrentState',
        configProp: 'checkCurrentState',
    },
};
const defaultInputSchema = joi_1.default.object({
    entityId: joi_1.default.alternatives().try(joi_1.default.array().items(joi_1.default.string()), joi_1.default.string(), joi_1.default.object().instance(RegExp)),
    entityIdFilterType: joi_1.default.string().valid(...Object.values(const_1.EntityFilterType)),
    property: joi_1.default.string(),
    comparator: joi_1.default.string().valid(...Object.values(const_1.ComparatorType)),
    value: joi_1.default.alternatives().try(joi_1.default.string(), joi_1.default.number()),
    valueType: joi_1.default.string(),
    timeout: joi_1.default.alternatives()
        .try(joi_1.default.string(), joi_1.default.number())
        .allow('')
        .default('0'),
    timeoutUnits: joi_1.default.string().valid(...Object.values(const_1.TimeUnit)),
    checkCurrentState: joi_1.default.boolean(),
});
function waitUntilNode(config) {
    globals_1.RED.nodes.createNode(this, config);
    this.config = (0, migrate_1.migrate)(config);
    const serverConfigNode = (0, node_1.getServerConfigNode)(this.config.server);
    const homeAssistant = (0, homeAssistant_1.getHomeAssistant)(serverConfigNode);
    const clientEvents = new ClientEvents_1.default({
        node: this,
        emitter: homeAssistant.eventBus,
    });
    const status = new Status_1.default({
        config: serverConfigNode.config,
        node: this,
    });
    clientEvents.setStatus(status);
    const inputService = new InputService_1.default({
        inputs,
        nodeConfig: this.config,
        schema: defaultInputSchema,
    });
    if (this.config.blockInputOverrides) {
        inputService.disableInputOverrides();
    }
    const controllerDeps = (0, helpers_1.createControllerDependencies)(this, homeAssistant);
    const transformState = new TransformState_1.default(serverConfigNode.config.ha_boolean);
    const comparatorService = new ComparatorService_1.default({
        nodeRedContextService: controllerDeps.nodeRedContextService,
        homeAssistant,
        jsonataService: controllerDeps.jsonataService,
        transformState,
    });
    // eslint-disable-next-line no-new
    new WaitUntilController_1.default({
        comparatorService,
        clientEvents,
        inputService,
        node: this,
        status,
        ...controllerDeps,
    });
}
exports.default = waitUntilNode;
