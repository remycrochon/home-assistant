"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("../../common/controllers/helpers");
const ClientEvents_1 = __importDefault(require("../../common/events/ClientEvents"));
const Events_1 = __importDefault(require("../../common/events/Events"));
const Integration_1 = require("../../common/integration/Integration");
const State_1 = __importDefault(require("../../common/State"));
const Status_1 = __importDefault(require("../../common/status/Status"));
const globals_1 = require("../../globals");
const migrate_1 = require("../../helpers/migrate");
const node_1 = require("../../helpers/node");
const homeAssistant_1 = require("../../homeAssistant");
const WebhookController_1 = __importDefault(require("./WebhookController"));
const WebhookIntegration_1 = __importDefault(require("./WebhookIntegration"));
function webhookNode(config) {
    globals_1.RED.nodes.createNode(this, config);
    this.config = (0, migrate_1.migrate)(config);
    const serverConfigNode = (0, node_1.getServerConfigNode)(this.config.server);
    const homeAssistant = (0, homeAssistant_1.getHomeAssistant)(serverConfigNode);
    const exposeAsConfigNode = (0, node_1.getExposeAsConfigNode)(this.config.exposeAsEntityConfig);
    const clientEvents = new ClientEvents_1.default({
        node: this,
        emitter: homeAssistant.eventBus,
    });
    const nodeEvents = new Events_1.default({ node: this, emitter: this });
    const state = new State_1.default(this);
    const status = new Status_1.default({
        config: serverConfigNode.config,
        exposeAsEntityConfigNode: exposeAsConfigNode,
        node: this,
    });
    nodeEvents.setStatus(status);
    exposeAsConfigNode === null || exposeAsConfigNode === void 0 ? void 0 : exposeAsConfigNode.integration.setStatus(status);
    const controllerDeps = (0, helpers_1.createControllerDependencies)(this, homeAssistant);
    const integration = new WebhookIntegration_1.default({
        node: this,
        clientEvents,
        homeAssistant,
        state,
    });
    integration.setStatus(status);
    const controller = new WebhookController_1.default({
        node: this,
        status,
        ...controllerDeps,
    });
    controller.setExposeAsConfigNode(exposeAsConfigNode);
    nodeEvents.addListener(Integration_1.IntegrationEvent.Trigger, controller.onReceivedMessage.bind(controller));
    integration.init();
}
exports.default = webhookNode;
