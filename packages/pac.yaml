####################################################
#                                                  #
#                      PAC                         #
#                                                  #
####################################################

utility_meter:
  energy_pac1_usage_daily:
    source: sensor.energy_pac_p_kw
    cycle: daily
    tariffs:
      - hp
      - hc

  energy_pac1_usage_weekly:
    source: sensor.energy_pac_p_kw
    cycle: weekly
    tariffs:
      - hp
      - hc

  energy_pac1_usage_monthly:
    source: sensor.energy_pac_p_kw
    cycle: monthly
    tariffs:
      - hp
      - hc

  energy_pac1_usage_yearly:
    source: sensor.energy_pac_p_kw
    cycle: yearly
    tariffs:
      - hp
      - hc

# Configuration du thermostat générique HA
# https://www.home-assistant.io/integrations/generic_thermostat/

climate:
  - platform: generic_thermostat
    name: Altherma
    heater: switch.altherma # organe de commande
    target_sensor: sensor.temperature_salon_zb # Capteur de température
#    target_sensor: sensor.espaltherma_temp_ambiante_int_r1t
    min_temp: 15 # Définit le point de consigne minimum disponible.
    max_temp: 25 # Définit le point de consigne maximum disponible.
    cold_tolerance: 0.3 # Marche Chauffe si: T°<Consigne-cette valeur
    hot_tolerance: 0 # Arret Chauffe si: T°>Consigne+cette valeur
#    min_cycle_duration:
#      minutes: 30
    away_temp: 15 # Réglez la température utilisée par preset_mode: Absent
    comfort_temp: 23
    sleep_temp: 19 # Nuit
    activity_temp: 20
    home_temp: 20.5 # Jour
    precision: 0.1 # Précision souhaitée pour cet appareil. 0.1/0.5/1.0
    initial_hvac_mode: "heat" # Ou heat
    ac_mode: false
    keep_alive:  # Mise à jour de l'ordre de commande toutes les 5mn
      minutes: 5

# 
template:
# Consommation journalière HP + HC - addition des utility meter
  - sensor:
    - name: "Energie PAC Jour"
      unique_id: "energy_pac1_daily"
      state: >-
        {% set p = states('sensor.energy_pac1_usage_daily_hp') | float(default=0) | round(3) %}
        {% set o = states('sensor.energy_pac1_usage_daily_hc') | float(default=0) | round(3) %}
        {{ (o + p) | round(3) }}
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total"  

    - name: "energy_pac1_weekly"
      state: >-
        {% set p = states('sensor.energy_pac1_usage_weekly_hp') | float(default=0) | round(3) %}
        {% set o = states('sensor.energy_pac1_usage_weekly_hc') | float(default=0) | round(3) %}
        {{ (o + p) | round(3) }}
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total"  

    - name: "energy_pac1_monthly"
      state: >-
        {% set p = states('sensor.energy_pac1_usage_monthly_hp') | float(default=0) | round(2) %}
        {% set o = states('sensor.energy_pac1_usage_monthly_hc') | float(default=0) | round(2) %}
        {{ (o + p) | round(2) }}
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total"  

    - name: "energy_pac1_yearly"
      state: >-
        {% set p = states('sensor.energy_pac1_usage_yearly_hp') | float(default=0) | round(2) %}
        {% set o = states('sensor.energy_pac1_usage_yearly_hc') | float(default=0) | round(2) %}
        {{ (o + p) | round(2) }}
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total"  
# Conversion de la trame JSON MQTT en template
# Numero correspond au numero de ligne du fichier pac_attributs.txt
    # L27
    - name: "espaltherma_mode_fonctionnement"
      unique_id: "espaltherma_mode_fonctionnement"
      state: >-
        {{ state_attr('sensor.althermasensors','Mode de fonctionnement') }}

    # L28
    - name: "espaltherma_thermostat"
      unique_id: "espaltherma_thermostat"
      state: >-
        {{ state_attr('sensor.althermasensors','Thermostat ON/OFF') }}

    # L39
    - name: "espaltherma_temp_cible"
      unique_id: "espaltherma_temp_cible"
      state: >-
        {{ state_attr('sensor.althermasensors','Temp. cond. cible')|round(2,default=0) }}
      unit_of_measurement: '°C'
      device_class: "temperature"
      state_class: "measurement"

    # L154
    - name: "espaltherma_temp_ambiante_int_r1t"
      unique_id: "espaltherma_temp_ambiante_int_r1t"
      state: >-
        {{ state_attr('sensor.althermasensors','Temp. ambiante intérieure (R1T)') }}
      unit_of_measurement: '°C'
      state_class: "measurement"
      device_class: "temperature"

    # L152
    - name: "espaltherma_temp_eau_retour_rt4"
      unique_id: "espaltherma_temp_eau_retour_rt4"
      state: >-
        {{ state_attr('sensor.althermasensors','Temp. d eau d entrée (R4T)') }}
      unit_of_measurement: '°C'
      state_class: "measurement"
      device_class: "temperature"


    # L149
    - name: "espaltherma_temp_eau_depart_echangeur_plaque"
      unique_id: "espaltherma_temp_eau_depart_echangeur_plaque"
      state: >-
        {{ state_attr('sensor.althermasensors','Laisser temp. eau avant BUH (R1T)') }}
      unit_of_measurement: '°C'
      state_class: "measurement"
      device_class: "temperature"

    # L150
    - name: "espaltherma_temp_eau_depart"
      unique_id: "espaltherma_temp_eau_depart"
      state: >-
        {{ state_attr('sensor.althermasensors','Laisser temp. eau après BUH (R2T)') }}
      unit_of_measurement: '°C'
      state_class: "measurement"
      device_class: "temperature"

    # L59
    - name: "espaltherma_temp_air_ext_r1t"
      unique_id: "espaltherma_temp_air_ext_r1t"
      state: >-
        {{ state_attr('sensor.althermasensors','Temp. d air extérieur(R1T)') }}
      unit_of_measurement: '°C'
      state_class: "measurement"
      device_class: "temperature"

    # L60
    - name: "espaltherma_temp_air_ext_r6t"
      unique_id: "espaltherma_temp_air_ext_r6t"
      state: >-
        {{ state_attr('sensor.althermasensors','Capteur ext. de temp. ambiante intérieure (R6T)') }}
      unit_of_measurement: '°C'
      state_class: "measurement"
      device_class: "temperature"

    # L151
    - name: "espaltherma_temp_liquid_r3t"
      unique_id: "espaltherma_temp_liquid_r3t"
      state: >-
        {{ state_attr('sensor.althermasensors','Temp. réfrig. côté liquide (R3T)') }}
      unit_of_measurement: '°C'
      state_class: "measurement"
      device_class: "temperature"

    # L184
    - name: "espaltherma_capteur_debit"
      unique_id: "espaltherma_capteur_debit"
      state: >-
        {{ state_attr('sensor.althermasensors','Capteur de débit (l/min)') }}
      unit_of_measurement: 'l/min'
      state_class: "measurement"
      device_class: "pressure"

    # L69
    - name: "espaltherma_courant_primaire"
      unique_id: "espaltherma_courant_primaire"
      state: >-
        {{ state_attr('sensor.althermasensors','Courant primaire INV (A)') }}
      unit_of_measurement: 'A'
      state_class: "measurement"
      device_class: "current"

    # L186
    - name: "espaltherma_signal_ppe_eau"
      unique_id: "espaltherma_signal_ppe_eau"
      state: >-
        {{ 100-state_attr('sensor.althermasensors','Signal de pompe à eau (0:max-100:arrêt)')|int(default=0) }}
      unit_of_measurement: '%'
      state_class: "measurement"
      device_class: "signal_strength"

    # L66
    - name: "espaltherma_pression"
      unique_id: "espaltherma_pression"
      state: >-
        {{ state_attr('sensor.althermasensors','Capteur de pression') }}
      unit_of_measurement: 'bars'
      state_class: "measurement"
      device_class: "pressure"

# Extraction des atributs climate.althermat
    # Consigne Chauffage
    - name: "pac_consigne_int"
      unique_id: "pac_consigne_interieure"
      state: >-
        {{ state_attr('climate.altherma','temperature') }}
      unit_of_measurement: '°C'
      state_class: "measurement"
      device_class: "temperature"


# Calcul du COP
    - name: "espaltherma_cop"
      unique_id: "espaltherma_cop"
      unit_of_measurement : 'COP'
      state: >-
        {% set a = states('sensor.espaltherma_capteur_debit') | float(default=0) %}
        {% set b = states('sensor.espaltherma_temp_eau_depart_echangeur_plaque') | float(default=0) %}
        {% set c = states('sensor.espaltherma_temp_eau_retour_rt4') | float(default=0) %}
        {% set d = states('sensor.espaltherma_courant_primaire') | float(default=0) %}
        {% set e = states('sensor.linky_umoy') | float(default=0) %}
        {% if is_state("sensor.espaltherma_mode_fonctionnement", "Heating")
          and (states('sensor.espaltherma_courant_primaire')|float(default=0) > 0) %}
          {% set cop=((a*0.06*1.16)*(b-c)/(d*e/1000))| float(default=0) | round(2) %}
          {% if (cop>=0) and (cop<10) %}
            {{ cop }}
          {%else%}
            0
          {%endif%}
        {%else%}
          0
        {%endif%}

# Calcul Température de départ
    - name: "espaltherma_temp_dep_calculee"
      unique_id: "espaltherma_temp_dep_calculee"
      state: >-
        {% set p102=37 %}
        {% set p103=25 %}
        {% set p100=-10 %}
        {% set p101=20 %}
        {% set a=(p102-p103)/(p100-p101) | float(default=0) %}
        {% set b=p103-a*p101 | float %}
        {% set t = states('sensor.espaltherma_temp_air_ext_r1t') | float(default=0) %}
        {% if t<= p100 %}
          {{ p100 }}
        {%else%}
          {% if t>= p101 %}
            {{ p101 }}
          {%else%}
            {{ (a*t)+b | float(default=0) |round(2)}}
          {%endif%}
        {%endif%}
      unit_of_measurement: '°C'
      state_class: "measurement"
      device_class: "temperature"

      
mqtt:
  sensor:
    - name: "ESP_altherma status"
      state_topic: "espaltherma/LWT"

# 
input_boolean:
  thermostat_pac:
    name: thermostat_pac
    initial: true

