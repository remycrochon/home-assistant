####################################################
#                                                  #
#                   PISCINE                        #
#                                                  #
####################################################

utility_meter:
# usage jour  
  energy_pisc_usage_daily:
    source: sensor.pzem_pisc_energy
    cycle: daily
    tariffs:
      - hp
      - hc
# usage semaine
  energy_pisc_usage_weekly:
    source: sensor.pzem_pisc_energy
    cycle: weekly
    tariffs:
      - hp
      - hc
# usage mois
  energy_pisc_usage_monthly:
    source: sensor.pzem_pisc_energy
    cycle: monthly
    tariffs:
      - hp
      - hc
#usage an
  energy_pisc_usage_yearly:
    source: sensor.pzem_pisc_energy
    cycle: yearly
    tariffs:
      - hp
      - hc
input_number:
  # utilisé pour simuler la température de l'eau pendant les tests
  temp_piscine:
    name: Temp Eau Simul
    min: -2
    max: 35
    unit_of_measurement: °C
    icon: mdi:thermometer

# temperature de l'eau avant arret ppe
  mem_temp_piscine:
    name: Temp Eau avant arret
    min: -5
    max: 50
    unit_of_measurement: °C
    step: 0.1
    icon: mdi:thermometer
    mode: box

# temperature de l'eau avant arret ppe
  test_mem_temp_piscine:
    name: Temp Eau avant arret Test
    min: -5
    max: 50
    unit_of_measurement: °C
    step: 0.1
    icon: mdi:thermometer
    mode: box

# tempo avant prise en compte de la température de l'eau suite à demarrage marche pompe
  tempo_circulation_eau:
    name: Tempo Circulation Eau
    min: 0
    max: 3600
    unit_of_measurement: s
    step: 0.1
    icon: mdi:timer
    mode: box

# temps utilisation cartouche chlore
  temps_cartouche_chlore:
    name: Temps cartouche Chlore
    min: 0
    max: 3600
    unit_of_measurement: h
    step: 0.1
    icon: mdi:clock
    mode: box

# Seuil 1 inferieur temperature Hors gel
  hors_gel_inf_seuil1:
    name: Temp Inf Hors-Gel Seuil 1
    min: -5
    max: 0
    unit_of_measurement: °C
    icon: mdi:thermometer
# Seuil 2 inferieur temperature Hors gel
  hors_gel_inf_seuil2:
    name: Temp Inf Hors-Gel Seuil 2
    min: -10
    max: 0
    unit_of_measurement: °C
    icon: mdi:thermometer

# Durée de filtration max en hiver
  duree_filtration_max_mode_hiver:
    name: Durée filtration en Hiver
    min: 0
    max: 15
    unit_of_measurement: h
    step: 0.1
    icon: mdi:clock
    mode: box

# Durée de filtration max en hiver
  filtration_coeff_abaque:
    name: Coeff filtration Piscine Abaque
    min: 60
    max: 140
    unit_of_measurement: "%"
    step: 1.0
    icon: mdi:percent
    mode: box

input_datetime:
  heure_pivot_pisc:
    name: Heure Pivot
    has_date: false
    has_time: true

  heure_ouv_volet_pisc:
    name: Heure Ouv Volet Auto
    has_date: false
    has_time: true

  heure_ferm_volet_pisc:
    name: Heure Ferm Volet Auto
    has_date: false
    has_time: true

  heure_ma_pump_pisc_hiv:
    name: Heure Ma Pompe Pisc Hiv
    has_date: false
    has_time: true

input_boolean:
  # EV appoint Piscine en mode automatique
  piscine_arret_force:
    name: Piscine Arret Forcé
    icon: mdi:head-snowflake

  # EV appoint Piscine en mode automatique
  ev_eau_piscine:
    name: Ev Piscine
    icon: mdi:water
  
  # Volet Piscine en mode automatique
  volet_piscine_auto:
    name: Volet Piscine (Auto=1)
    icon: mdi:garage

  #cde eclairage piscine
  eclairage_piscine:
    name: Eclairage piscine
    icon: mdi:car-light-high

  # Calcul du hors gel- Mémoire de mise en hors gel
  hors_gel_valid:
    name: Valid Hors Gel Piscine (si=1)
    icon: mdi:snowflake-alert

  # Calcul du temps de filtration selon Abaque Abacus sinon mode classique
  calcul_mode_abaque:
    name: Cacul mode Abaque (si=1)
    icon: mdi:chart-bar

# selection du mode de fonctionnement de la filtration
input_select:

  mode_fonctionnement_piscine:
    name: Mode Fonct Piscine
    options:
      - "Ete"
      - "Hiver"
      - "Ma F"
      - "At F"
    icon: mdi:pool
# sert aux tests AppDaemon
  mode_fonctionnement_piscine_test:
    name: Mode Fonct Piscine
    options:
      - "Ete"
      - "Hiver"
      - "Ma F"
      - "At F"
    icon: mdi:pool
############################  Input text    
input_text:
  # Affiche la periode de Filtration
  piscine_periode_filtration:   
    name: Periode Filtration
  test_piscine_periode_filtration:   
    name: Test Periode Filtration
  
############################  Sensor
sensor:
  # Affichage du temps de fonctionnement de la pompe ce jour
  - platform: history_stats
    name: Ma Ppe Piscine Jour
    entity_id: binary_sensor.ppe_piscine_en_marche
    state: "on"
    type: time
    start: "{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}"
    end: "{{ now() }}"

  # Affichage du temps de fonctionnement de l'électrovanne appoint d'eau ce jour
  - platform: history_stats
    name: Ev Eau tps ouverture jour
    entity_id: switch.cde_ev_eau
    state: "on"
    type: time
    start: "{{ now().replace(hour=0).replace(minute=0).replace(second=0) }}"
    end: "{{ now() }}"
    
  # Affichage du temps de fonctionnement de l'électrovanne appoint d'eau sur 7 jours
  - platform: history_stats
    name: Ev eau sur 7j
    entity_id: switch.cde_ev_eau
    state: 'on'
    type: time
    end: "{{ now().replace(hour=0, minute=0, second=0) }}"
    duration:
      days: 7
    
template:
# mesure de la température de l'eau, permet de basculer facilement en mode simulation
# en commentant ou decommentant les lignes ci-dessous
  - sensor:
    - name: "Energie Piscine Jour"
      unique_id: "energy_pisc_daily" 
      state: >-
        {% set p = states('sensor.energy_pisc_usage_daily_hp') | float(default=0) | round(2) %}
        {% set o = states('sensor.energy_pisc_usage_daily_hc') | float(default=0) | round(2) %}
        {{ (o + p) | round(2) }}
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total"  

    - name: "energy_pisc_weekly"
      state: >-
        {% set p = states('sensor.energy_pisc_usage_weekly_hp') | float(default=0) | round(2) %}
        {% set o = states('sensor.energy_pisc_usage_weekly_hc') | float(default=0) | round(2) %}
        {{ (o + p) | round(2) }}
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total"  

    - name: "energy_pisc_monthly"
      state: >-
        {% set p = states('sensor.energy_pisc_usage_monthly_hp') | float(default=0) | round(2) %}
        {% set o = states('sensor.energy_pisc_usage_monthly_hc') | float(default=0) | round(2) %}
        {{ (o + p) | round(2) }}
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total"  

    - name: "energy_pisc_yearly"
      state: >-
        {% set p = states('sensor.energy_pisc_usage_yearly_hp') | float(default=0) | round(2) %}
        {% set o = states('sensor.energy_pisc_usage_yearly_hc') | float(default=0) | round(2) %}
        {{ (o + p) | round(2) }}
      unit_of_measurement: "kWh"
      device_class: "energy"
      state_class: "total"  

  # Recopie pression filtre lu dans esphome dans un template
    - name: "pression_piscine_p"
      state: '{{ states("sensor.pression_filtre") |float(default=0) | round(2) }}'
      unit_of_measurement: "Bars"

  - binary_sensor:
    # Si la puissance electrique est superieure à 500w, on considere que la pompe est en fonctionnement
    - name: "ppe_piscine_en_marche"
      state: >-
        {{states.sensor.pzem_pisc_puissance.state | float(default=0) > 500}}

  # Calcul en fonction de la position du soleil
  # Sun Azimtuh est calculé dans Meteo
    - name: "soleil_volet_piscine"
      state: >-
        {% set a=states('sensor.sun_azimuth_2')|float(default=0) %}
        {{ (a>97) and (a<290) }}

# Commande du volet roulant via un Cover
cover:
  - platform: template
    covers:
      volet_piscine:
        device_class: garage
        value_template: "{{is_state('binary_sensor.volet_piscine_ferme', 'off')}}"
        open_cover:
          service: script.volet_piscine_ouverture
        close_cover:
          service: script.volet_piscine_fermeture
        icon_template: >-
          {% if is_state('binary_sensor.volet_piscine_ferme', 'on') %}
            mdi:garage
          {% else %} 
            {% if is_state('binary_sensor.volet_piscine_ferme', 'off') %}
            mdi:garage-open
          {% else %}
            mdi:garage-alert
          {% endif %}
          {% endif %}
