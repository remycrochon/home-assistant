# Victron
modbus:
  - name: cerbo
    host: 192.168.0.86
    type: tcp
    port: 502
    switches:
      - name: "MP2 cde"
        slave: 227
        address: 33
        command_on: 3
        command_off: 4
        verify:
          input_type: holding
          address: 33
          state_on: 3
          state_off: 4

    sensors:
# Compteur PhotoVoltaique ET112-1 - GRID METER
# Energie
      # Energy 
      - name: "MP2 Energy Total Energy from net"
        unique_id: "mp2_total_energy_from_net"
        data_type: uint32
        slave: 31
        address: 2634
        scale: 0.01
        unit_of_measurement: "kWh"
        device_class: "energy"
        state_class: "total"

      # Energy 
      - name: "MP2 Energy Total Energy to net"
        unique_id: "mp2_total_energy_to_net"
        data_type: uint32
        slave: 31
        address: 2636
        scale: 0.01
        unit_of_measurement: "kWh"
        device_class: "energy"
        state_class: "total"

# Compteur PhotoVoltaique ET112-2 - PVMETER
      # 
      - name: "MP2 Tension PV"
        unique_id: "mp2_tension_pv"
        data_type: uint16
        unit_of_measurement: "V"
        slave: 32
        address: 1027
        scale: 0.1
        device_class: voltage
        state_class: measurement

      - name: "MP2 Intensité PV"
        unique_id: "mp2_intensite_pv"
        data_type: int16
        unit_of_measurement: "A"
        slave: 32
        address: 1028
        scale: 0.1
        device_class: current
        state_class: measurement

      - name: "MP2 Puissance Production PV"
        unique_id: "mp2_puissance_production_pv"
        data_type: uint16
        unit_of_measurement: "W"
        slave: 32
        address: 1029
        scale: 1
        device_class: power
        state_class: measurement

      - name: "MP2 Energy Produite PV"
        unique_id: "mp2_energy_produite_pv"
        data_type: uint32
        slave: 32
        address: 1046
        scale: 0.01
        unit_of_measurement: "kWh"
        device_class: "energy"
        state_class: "total"

# Multiplus 2
      # PV - AC-coupled on input L1
      - name: "MP2 PC AC Couplet on L1"
        unique_id: "mp2_pv_ac_coupled_on_l1"
        data_type: uint16
        unit_of_measurement: "W"
        slave: 100
        address: 811
        scale: 1
        device_class: power
        state_class: measurement

      # AC Consumption L1
      - name: "MP2 Conso AC L1"
        unique_id: "mp2_conso_ac_l1"
        data_type: uint16
        unit_of_measurement: "W"
        slave: 100
        address: 817
        scale: 1
        device_class: power
        state_class: measurement

      #Grid L1
      - name: "MP2 Grid L1"
        unique_id: "mp2_grid_l1"
        data_type: int16
        unit_of_measurement: "W"
        slave: 100
        address: 820
        scale: 1
        device_class: power
        state_class: measurement

      # Active input source
      # 0=Unknown;1=Grid;2=Generator;3=Shore power;240=Not connected
      - name: "MP2 Source Puissance"
        unique_id: "mp2_source_puissance"
        data_type: int16
        slave: 100
        address: 826
        scale: 1

      # Battery Voltage (System)
      - name: "MP2 Tension Batteries"
        unique_id: "mp2_tension_batteries"
        data_type: uint16
        unit_of_measurement: "V"
        slave: 100
        address: 840
        scale: 0.1
        device_class: voltage
        state_class: measurement

      # Battery Current (System)
      - name: "MP2 Intensité Batteries"
        unique_id: "mp2_intensite_batteries"
        data_type: int16
        unit_of_measurement: "A"
        slave: 100
        address: 841
        scale: 0.1
        device_class: current
        state_class: measurement

      # Battery Power (System)
      # positive en charge-negatif en décharge
      - name: "MP2 Puissance Batteries"
        unique_id: "mp2_puissance_batteries"
        data_type: int16
        unit_of_measurement: "W"
        slave: 100
        address: 842
        scale: 1
        device_class: power
        state_class: measurement

      # Battery state (System)
      # 0=idle;1=charging;2=discharging
      - name: "MP2 Status Batteries"
        unique_id: "mp2_status_batteries"
        data_type: int16
        slave: 100
        address: 844
        scale: 1

      # PV - DC-coupled power
      - name: "MP2 Puissance PV"
        unique_id: "mp2_puissance_pv"
        data_type: uint16
        unit_of_measurement: "W"
        slave: 100
        address: 850
        scale: 1
        device_class: power
        state_class: measurement

      # DC System Power
      - name: "MP2 Puissance reseau DC "
        unique_id: "mp2_puissance_reseau_dc"
        data_type: int16
        unit_of_measurement: "W"
        slave: 100
        address: 860
        scale: 1
        device_class: power
        state_class: measurement

      # P max Alim System 
      - name: 'MP2 P Max alim System'
        unique_id: 'mp2_p_max_alim_system'
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        slave: 100
        address: 2700
        data_type: int16

      # ESS Puissance decharge maximum
      - name: 'MP2 ESS Puissance Decharge Max'
        unique_id: 'mp2_ess_puissance_decharge_maximum'
        unit_of_measurement: "W"
        device_class: power
        state_class: measurement
        data_type: uint16
        slave: 100
        address: 2704
        scale: 10

      # Point de consigne ESS
      - name: 'MP2 ESS Minimum SoC Consigne'
        unique_id: 'mp2_ess_minimum_soc_consigne'
        unit_of_measurement: "%"
        data_type: uint16
        slave: 100
        address: 2901
        scale: 0.1

# Modbus Smart Shunt
        # State of charge - SOC
        # Smart Shunt
      - name: "MP2 SS Tension Batteries"
        unique_id: "mp2_ss_tension_batteries"
        data_type: uint16
        unit_of_measurement: "V"
        slave: 223
        address: 259
        scale: 0.01
        device_class: voltage
        state_class: measurement

      - name: "MP2 SS Tension Start Batteries"
        unique_id: "mp2_ss_tension_start_batteries"
        data_type: uint16
        unit_of_measurement: "V"
        slave: 223
        address: 260
        scale: 0.01
        device_class: voltage
        state_class: measurement

      - name: "MP2 SS Intensité Batteries"
        unique_id: "mp2_ss_intensite_batteries"
        data_type: int16
        unit_of_measurement: "A"
        slave: 223
        address: 261
        scale: 0.1
        device_class: current
        state_class: measurement

      - name: "MP2 SS Conso Ah Batteries"
        unique_id: "mp2_ss_conso_ah_batteries"
        data_type: int16
        unit_of_measurement: "Ah"
        slave: 223
        address: 265
        scale: 0.1
        device_class: current
        state_class: measurement

      - name: "MP2 Niveau Charge Batteries"
        unique_id: "mp2_niveau_charge_batteries"
        data_type: uint16
        unit_of_measurement: "%"
        slave: 223
        address: 266
        scale: 0.1
        device_class: battery
        state_class: measurement

      - name: "MP2 Temps depuis derniere pleine batteries"
        data_type: uint16
        unit_of_measurement: "seconds"
        slave: 223
        address: 289
        scale: 100

      # Energy Décharge
      - name: "MP2 Energy décharge batteries"
        unique_id: "mp2_energy_decharge_batteries"
        data_type: uint16
        slave: 223
        address: 301
        scale: 0.1
        unit_of_measurement: "kWh"
        device_class: "energy"
        state_class: "total"

      # Energy Charge
      - name: "MP2 Energy charge batteries"
        unique_id: "mp2_energy_charge_batteries"
        data_type: uint16
        slave: 223
        address: 302
        scale: 0.1
        unit_of_measurement: "kWh"
        device_class: "energy"
        state_class: "total"

      # Time to go
      - name: "MP2 Temps restant batteries"
        data_type: uint16
        unit_of_measurement: "seconds"
        slave: 223
        address: 303
        scale: 100

# Modbus MP2
      - name: "MP2 Tension Entrée L1"
        unique_id: "mp2_tension_entree_l1"
        data_type: uint16
        unit_of_measurement: "V"
        slave: 227
        address: 3
        scale: 0.1
        device_class: voltage
        state_class: measurement

      - name: "MP2 Intensité Entrée L1"
        unique_id: "mp2_intensite_entree_l1"
        data_type: int16
        unit_of_measurement: "A"
        slave: 227
        address: 6
        scale: 0.1
        device_class: current
        state_class: measurement

      - name: "MP2 Fréquence Entrée L1"
        unique_id: "mp2_frequence_entree_l1"
        data_type: int16
        unit_of_measurement: "Hz"
        slave: 227
        address: 9
        scale: 0.01
        device_class: frequency
        state_class: measurement

      - name: "MP2 Tension Sortie L1"
        unique_id: "mp2_tension_sortie_l1"
        data_type: uint16
        unit_of_measurement: "V"
        slave: 227
        address: 15
        scale: 0.1
        device_class: voltage
        state_class: measurement

      - name: "MP2 Intensité Sortie L1"
        unique_id: "mp2_intensite_sortie_l1"
        data_type: int16
        unit_of_measurement: "A"
        slave: 227
        address: 18
        scale: 0.1
        device_class: current
        state_class: measurement

      - name: "MP2 Fréquence Sortie"
        unique_id: "mp2_frequence_sortie"
        data_type: int16
        unit_of_measurement: "Hz"
        slave: 227
        address: 21
        scale: 0.01
        device_class: frequency
        state_class: measurement

      # DC System Power
      - name: "MP2 Puissance Sortie 1"
        unique_id: "mp2_puissance_sortie_1"
        data_type: int16
        unit_of_measurement: "W"
        slave: 227
        address: 23
        scale: 10
        device_class: power
        state_class: measurement

      # Status bus VE
      # 0=Off;1=Low Power;2=Fault;3=Bulk;4=Absorption;5=Float;6=Storage;
      # 7=Equalize;8=Passthru;9=Inverting;10=Power assist;11=Power supply;252=External control
      - name: "MP2 Status bus VE"
        unique_id: "mp2_status_bus_ve"
        slave: 227
        address: 31
        data_type: uint16
        scale: 1

      # SYSTEM
      # Switch Position
      # 1=Charger Only;2=Inverter Only;3=On;4=Off
      - name: "MP2 position Inter"
        slave: 227
        address: 33
        data_type: uint16
        scale: 1

      # Alarme Réseau Perdu
      - name : 'Alarme perte réseau' 
        unique_id: 'mp2_alarme_perte_reseau'
        unit_of_measurement : "marche/arrêt" 
        slave : 227 
        address : 64

template:
  - sensor:

    # Affichage Ac Load
    - name: MP2_ac_loads
      unique_id: "mp2_ac_loads"
      device_class: "power"
      state_class: "measurement"
      unit_of_measurement: "W"
      state: >-
        {% set l1=states('sensor.mp2_conso_ac_l1')|int(default=0)%}
        {% set out1=states('sensor.mp2_puissance_sortie_1')|int(default=0)%}
        {{ l1-out1 }}
  
    # Affichage Status bus VE
      # 0=Off;1=Low Power;2=Fault;3=Bulk;4=Absorption;5=Float;6=Storage;
      # 7=Equalize;8=Passthru;9=Inverting;10=Power assist;11=Power supply;252=External control

    - name: "Mp2 Affichage Status Bus VE"
      unique_id: "mp2_affichage_status_bus_ve"
      state: >-
        {% set st = states('sensor.mp2_status_bus_ve') | int(default=0) %}
        {% for num, text in [(0, 'Off'), (1, 'Low power'),(2, 'Defaut')
        ,(3, 'Bulk'),(4, 'Absorption'),(5, 'Float'),(6, 'Stockage')
        ,(7, 'Equalize'),(8, 'Traverse'),(9, 'Inverser'),
        (10, 'Power Assist') ,(11, 'Power Supply'),(252, 'PControl externe')
        ] %}
            {% if st == num %}
              {{ text }}
            {%endif%}
        {% endfor %} 

    # Affichage Status charge batteries
    # 0=idle;1=charging;2=discharging
    - name: "Mp2 Affichage Status Charge Batteries"
      unique_id: "mp2_affichage_status_charge_batteries"
      state: >-
        {% set st = states('sensor.mp2_status_batteries') | int(default=0) %}
        {% for num, text in [(0, 'Off'), (1, 'Charge'),(2, 'DeCharge')
                ] %}
            {% if st == num %}
              {{ text }}
            {%endif%}
        {% endfor %} 

    # Puissance batteries
    - name: "MP2 Pu charge batterie"
      unique_id: "mp2_pu_charge_batterie"
      device_class: "power"
      state_class: "measurement"
      unit_of_measurement: "W"
      state: >-
        {{ max(0, states('sensor.mp2_puissance_batteries') | float(default=0)) }}

    - name: "MP2 Pu decharge batterie"
      unique_id: "mp2_pu_decharge_batterie"
      device_class: "power"
      state_class: "measurement"
      unit_of_measurement: "W"
      state: >-
        {{ max(0, 0 - states('sensor.mp2_puissance_batteries') | float(default=0)) }}

#
# Modèles pour les diagrammes de transfert de Powerflow réel (APF - PowerFlow réel)
#
# Pour que les calculs additionnent, une nouvelle charge réelle de la maison doit être calculée et utilisée, ce qui inclut
# la consommation de l'onduleur et exclut les erreurs d'arrondi et corrige les lectures de puissance inexactes.
#
# Il n'a jamais été logique que la puissance entrante ne soit parfois pas égale à la puissance sortante. Cela corrige le problème !
#
# Développé par AviadorLP modifié pour powerwall par purcell-lab
# Définit correctement les flux battery2grid et grid2battery

# le capteur de grille doit être négatif lors de l'importation et positif lors de l'exportation
    - name: APF Grid Entity
      unique_id: apf_grid_entity
      device_class: power
      state_class: measurement
      unit_of_measurement: W
      state: "{{ (states('sensor.mp2_grid_l1')|float(default=0)*-1)|int(default=0) }}"

# le capteur doit toujours être 0 ou positif (je pense qu'ils le sont toujours)
    - name: APF House Entity
      unique_id: apf_house_entity
      device_class: power
      state_class: measurement
      unit_of_measurement: W
      state: "{{ (states('sensor.mp2_conso_ac_l1')|float(default=0)*1)|int(default=0) }}"

# le capteur doit toujours être 0 ou positif (je pense qu'ils le sont toujours)
    - name: APF Generation Entity
      unique_id: apf_generation_entity
      device_class: power
      state_class: measurement
      unit_of_measurement: W
      state: "{{ (states('sensor.envoy_122103023124_current_power_production')|float(default=0)*1)|int(default=0) }}"

# le capteur de batterie doit être positif lors de la charge et négatif lors de la décharge
    - name: APF Battery Entity
      unique_id: apf_battery_entity
      device_class: power
      state_class: measurement
      unit_of_measurement: W
      state: "{{ (states('sensor.mp2_puissance_batteries')|float(default=0)*1)|int(default=0) }}"

# Nécessaire pour réduire le code plus tard
    - name: APF Grid Import
      unique_id: apf_grid_import
      device_class: power
      state_class: measurement
      unit_of_measurement: W
      state: >
        {% if states('sensor.apf_grid_entity')|int(default=0) < 0 %}
          {{ states('sensor.apf_grid_entity')|int(default=0)|abs }}
        {% else %}
          0
        {% endif %}

# Consommation de l'onduleur et pertes de puissance dues aux transferts de l'onduleur et aux conversions de puissance (AC/DC)
# exclut les erreurs d'arrondi rendues pires par le fait que certains onduleurs arrondissent toutes les lectures de capteurs à INT
# Parfois, cela peut être négatif, probablement en raison d'erreurs cumulatives dans des lectures de puissance pas si précises.
    - name: APF Inverter Power Consumption
      unique_id: apf_inverter_power_consumption
      device_class: power
      state_class: measurement
      unit_of_measurement: W
      state: "{{ states('sensor.apf_generation_entity')|int(default=0) - states('sensor.apf_battery_entity')|int(default=0) - states('sensor.apf_house_entity')|int(default=0) - states('sensor.apf_grid_entity')|int(default=0) }}"

# La charge réelle de la maison comprend la consommation de l'onduleur et les conversions et pertes de transfert et les erreurs d'arrondi.
# Il n'a jamais été logique que la puissance entrante ne soit parfois pas égale à la puissance sortante. Cela corrige le problème !
    - name: APF Real House Load
      unique_id: apf_real_house_load
      device_class: power
      state_class: measurement
      unit_of_measurement: W
      state: "{{ states('sensor.apf_house_entity')|int(default=0) + states('sensor.apf_inverter_power_consumption')|int(default=0) }}"
      icon: mdi:home-lightning-bolt

    - name: APF Grid2House
      unique_id: apf_grid2house
      device_class: power
      state_class: measurement
      unit_of_measurement: W
      state:  >
        {% if states('sensor.apf_grid_import')|int(default=0) > states('sensor.apf_real_house_load')|int(default=0) %}
          {{ states('sensor.apf_real_house_load')|int(default=0) }}
        {% else %}
          {{ states('sensor.apf_grid_import')|int(default=0) }}
        {% endif %}

    - name: APF Grid2Batt
      unique_id: apf_grid2batt
      device_class: power
      state_class: measurement
      unit_of_measurement: W
      state: >
        {% if states('sensor.apf_grid_import')|int(default=0) > states('sensor.apf_real_house_load')|int(default=0) %}
          {{ states('sensor.apf_grid_import')|int(default=0) - states('sensor.apf_real_house_load')|int(default=0) }}
        {% else %}
          0
        {% endif %}

    - name: APF Batt2House
      unique_id: apf_batt2house
      device_class: power
      state_class: measurement
      unit_of_measurement: W
      state: >
        {% if states('sensor.apf_battery_entity')|int(default=0) < 0 %}
          {% if states('sensor.apf_battery_entity')|int(default=0)|abs > states('sensor.apf_real_house_load')|int(default=0) %}
            {{ states('sensor.apf_real_house_load')|int(default=0) }}
          {% else %}
            {{ states('sensor.apf_battery_entity')|int(default=0)|abs }}
          {% endif %}
        {% else %}
          0
        {% endif %}

# Cela peut s'appeler house to grid et peut se produire dans de rares circonstances,
# comme quand l'onduleur n'est pas capable de faire un réglage précis de puissance assez vite
# ou quand on veut forcer une décharge de la batterie ou autre...
# Mais cela ne se produit qu'avec des utilisateurs de batterie ou d'autres groupes électrogènes.
    - name: APF Batt2Grid
      unique_id: apf_batt2grid
      device_class: power
      state_class: measurement
      unit_of_measurement: W
      state: >
        {% if states('sensor.apf_battery_entity')|int(default=0) < 0 %}
          {% if states('sensor.apf_battery_entity')|int(default=0)|abs > states('sensor.apf_real_house_load')|int(default=0) %}
            {{ states('sensor.apf_battery_entity')|int(default=0)|abs - states('sensor.apf_real_house_load')|int(default=0) }}
          {% else %}
            0
          {% endif %}
        {% else %}
          0
        {% endif %}

    - name: APF Solar2Grid
      unique_id: apf_solar2grid
      device_class: power
      state_class: measurement
      unit_of_measurement: W
      state: >
        {% if states('sensor.apf_grid_entity')|int(default=0) > states('sensor.apf_batt2grid')|int(default=0) %}
          {{ states('sensor.apf_grid_entity')|int(default=0) - states('sensor.apf_batt2grid')|int(default=0) }}
        {% else %}
          0
        {% endif %}

    - name: APF Solar2House
      unique_id: apf_solar2house
      device_class: power
      state_class: measurement
      unit_of_measurement: W
      state: >
        {% if states('sensor.apf_generation_entity')|int(default=0) > 0 and states('sensor.apf_real_house_load')|int(default=0) > states('sensor.apf_batt2house')|int(default=0) + states('sensor.apf_grid_import')|int(default=0) %}
          {% if states('sensor.apf_generation_entity')|int(default=0) > states('sensor.apf_real_house_load')|int(default=0) - states('sensor.apf_batt2house')|int(default=0) - states('sensor.apf_grid2house')|int(default=0) %}
            {{ states('sensor.apf_real_house_load')|int(default=0) - states('sensor.apf_batt2house')|int(default=0) - states('sensor.apf_grid2house')|int(default=0) }}
          {% else %}
            {{ states('sensor.apf_generation_entity')|int(default=0) }}
          {% endif %}
        {% else %}
          0
        {% endif %}

    - name: APF Solar2Batt
      unique_id: apf_solar2batt
      device_class: power
      state_class: measurement
      unit_of_measurement: W
      state: >
        {% if states('sensor.apf_generation_entity')|int(default=0) > 0 and states('sensor.apf_battery_entity')|int(default=0) > 0 %}
          {% if states('sensor.apf_battery_entity')|int(default=0) > states('sensor.apf_grid2batt')|int(default=0) %}
            {% if states('sensor.apf_generation_entity')|int(default=0) - states('sensor.apf_solar2house')|int(default=0) > states('sensor.apf_battery_entity')|int(default=0) - states('sensor.apf_grid2batt')|int(default=0) %}
              {{ states('sensor.apf_battery_entity')|int(default=0) - states('sensor.apf_grid2batt')|int(default=0) }}
            {% else %}
              {{ states('sensor.apf_generation_entity')|int(default=0) - states('sensor.apf_solar2house')|int(default=0) - states('sensor.apf_solar2grid')|int(default=0) }}
            {% endif %}
          {% else %}
            0
          {% endif %}
        {% else %}
          0
        {% endif %}

    # Affichage "Import/Export" carte Tesla
    - name:  MP2 affichage import export
      unique_id: mp2_affichage_import_export
      state:  >
        {%set grid=states('sensor.mp2_grid_l1')|int%}
        {% if grid> 0 %}
          Import
        {% else %}
          Export
        {% endif %}

    # Affichage "Autonomie restante batteries"
    - name:  MP2 affichage Autonomie Restante Batteries
      unique_id: mp2_affichage_autonomie_restante_batteries
      state:  >
        {{ states('sensor.mp2_temps_restant_batteries')|int(default=0)|timestamp_custom('%H:%M:%S', false) }}

    # Affichage "Autonomie restante batteries"
    - name:  MP2 affichage Temps Depuis Derniere Charge
      unique_id: mp2_affichage_temps_depuis_derniere_charge
      state:  >
        {{ states('sensor.mp2_temps_depuis_derniere_pleine_batteries')|int(default=0)|timestamp_custom('%H:%M:%S', false) }}

        