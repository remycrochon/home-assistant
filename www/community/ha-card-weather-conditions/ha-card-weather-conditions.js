function e(e,t,i,n){var a,s=arguments.length,o=s<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,n);else for(var r=e.length-1;r>=0;r--)(a=e[r])&&(o=(s<3?a(o):s>3?a(t,i,o):a(t,i))||o);return s>3&&o&&Object.defineProperty(t,i,o),o}"function"==typeof SuppressedError&&SuppressedError;
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const t=globalThis,i=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,n=Symbol(),a=new WeakMap;let s=class{constructor(e,t,i){if(this._$cssResult$=!0,i!==n)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this.t=t}get styleSheet(){let e=this.o;const t=this.t;if(i&&void 0===e){const i=void 0!==t&&1===t.length;i&&(e=a.get(t)),void 0===e&&((this.o=e=new CSSStyleSheet).replaceSync(this.cssText),i&&a.set(t,e))}return e}toString(){return this.cssText}};const o=(e,...t)=>{const i=1===e.length?e[0]:t.reduce(((t,i,n)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw Error("Value passed to 'css' function must be a 'css' function result: "+e+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+e[n+1]),e[0]);return new s(i,e,n)},r=i?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const i of e.cssRules)t+=i.cssText;return(e=>new s("string"==typeof e?e:e+"",void 0,n))(t)})(e):e
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */,{is:l,defineProperty:c,getOwnPropertyDescriptor:d,getOwnPropertyNames:h,getOwnPropertySymbols:u,getPrototypeOf:p}=Object,m=globalThis,g=m.trustedTypes,y=g?g.emptyScript:"",f=m.reactiveElementPolyfillSupport,v=(e,t)=>e,_={toAttribute(e,t){switch(t){case Boolean:e=e?y:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let i=e;switch(t){case Boolean:i=null!==e;break;case Number:i=null===e?null:Number(e);break;case Object:case Array:try{i=JSON.parse(e)}catch(e){i=null}}return i}},w=(e,t)=>!l(e,t),$={attribute:!0,type:String,converter:_,reflect:!1,useDefault:!1,hasChanged:w};Symbol.metadata??=Symbol("metadata"),m.litPropertyMetadata??=new WeakMap;let x=class extends HTMLElement{static addInitializer(e){this._$Ei(),(this.l??=[]).push(e)}static get observedAttributes(){return this.finalize(),this._$Eh&&[...this._$Eh.keys()]}static createProperty(e,t=$){if(t.state&&(t.attribute=!1),this._$Ei(),this.prototype.hasOwnProperty(e)&&((t=Object.create(t)).wrapped=!0),this.elementProperties.set(e,t),!t.noAccessor){const i=Symbol(),n=this.getPropertyDescriptor(e,i,t);void 0!==n&&c(this.prototype,e,n)}}static getPropertyDescriptor(e,t,i){const{get:n,set:a}=d(this.prototype,e)??{get(){return this[t]},set(e){this[t]=e}};return{get:n,set(t){const s=n?.call(this);a?.call(this,t),this.requestUpdate(e,s,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)??$}static _$Ei(){if(this.hasOwnProperty(v("elementProperties")))return;const e=p(this);e.finalize(),void 0!==e.l&&(this.l=[...e.l]),this.elementProperties=new Map(e.elementProperties)}static finalize(){if(this.hasOwnProperty(v("finalized")))return;if(this.finalized=!0,this._$Ei(),this.hasOwnProperty(v("properties"))){const e=this.properties,t=[...h(e),...u(e)];for(const i of t)this.createProperty(i,e[i])}const e=this[Symbol.metadata];if(null!==e){const t=litPropertyMetadata.get(e);if(void 0!==t)for(const[e,i]of t)this.elementProperties.set(e,i)}this._$Eh=new Map;for(const[e,t]of this.elementProperties){const i=this._$Eu(e,t);void 0!==i&&this._$Eh.set(i,e)}this.elementStyles=this.finalizeStyles(this.styles)}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const i=new Set(e.flat(1/0).reverse());for(const e of i)t.unshift(r(e))}else void 0!==e&&t.push(r(e));return t}static _$Eu(e,t){const i=t.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof e?e.toLowerCase():void 0}constructor(){super(),this._$Ep=void 0,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Em=null,this._$Ev()}_$Ev(){this._$ES=new Promise((e=>this.enableUpdating=e)),this._$AL=new Map,this._$E_(),this.requestUpdate(),this.constructor.l?.forEach((e=>e(this)))}addController(e){(this._$EO??=new Set).add(e),void 0!==this.renderRoot&&this.isConnected&&e.hostConnected?.()}removeController(e){this._$EO?.delete(e)}_$E_(){const e=new Map,t=this.constructor.elementProperties;for(const i of t.keys())this.hasOwnProperty(i)&&(e.set(i,this[i]),delete this[i]);e.size>0&&(this._$Ep=e)}createRenderRoot(){const e=this.shadowRoot??this.attachShadow(this.constructor.shadowRootOptions);return((e,n)=>{if(i)e.adoptedStyleSheets=n.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet));else for(const i of n){const n=document.createElement("style"),a=t.litNonce;void 0!==a&&n.setAttribute("nonce",a),n.textContent=i.cssText,e.appendChild(n)}})(e,this.constructor.elementStyles),e}connectedCallback(){this.renderRoot??=this.createRenderRoot(),this.enableUpdating(!0),this._$EO?.forEach((e=>e.hostConnected?.()))}enableUpdating(e){}disconnectedCallback(){this._$EO?.forEach((e=>e.hostDisconnected?.()))}attributeChangedCallback(e,t,i){this._$AK(e,i)}_$ET(e,t){const i=this.constructor.elementProperties.get(e),n=this.constructor._$Eu(e,i);if(void 0!==n&&!0===i.reflect){const a=(void 0!==i.converter?.toAttribute?i.converter:_).toAttribute(t,i.type);this._$Em=e,null==a?this.removeAttribute(n):this.setAttribute(n,a),this._$Em=null}}_$AK(e,t){const i=this.constructor,n=i._$Eh.get(e);if(void 0!==n&&this._$Em!==n){const e=i.getPropertyOptions(n),a="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==e.converter?.fromAttribute?e.converter:_;this._$Em=n,this[n]=a.fromAttribute(t,e.type)??this._$Ej?.get(n)??null,this._$Em=null}}requestUpdate(e,t,i){if(void 0!==e){const n=this.constructor,a=this[e];if(i??=n.getPropertyOptions(e),!((i.hasChanged??w)(a,t)||i.useDefault&&i.reflect&&a===this._$Ej?.get(e)&&!this.hasAttribute(n._$Eu(e,i))))return;this.C(e,t,i)}!1===this.isUpdatePending&&(this._$ES=this._$EP())}C(e,t,{useDefault:i,reflect:n,wrapped:a},s){i&&!(this._$Ej??=new Map).has(e)&&(this._$Ej.set(e,s??t??this[e]),!0!==a||void 0!==s)||(this._$AL.has(e)||(this.hasUpdated||i||(t=void 0),this._$AL.set(e,t)),!0===n&&this._$Em!==e&&(this._$Eq??=new Set).add(e))}async _$EP(){this.isUpdatePending=!0;try{await this._$ES}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){if(!this.isUpdatePending)return;if(!this.hasUpdated){if(this.renderRoot??=this.createRenderRoot(),this._$Ep){for(const[e,t]of this._$Ep)this[e]=t;this._$Ep=void 0}const e=this.constructor.elementProperties;if(e.size>0)for(const[t,i]of e){const{wrapped:e}=i,n=this[t];!0!==e||this._$AL.has(t)||void 0===n||this.C(t,void 0,i,n)}}let e=!1;const t=this._$AL;try{e=this.shouldUpdate(t),e?(this.willUpdate(t),this._$EO?.forEach((e=>e.hostUpdate?.())),this.update(t)):this._$EM()}catch(t){throw e=!1,this._$EM(),t}e&&this._$AE(t)}willUpdate(e){}_$AE(e){this._$EO?.forEach((e=>e.hostUpdated?.())),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e)}_$EM(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$ES}shouldUpdate(e){return!0}update(e){this._$Eq&&=this._$Eq.forEach((e=>this._$ET(e,this[e]))),this._$EM()}updated(e){}firstUpdated(e){}};x.elementStyles=[],x.shadowRootOptions={mode:"open"},x[v("elementProperties")]=new Map,x[v("finalized")]=new Map,f?.({ReactiveElement:x}),(m.reactiveElementVersions??=[]).push("2.1.0");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const b=globalThis,A=b.trustedTypes,z=A?A.createPolicy("lit-html",{createHTML:e=>e}):void 0,E="$lit$",k=`lit$${Math.random().toFixed(9).slice(2)}$`,S="?"+k,C=`<${S}>`,I=document,N=()=>I.createComment(""),P=e=>null===e||"object"!=typeof e&&"function"!=typeof e,T=Array.isArray,U="[ \t\n\f\r]",D=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,O=/-->/g,M=/>/g,L=RegExp(`>|${U}(?:([^\\s"'>=/]+)(${U}*=${U}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),j=/'/g,R=/"/g,H=/^(?:script|style|textarea|title)$/i,F=(e=>(t,...i)=>({_$litType$:e,strings:t,values:i}))(1),V=Symbol.for("lit-noChange"),W=Symbol.for("lit-nothing"),B=new WeakMap,q=I.createTreeWalker(I,129);function Z(e,t){if(!T(e)||!e.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==z?z.createHTML(t):t}const J=(e,t)=>{const i=e.length-1,n=[];let a,s=2===t?"<svg>":3===t?"<math>":"",o=D;for(let t=0;t<i;t++){const i=e[t];let r,l,c=-1,d=0;for(;d<i.length&&(o.lastIndex=d,l=o.exec(i),null!==l);)d=o.lastIndex,o===D?"!--"===l[1]?o=O:void 0!==l[1]?o=M:void 0!==l[2]?(H.test(l[2])&&(a=RegExp("</"+l[2],"g")),o=L):void 0!==l[3]&&(o=L):o===L?">"===l[0]?(o=a??D,c=-1):void 0===l[1]?c=-2:(c=o.lastIndex-l[2].length,r=l[1],o=void 0===l[3]?L:'"'===l[3]?R:j):o===R||o===j?o=L:o===O||o===M?o=D:(o=L,a=void 0);const h=o===L&&e[t+1].startsWith("/>")?" ":"";s+=o===D?i+C:c>=0?(n.push(r),i.slice(0,c)+E+i.slice(c)+k+h):i+k+(-2===c?t:h)}return[Z(e,s+(e[i]||"<?>")+(2===t?"</svg>":3===t?"</math>":"")),n]};class Y{constructor({strings:e,_$litType$:t},i){let n;this.parts=[];let a=0,s=0;const o=e.length-1,r=this.parts,[l,c]=J(e,t);if(this.el=Y.createElement(l,i),q.currentNode=this.el.content,2===t||3===t){const e=this.el.content.firstChild;e.replaceWith(...e.childNodes)}for(;null!==(n=q.nextNode())&&r.length<o;){if(1===n.nodeType){if(n.hasAttributes())for(const e of n.getAttributeNames())if(e.endsWith(E)){const t=c[s++],i=n.getAttribute(e).split(k),o=/([.?@])?(.*)/.exec(t);r.push({type:1,index:a,name:o[2],strings:i,ctor:"."===o[1]?ee:"?"===o[1]?te:"@"===o[1]?ie:X}),n.removeAttribute(e)}else e.startsWith(k)&&(r.push({type:6,index:a}),n.removeAttribute(e));if(H.test(n.tagName)){const e=n.textContent.split(k),t=e.length-1;if(t>0){n.textContent=A?A.emptyScript:"";for(let i=0;i<t;i++)n.append(e[i],N()),q.nextNode(),r.push({type:2,index:++a});n.append(e[t],N())}}}else if(8===n.nodeType)if(n.data===S)r.push({type:2,index:a});else{let e=-1;for(;-1!==(e=n.data.indexOf(k,e+1));)r.push({type:7,index:a}),e+=k.length-1}a++}}static createElement(e,t){const i=I.createElement("template");return i.innerHTML=e,i}}function Q(e,t,i=e,n){if(t===V)return t;let a=void 0!==n?i._$Co?.[n]:i._$Cl;const s=P(t)?void 0:t._$litDirective$;return a?.constructor!==s&&(a?._$AO?.(!1),void 0===s?a=void 0:(a=new s(e),a._$AT(e,i,n)),void 0!==n?(i._$Co??=[])[n]=a:i._$Cl=a),void 0!==a&&(t=Q(e,a._$AS(e,t.values),a,n)),t}class K{constructor(e,t){this._$AV=[],this._$AN=void 0,this._$AD=e,this._$AM=t}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(e){const{el:{content:t},parts:i}=this._$AD,n=(e?.creationScope??I).importNode(t,!0);q.currentNode=n;let a=q.nextNode(),s=0,o=0,r=i[0];for(;void 0!==r;){if(s===r.index){let t;2===r.type?t=new G(a,a.nextSibling,this,e):1===r.type?t=new r.ctor(a,r.name,r.strings,this,e):6===r.type&&(t=new ne(a,this,e)),this._$AV.push(t),r=i[++o]}s!==r?.index&&(a=q.nextNode(),s++)}return q.currentNode=I,n}p(e){let t=0;for(const i of this._$AV)void 0!==i&&(void 0!==i.strings?(i._$AI(e,i,t),t+=i.strings.length-2):i._$AI(e[t])),t++}}class G{get _$AU(){return this._$AM?._$AU??this._$Cv}constructor(e,t,i,n){this.type=2,this._$AH=W,this._$AN=void 0,this._$AA=e,this._$AB=t,this._$AM=i,this.options=n,this._$Cv=n?.isConnected??!0}get parentNode(){let e=this._$AA.parentNode;const t=this._$AM;return void 0!==t&&11===e?.nodeType&&(e=t.parentNode),e}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(e,t=this){e=Q(this,e,t),P(e)?e===W||null==e||""===e?(this._$AH!==W&&this._$AR(),this._$AH=W):e!==this._$AH&&e!==V&&this._(e):void 0!==e._$litType$?this.$(e):void 0!==e.nodeType?this.T(e):(e=>T(e)||"function"==typeof e?.[Symbol.iterator])(e)?this.k(e):this._(e)}O(e){return this._$AA.parentNode.insertBefore(e,this._$AB)}T(e){this._$AH!==e&&(this._$AR(),this._$AH=this.O(e))}_(e){this._$AH!==W&&P(this._$AH)?this._$AA.nextSibling.data=e:this.T(I.createTextNode(e)),this._$AH=e}$(e){const{values:t,_$litType$:i}=e,n="number"==typeof i?this._$AC(e):(void 0===i.el&&(i.el=Y.createElement(Z(i.h,i.h[0]),this.options)),i);if(this._$AH?._$AD===n)this._$AH.p(t);else{const e=new K(n,this),i=e.u(this.options);e.p(t),this.T(i),this._$AH=e}}_$AC(e){let t=B.get(e.strings);return void 0===t&&B.set(e.strings,t=new Y(e)),t}k(e){T(this._$AH)||(this._$AH=[],this._$AR());const t=this._$AH;let i,n=0;for(const a of e)n===t.length?t.push(i=new G(this.O(N()),this.O(N()),this,this.options)):i=t[n],i._$AI(a),n++;n<t.length&&(this._$AR(i&&i._$AB.nextSibling,n),t.length=n)}_$AR(e=this._$AA.nextSibling,t){for(this._$AP?.(!1,!0,t);e&&e!==this._$AB;){const t=e.nextSibling;e.remove(),e=t}}setConnected(e){void 0===this._$AM&&(this._$Cv=e,this._$AP?.(e))}}class X{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(e,t,i,n,a){this.type=1,this._$AH=W,this._$AN=void 0,this.element=e,this.name=t,this._$AM=n,this.options=a,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=W}_$AI(e,t=this,i,n){const a=this.strings;let s=!1;if(void 0===a)e=Q(this,e,t,0),s=!P(e)||e!==this._$AH&&e!==V,s&&(this._$AH=e);else{const n=e;let o,r;for(e=a[0],o=0;o<a.length-1;o++)r=Q(this,n[i+o],t,o),r===V&&(r=this._$AH[o]),s||=!P(r)||r!==this._$AH[o],r===W?e=W:e!==W&&(e+=(r??"")+a[o+1]),this._$AH[o]=r}s&&!n&&this.j(e)}j(e){e===W?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,e??"")}}class ee extends X{constructor(){super(...arguments),this.type=3}j(e){this.element[this.name]=e===W?void 0:e}}class te extends X{constructor(){super(...arguments),this.type=4}j(e){this.element.toggleAttribute(this.name,!!e&&e!==W)}}class ie extends X{constructor(e,t,i,n,a){super(e,t,i,n,a),this.type=5}_$AI(e,t=this){if((e=Q(this,e,t,0)??W)===V)return;const i=this._$AH,n=e===W&&i!==W||e.capture!==i.capture||e.once!==i.once||e.passive!==i.passive,a=e!==W&&(i===W||n);n&&this.element.removeEventListener(this.name,this,i),a&&this.element.addEventListener(this.name,this,e),this._$AH=e}handleEvent(e){"function"==typeof this._$AH?this._$AH.call(this.options?.host??this.element,e):this._$AH.handleEvent(e)}}class ne{constructor(e,t,i){this.element=e,this.type=6,this._$AN=void 0,this._$AM=t,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(e){Q(this,e)}}const ae=b.litHtmlPolyfillSupport;ae?.(Y,G),(b.litHtmlVersions??=[]).push("3.3.0");const se=globalThis;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */class oe extends x{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){const e=super.createRenderRoot();return this.renderOptions.renderBefore??=e.firstChild,e}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this._$Do=((e,t,i)=>{const n=i?.renderBefore??t;let a=n._$litPart$;if(void 0===a){const e=i?.renderBefore??null;n._$litPart$=a=new G(t.insertBefore(N(),e),e,void 0,i??{})}return a._$AI(e),a})(t,this.renderRoot,this.renderOptions)}connectedCallback(){super.connectedCallback(),this._$Do?.setConnected(!0)}disconnectedCallback(){super.disconnectedCallback(),this._$Do?.setConnected(!1)}render(){return V}}oe._$litElement$=!0,oe.finalized=!0,se.litElementHydrateSupport?.({LitElement:oe});const re=se.litElementPolyfillSupport;re?.({LitElement:oe}),(se.litElementVersions??=[]).push("4.2.0");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const le={attribute:!0,type:String,converter:_,reflect:!1,hasChanged:w},ce=(e=le,t,i)=>{const{kind:n,metadata:a}=i;let s=globalThis.litPropertyMetadata.get(a);if(void 0===s&&globalThis.litPropertyMetadata.set(a,s=new Map),"setter"===n&&((e=Object.create(e)).wrapped=!0),s.set(i.name,e),"accessor"===n){const{name:n}=i;return{set(i){const a=t.get.call(this);t.set.call(this,i),this.requestUpdate(n,a,e)},init(t){return void 0!==t&&this.C(n,void 0,e,t),t}}}if("setter"===n){const{name:n}=i;return function(i){const a=this[n];t.call(this,i),this.requestUpdate(n,a,e)}}throw Error("Unsupported decorator location: "+n)};
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */function de(e){return(t,i)=>"object"==typeof i?ce(e,t,i):((e,t,i)=>{const n=t.hasOwnProperty(i);return t.constructor.createProperty(i,e),n?Object.getOwnPropertyDescriptor(t,i):void 0})(e,t,i)}const he=o`
  --default-red: 244, 67, 54;
  --default-pink: 233, 30, 99;
  --default-purple: 146, 107, 199;
  --default-deep-purple: 110, 65, 171;
  --default-indigo: 63, 81, 181;
  --default-blue: 33, 150, 243;
  --default-light-blue: 3, 169, 244;
  --default-cyan: 0, 188, 212;
  --default-teal: 0, 150, 136;
  --default-green: 76, 175, 80;
  --default-light-green: 139, 195, 74;
  --default-lime: 205, 220, 57;
  --default-yellow: 255, 235, 59;
  --default-amber: 255, 193, 7;
  --default-orange: 255, 152, 0;
  --default-deep-orange: 255, 111, 34;
  --default-brown: 121, 85, 72;
  --default-light-grey: 189, 189, 189;
  --default-grey: 158, 158, 158;
  --default-dark-grey: 96, 96, 96;
  --default-blue-grey: 96, 125, 139;
  --default-black: 0, 0, 0;
  --default-white: 255, 255, 255;
  --default-disabled: 189, 189, 189;
`,ue=o`
  --default-disabled: 111, 111, 111;
`,pe="%c WEATHER-CONDITION-CARD %c 2.0.0",me="/local/community/ha-card-weather-conditions/icons",ge="/local/ha-card-weather-conditions/icons",ye="color: white; background: green; font-weight: 700;",fe="color: green; background: white; font-weight: 700;",ve="color: black; background: white; font-weight: 700;",_e={en:0,it:1,nl:2,es:3,de:4,fr:5,"sr-latn":6,pt:7,da:8,"no-no":9,cs:10,ru:11},we={snowy:"snowy-3","light-snow":"snowy-2","snowy-rainy":"snowy-1","partlycloudy-light-snow":"snowy-1","partlycloudy-snow":"snowy-1","partlycloudy-light-rain":"rainy-1","light-rain":"rainy-1",rainy:"rainy-2","partlycloudy-rain":"rainy-1","partlycloudy-fog":"fog",cloudy:"cloudy-original",partlycloudy:"cloudy-day-2","partlycloudy-lightning":"cloudy-day-1",lightning:"cloudy-day-1",clear:"day"},$e={...we},xe={freezing_rain_heavy:"rainy-3","heavy freezing rain":"rainy-3",freezing_rain:"rainy-2","freezing rain":"rainy-2",freezing_rain_light:"rainy-1","light freezing rain":"rainy-1",freezing_drizzle:"rain-and-sleet-mix","freezing drizzle":"rain-and-sleet-mix",ice_pellets_heavy:"rain-and-snow-mix","heavy ice pellets":"rain-and-snow-mix",ice_pellets:"rain-and-snow-mix","ice pellets":"rain-and-snow-mix",ice_pellets_light:"rain-and-snow-mix","light ice pellets":"rain-and-snow-mix",snow_heavy:"snowy-3","heavy snow":"snowy-3",snow:"snowy-2",snow_light:"snowy-1","light snow":"snowy-1",flurries:"wind",tstorm:"tropical-storm",rain_heavy:"rainy-3","heavy rain":"rainy-3",rain_light:"rainy-1","light rain":"rainy-1",rain:"rainy-2",drizzle:"rainy-1",fog_light:"haze","light fog":"haze",fog:"fog",cloudy:"cloudy-original",mostly_cloudy:"cloudy-day-3","mostly cloudy":"cloudy-day-3",partly_cloudy:"cloudy-day-2","partly cloudy":"cloudy-day-2",mostly_clear:"cloudy-day-1","mostly clear":"cloudy-day-1",clear:"day"},be={...xe,freezing_rain_heavy:"rainy-6","heavy freezing rain":"rainy-6",freezing_rain:"rainy-5","freezing rain":"rainy-5",freezing_rain_light:"rainy-4","light freezing rain":"rainy-4",snow_heavy:"snowy-6","heavy snow":"snowy-6",snow:"snowy-5",snow_light:"snowy-4","light snow":"snowy-4",rain_heavy:"rainy-6","heavy rain":"rainy-6",rain_light:"rainy-4","light rain":"rainy-4",rain:"rainy-5",drizzle:"rainy-4",mostly_cloudy:"cloudy-night-3","mostly cloudy":"cloudy-night-3",partly_cloudy:"cloudy-night-2","partly cloudy":"cloudy-night-2",mostly_clear:"cloudy-night-1","mostly clear":"cloudy-night-1",clear:"night",sunny:"night"},Ae={clear:"day","clear-day":"day",rain:"rainy-2",snow:"snowy-2",sleet:"rain-and-sleet-mix",wind:"cloudy-day-1",fog:"fog",cloudy:"cloudy-original","partly-cloudy-day":"cloudy-day-2"},ze={...Ae,clear:"night","clear-night":"night",wind:"cloudy-night-1","partly-cloudy-day":"cloudy-night-2","partly-cloudy-night":"cloudy-night-2"},Ee={cloudy:"cloudy-day-3",exceptional:"severe-thunderstorm",fog:"fog",hail:"snow-and-sleet-mix",lightning:"severe-thunderstorm","lightning-rainy":"scattered-thunderstorms",partlycloudy:"cloudy-day-3",pouring:"rainy-6",rainy:"rainy-5",snowy:"snowy-6","snowy-rainy":"snow-and-sleet-mix",sunny:"clear-day",windy:"wind","windy-variant":"wind"},ke={...Ee,"clear-night":"clear-night"},Se={"clear sky":"day","few clouds":"cloudy-day-1","scattered clouds":"cloudy-day-2","broken clouds":"cloudy-day-3","shower rain":"rainy-3",rain:"rainy-2",thunderstorm:"tropical-storm",snow:"snowy-2",mist:"fog"},Ce={...Se,"clear sky":"day-night","few clouds":"cloudy-night-1","scattered clouds":"cloudy-night-2","broken clouds":"cloudy-night-3"},Ie={freezing_rain_heavy:"rainy-3","heavy freezing rain":"rainy-3",freezing_rain:"rainy-2","freezing rain":"rainy-2",freezing_rain_light:"rainy-1","light freezing rain":"rainy-1",freezing_drizzle:"rain-and-sleet-mix",sleet:"rain-and-sleet-mix","freezing drizzle":"rain-and-sleet-mix",ice_pellets_heavy:"rain-and-snow-mix","heavy ice pellets":"rain-and-snow-mix",ice_pellets:"rain-and-snow-mix","ice pellets":"rain-and-snow-mix",ice_pellets_light:"rain-and-snow-mix","light ice pellets":"rain-and-snow-mix",snow_heavy:"snowy-3","heavy snow":"snowy-3",snow:"snowy-2",snow_light:"snowy-1","light snow":"snowy-1",flurries:"wind",tstorm:"tropical-storm",rain_heavy:"rainy-3","heavy rain":"rainy-3",rain_light:"rainy-1",rainy:"rainy-1","light rain":"rainy-1",rain:"rainy-2",drizzle:"rainy-1",fog_light:"haze","light fog":"haze",fog:"fog",cloudy:"cloudy-original",mostly_cloudy:"cloudy-day-3","mostly cloudy":"cloudy-day-3",partly_cloudy:"cloudy-day-2",partlycloudy:"cloudy-day-2","partly-cloudy-day":"cloudy-day-2","partly cloudy":"cloudy-day-2",mostly_clear:"cloudy-day-1","mostly clear":"cloudy-day-1",clear:"day","clear-day":"day",wind:"wind",windy:"wind",sunny:"day","clear-night":"day"},Ne={...Ie,freezing_rain_heavy:"rainy-6","heavy freezing rain":"rainy-6",freezing_rain:"rainy-5","freezing rain":"rainy-5",freezing_rain_light:"rainy-4","light freezing rain":"rainy-4",snow_heavy:"snowy-6","heavy snow":"snowy-6",snow:"snowy-5",snow_light:"snowy-4","light snow":"snowy-4",rain_heavy:"rainy-6","heavy rain":"rainy-6",rain_light:"rainy-4","light rain":"rainy-4",rain:"rainy-5",drizzle:"rainy-4",mostly_cloudy:"cloudy-night-3","mostly cloudy":"cloudy-night-3",partly_cloudy:"cloudy-night-2",partlycloudy:"cloudy-night-2","partly-cloudy-night":"cloudy-night-2","partly cloudy":"cloudy-night-2",mostly_clear:"cloudy-night-1","mostly clear":"cloudy-night-1",clear:"night","clear-night":"night",sunny:"night"},Pe={pirateweather:{iconsDay:Ie,iconsNight:Ne},climacell:{iconsDay:xe,iconsNight:be},darksky:{iconsDay:Ae,iconsNight:ze},openweathermap:{iconsDay:Se,iconsNight:Ce},buienradar:{iconsDay:we,iconsNight:$e},defaulthass:{iconsDay:Ee,iconsNight:ke}},Te=(e,t)=>{const i=Object.keys(t).find((t=>t.toLowerCase()===e.toLowerCase()));return i?t[i]:e},Ue=e=>{const t={en:0,it:1,nl:2,es:3,de:4,fr:5,"sr-latn":6,pt:7,da:8,"no-no":9,cs:10,ru:11};return{locale:{en:"en-US",it:"it-IT",nl:"nl-NL",es:"es-ES",de:"de-DE",fr:"fr-FR","sr-latn":"sr-Latn",pt:"pt-PT",da:"da-DK","no-no":"nb-NO",cs:"cs-CZ",ru:"ru-RU"}[e]||e,timezone:{en:"America/New_York",it:"Europe/Rome",nl:"Europe/Amsterdam",es:"Europe/Madrid",de:"Europe/Berlin",fr:"Europe/Paris","sr-latn":"Europe/Belgrade",ja:"Asia/Tokyo",pt:"Europe/Lisbon",da:"Europe/Copenhagen","no-no":"Europe/Oslo",cs:"Europe/Prague",ru:"Europe/Moscow"}[e]||"UTC",...e in t&&{cwc:t[e]}}},De=e=>({it:"it-IT",en:"en-US",fr:"fr-FR",de:"de-DE",es:"es-ES",ja:"ja-JP",zh:"zh-CN"}[e]||`${e}-${e.toUpperCase()}`),Oe=({stringNumber:e,lang:t="en",fractionDigits:i=1,useGrouping:n=!1})=>{const a=parseFloat(e);if(Number.isNaN(a))return"";const s=((e="en-US",t=1,i=!1)=>new Intl.NumberFormat(e,{minimumFractionDigits:t,maximumFractionDigits:t,useGrouping:i}))(De(t),i,n);return s.format(a)};const Me=(e,t)=>t&&e.states[t]?.state,Le=(e,t,i)=>t&&e.states[t]?.attributes[i],je=({entityId:e,hass:t,lang:i="en",decimals:n=0}={})=>{const a=t&&e&&t.states[e]?.state;return void 0!==a?Oe({stringNumber:a,fractionDigits:n,lang:i}):void 0},Re=(e,t)=>t&&e.states[t]?.attributes?.unit_of_measurement,He=(e,t)=>t&&e.states[t]?.attributes?.icon,Fe=(e,t)=>{const i="number"==typeof e?e:parseFloat(e);if(Number.isNaN(i))return t[e]??null;if(i<0||i>360)return console.error(`Invalid wind direction: '${e}'. Valid values are between 0 and 360 degrees.`),null;return t[["N","NNE","NE","ENE","E","ESE","SE","SSE","S","SSW","SW","WSW","W","WNW","NW","NNW"][Math.floor((i+11.25)%360/22.5)]]??null};function Ve(e,t=5e3){return new Promise((i=>{const n=new Image,a=setTimeout((()=>{n.src="",i(!1)}),t);n.onload=()=>{clearTimeout(a),i(!0)},n.onerror=()=>{clearTimeout(a),i(!1)},n.src=e}))}function We(e,...t){console.info(e,...t.length?t:[])}function Be(e,t="en-US"){if("number"==typeof e)return e;const i=e.replace(/\./g,"").replace(",",".");return Number(i)}const qe={new_moon:"🌑",new:"🌑",waxing_crescent:"🌒",first_quarter:"🌓",waxing_gibbous:"🌔",full:"🌕",full_moon:"🌕",waning_gibbous:"🌖",third_quarter:"🌗",last_quarter:"🌗",waning_crescent:"🌘"},Ze=o`
  ha-card {
    cursor: pointer;
    position: relative;
    width: 100%;
  }

  .ha-card-weather-conditions {
    width: 100%;
    box-sizing: border-box;
    background-color: var(--card-background-color, #1c1c1c);
    color: var(--primary-text-color, #ffffff);
    border-radius: var(--ha-card-border-radius, 12px);
    box-shadow: var(--ha-card-box-shadow, 0 2px 6px rgba(0, 0, 0, 0.2));
    overflow: hidden;
    padding: 0;
    display: flex;
    flex-direction: column;
  }

  .nd-container {
    width: 100%;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    padding: 16px 20px; /* ← padding orizzontale più ampio */
    gap: 12px;
    background-size: cover;
    background-position: center;
    transition: background-image 0.3s ease-in-out;
  }

  /* Esempio di stile dinamico aggiuntivo se habgImage è una classe */
  .nd-container.sunny {
    background-image: url('/local/images/sunny-bg.jpg');
  }

  .nd-container.rainy {
    background-image: url('/local/images/rainy-bg.jpg');
  }

  /* -------------- */

`,Je=o`

.summary-grid-container {
  position: relative;
  z-index: 1;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr; /* <-- 3 colonne reali */
  grid-template-rows: auto auto;
  width: 100%;
  max-width: 600px;
  // background: #1c1c1c;
  // color: white;
  gap: 4px;
  padding: 0px;
  box-sizing: border-box;
  // border: 1px solid #444; /* debug */
}

.summary-col-left {
  grid-column: 1;
  grid-row: 1 / span 2;
  // background: #2c2c2c;
  padding-top: 0px;
  padding-right: 0px;
  padding-bottom: 0px;
  padding-left: 0px;
  
  display: flex;                 /* Attiva Flexbox */
  justify-content: center;      /* Centra orizzontalmente */
  align-items: center;          /* Centra verticalmente */

  width: 100%;
  max-width: 100%;
  aspect-ratio: 1 / 1; /* opzionale: mantiene forma quadrata */
  overflow: hidden;
}

.summary-top-right {
  grid-column: 2 / span 2; /* occupa colonne 2 e 3 */
  grid-row: 1;
  // background: #3c3c3c;
  padding-top: 0px;
  padding-right: 8px;
  padding-bottom: 0px;
  padding-left: 8px;
  display: flex;            /* aggiunto */
  align-items: center;      /* centra verticalmente */
  justify-content: flex-start; /* allinea a sinistra */
}

.summary-bottom-right-left {
  grid-column: 2;
  grid-row: 2;
  // background: #4c4c4c;
  padding-top: 0px;
  padding-right: 8px;
  padding-bottom: 0px;
  padding-left: 8px;

  display: flex;                 /* Attiva Flexbox */
  justify-content: center;      /* Centra orizzontalmente */
  align-items: center;          /* Centra verticalmente */
}

.summary-bottom-right-right {
  grid-column: 3;
  grid-row: 2;
  // background: #5c5c5c;
  padding-top: 0px;
  padding-right: 8px;
  padding-bottom: 0px;
  padding-left: 8px;
}

.weather-condition-icon {
  width: 100%;
  height: auto;
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
  // max-width: 100%;
  // max-height: 100%;
  // width: 72px;
  // height: 72px;
  // object-fit: contain;

  transition: transform 0.2s ease;
}
  
.summary-col-left:hover .weather-condition-icon {
  transform: scale(1.05);
}

.weather-city-name {
  font-size: clamp(1em, 2vw, 1.2em);
  text-align: left;
}

.moon-row {
  display: flex;
  align-items: center;
  gap: 6px;
  // font-size: 0.95em;
  // color: #eeeeee;
}

.summary-moon-icon {
  font-size: 1.8em;
  display: inline-block;
}

.temperature-block {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  text-align: right;
}

.temperature {
  font-size: 1.6em;
  font-weight: bold;
}

.temp-unit {
  font-size: 0.95em;
  vertical-align: super;
  margin-left: 2px;
}

.feels-like {
  font-size: 0.85em;
  // color: #aaaaaa;
}

.summary-wrapper {
  position: relative;
  width: 100%;
  height: 100%;
  min-height: 100px; /* oppure clamp() dinamico */
  overflow: visible;
}

.lightning-background {
  position: absolute;
  inset: 0; /* top: 0; right: 0; bottom: 0; left: 0 */
  pointer-events: none;
  z-index: 0;
}

.lightning-flash {
  position: absolute;
  width: 2px;
  background: white;
  opacity: 0.7;
  transform: translate(-50%, -50%);
  animation-name: flash-blink;
  animation-timing-function: ease-in-out;
  animation-iteration-count: infinite;
  border-radius: 1px;
  filter: blur(0.5px);
  box-shadow: 0 0 4px rgba(255,255,255,0.6);

  z-index: 0;
}

@keyframes flash-blink {
  0%, 100% {
    opacity: 0.1;
  }
  50% {
    opacity: 0.9;
  }
}

.lightning-flash-zigzag {
  position: absolute;
  width: 2px;
  height: 0;
  background: linear-gradient(to bottom, yellow, white);
  clip-path: polygon(var(--points));
  animation: flash-zigzag linear forwards;
  z-index: 3;
}

@keyframes flash-zigzag {
  0% {
    opacity: 1;
    transform: scaleY(1);
  }
  100% {
    opacity: 0;
    transform: scaleY(1.2);
  }
}

.lightning-svg {
  position: absolute;
  transform: translate(-50%, 0);
  opacity: 0;
  filter: drop-shadow(0 0 4px rgba(98, 61, 173, 0.6));
  animation-name: flash-zigzag-svg;
  animation-timing-function: ease-in-out;
  animation-iteration-count: 1;
  z-index: 3;
}

@keyframes flash-zigzag-svg {
  0%, 100% {
    opacity: 0;
  }
  40% {
    opacity: 1;
  }
  60% {
    opacity: 0.5;
  }
}
`,Ye=o`
.present-grid-container {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.present-row {
  display: flex;
  justify-content: space-between;
  gap: 16px;
}

.present-left,
.present-right {
  flex: 1;
}

.present-left {
  display: flex;
  justify-content: flex-start;
}

.present-right {
  display: flex;
  justify-content: flex-end;
}

.present-value-block {
  display: flex;
  align-items: center;
  gap: 4px;
}

.present-unit {
  font-size: 0.9em;
  opacity: 0.8;
}
`,Qe=o`
.ultraviolet-grid-container {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.ultraviolet-row {
  display: flex;
  justify-content: space-between;
  gap: 16px;
}

.ultraviolet-left,
.present-right {
  flex: 1;
}

.ultraviolet-left {
  display: flex;
  justify-content: flex-start;
}

.ultraviolet-right {
  display: flex;
  justify-content: flex-end;
}

.ultraviolet-value-block {
  display: flex;
  align-items: center;
  gap: 4px;
}

.ultraviolet-unit {
  font-size: 0.9em;
  opacity: 0.8;
}

------------------------------------------------------------------

// .ultraviolet-grid-container {
//   display: flex;
//   flex-direction: column;
//   gap: 12px;
// }

// .ultraviolet-row {
//   display: flex;
//   justify-content: space-between;
//   padding: 4px 0;
// }

// .ultraviolet-value-block {
//   display: flex;
//   align-items: center;
//   gap: 4px;
// }

// .ultraviolet-unit {
//   font-size: 0.9em;
//   opacity: 0.7;
// }

.ultraviolet-skin-type-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(48px, 1fr));
  gap: 8px;
  margin-top: 8px;
}

.ultraviolet-skin-type-cell {
  flex: 1;
  min-width: 48px;
  height: 48px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  border-radius: 6px;
  font-family: 'Segoe UI', sans-serif;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  color: black;
}

.ultraviolet-skin-type-label {
  font-weight: bold;
  font-size: 0.95em;
  line-height: 1em;
}

.ultraviolet-exposure-time {
  font-size: 0.75em;
  margin-top: 2px;
  color: #222;
  opacity: 0.85;
}






`,Ke=o`
.pollen-grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(48px, 1fr));
  gap: 8px 12px;
  width: 100%;
  justify-items: center;
  align-items: end;
  padding: 8px 4px;
  box-sizing: border-box;
}


.pollen-stack {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 4px;
  min-width: 48px;
}


  .levels {
    display: flex;
    flex-direction: column-reverse;
    gap: clamp(1px, 0.2vw, 2px);
  }

  .level {
    width: clamp(16px, 3.5vw, 24px);
    height: clamp(5px, 0.7vw, 8px);     /* 👈 anche in altezza */
    border-radius: 3px;
    opacity: 0.3;
    transition: opacity 0.2s ease;
  }

  .level.active {
    opacity: 1;
    outline: 1px solid #333;
  }

  .molto-alto {
    background-color: #f44336;
  }

  .alto {
    background-color: #ff9800;
  }

  .moderato {
    background-color: #ffeb3b;
  }

  .basso {
    background-color: #4caf50;
  }

  .pollen-name {
    font-size: clamp(0.55em, 1.3vw, 0.85em); /* 👈 stringe di più */
    // font-weight: 500;
    text-align: center;
    // color: #333;
    white-space: nowrap;
  }

  .label {
    width: 100%;
    text-align: center;
    font-size: clamp(0.55em, 1.3vw, 0.85em);
    // font-weight: 500;
    margin-top: clamp(4px, 0.5vw, 8px);
  }
`,Ge=o`
  .camera-container {
    margin-top: 10px;
    width: 100%;
    display: flex;
    align-items: stretch;
  }

  .camera-image {
    aspect-ratio: 16 / 9;
    width: 100%;
    position: relative;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .camera-image > img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
`,Xe=o`

.weather-forecast-grid-container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(78px, 1fr));
  column-gap: 2px; /* spazio orizzontale tra i giorni */
  row-gap: 6px;    /* spazio verticale tra righe, se ci sono */
  align-items: stretch;
  font-family: 'Segoe UI', sans-serif;
  width: 100%;
}
  
.weather-forecast-grid-wrapper {
  display: flex;
  flex-direction: column;
  align-items: center; /* centrare il titolo orizzontalmente */
}

.weather-forecast-title {
  font-size: clamp(0.85em, 1vw, 0.95em);
  font-weight: bold;
  // margin-bottom: 0.5em;
  text-align: center;
}

.weather-forecast-slot {
  text-align: center;
  padding: 8px 4px;
  min-width: 0;
  overflow: hidden;
}

.weather-forecast-slot:last-child {
  border-right: none;
}

.weather-forecast-label-slot {
  font-size: 0.9em;
  font-weight: bold;
  margin-bottom: 6px; /* ridotto */
}

.weather-forecast-icon {
  font-size: 1.6rem; /* ridotto */
  /* margin: 6px 0; ridotto */
  height: 32px;
}

.weather-forecast-temperature {
  font-size: clamp(0.8em, 1vw, 0.9em); /* leggermente più piccolo */
  margin: 4px 0; /* meno margine */
}

.weather-forecast-temperature .high {
  font-weight: bold;
}

.weather-forecast-precipitation {
  font-size: clamp(0.65em, 1vw, 0.75em);
  line-height: 1.2; /* compatta verticalmente */
}

.weather-forecast-precipitation .mm {
  font-weight: bold;
}
`,et=o`
.meteodcpalarm-grid-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 16px;
  padding: 12px;
}

.meteodcpalarm-group {
  display: flex;
  flex-direction: column;
  align-items: center;
  flex: 1 1 72px;     /* 👈 cresce, ma non scende sotto i 72px */
  max-width: 220px;   /* 👈 opzionale: previene allargamento eccessivo */
  text-align: center;
}

.meteodcpalarm-group ha-icon {
  --mdc-icon-size: 36px;
}

.meteodcpalarm-label {
  margin-top: 6px;
  font-size: 0.85em;
  color: var(--primary-text-color);
}


`,tt=(e,t,i)=>{const n="below_horizon"===i,a=(n?t.iconsNight:t.iconsDay)[e];return t.path||console.info("Image path not found."),a?`${t.path}/${t.iconType}/${a}.svg`:(console.info(`Icons issue. Model=${t.icons_model}, Time=${n?"night":"day"}, Condition=${e}`),"")};function it(e){return!!e&&e.themes.darkMode}async function nt(){const[e,t]=await Promise.all([Ve(`${me}/static/cloudy.svg`),Ve(`${ge}/static/cloudy.svg`)]);let i=null;if(i=e?me:t?ge:null,!i)return We(`${pe} - Impossibile determinare il path immagini.`),{translations:[],imagePath:null};const n=`${i}/../transl/`;return{translations:await Promise.all(["en","it","nl","es","de","fr","sr-latn","pt","da","no-NO","cs"].map((e=>async function(e){try{const t=await fetch(e);if(!t.ok){const i=`ERROR retrieving JSON file: '${e}', status: ${t.status} ${t.statusText}`;throw console.info(i),new Error(i)}return console.info(`Locale '${e}' loaded`),await t.text()}catch(t){throw console.info(`Fetch failed for '${e}':`,t),t}}(`${n}${e}.json`)))),imagePath:i}}class at extends oe{constructor(){super(...arguments),this.isPanel=!1,this.editMode=!1,this.invalidConfig=!1,this._hasPresent=!1,this._hasDailyForecasts=!1,this._hasHourlyForecasts=!1,this._hasMarineDailyForecasts=!1,this._hasMarineHourlyForecasts=!1,this._hasMetealarm=!1,this._hasDPCalarm=!1,this._hasMeteogram=!1,this._hasAirQuality=!1,this._hasPollen=!1,this._hasUltraviolet=!1,this._hasAlert=!1,this._hasSea=!1,this._hasCamera=!1}updated(e){if(super.updated(e),e.has("hass")&&this.hass){const t=it(e.get("hass")),i=it(this.hass);t!==i&&this.toggleAttribute("dark-mode",i)}}static get styles(){return[o`
        :host {
          ${he}
        }
        :host([dark-mode]) {
          ${ue}
        }
        ${o`
${Ze}
${Je}
${Ye}
${Xe}
${Qe}
${Ke}
${Ge}
${et}
`}
      `]}async setConfig(e){if(!e)throw this.invalidConfig=!0,new Error("Invalid configuration");if(!this._translations?.length||!this._imagesPath){const{translations:e,imagePath:t}=await nt();this._translations=e,this._imagesPath=t}this._name=e?.weather?.name??void 0,this._language=e.language?.toLowerCase()||"en",this._loadTranslations(this._language),this._detectDataSections(e),this._setupIcons(e.weather?.icons_model),this._config=e,We(`${pe} - Config loaded.`)}getCardSize(){return 1}_loadTranslations(e){try{const t=JSON.parse(this._translations[_e[e]]);this._terms={windDirections:t.cwcLocWindDirections,words:t.cwcTerms},We(`${pe}%c card "${this._name}", locale is '${e}'.`,ye,fe,ve)}catch(t){const i="en",n=JSON.parse(this._translations[_e[i]]);this._terms={windDirections:n.cwcLocWindDirections,words:n.cwcTerms},We(`${pe}%c card "${this._name}" unable to use '${e}' locale, set as default '${i}'.`,ye,fe,ve)}}_detectDataSections(e){this._hasPresent=!!e.weather?.present,this._hasDailyForecasts=!!e.weather?.daily_forecasts,this._hasHourlyForecasts=!!e.weather?.hourly_forecasts,this._hasMarineDailyForecasts=!!e.weather?.marine_daily_forecasts,this._hasMarineHourlyForecasts=!!e.weather?.marine_hourly_forecasts,this._hasMetealarm=!!e.weather?.meteoalarm,this._hasDPCalarm=!!e.weather?.dpcalarm,this._hasAirQuality=!!e.airquality,this._hasPollen=e.pollen&&Array.isArray(e.pollen.entities)&&e.pollen.entities.length>0,this._hasUltraviolet=!!e.ultraviolet,this._hasCamera=!!e.camera}_setupIcons(e){if(this._iconsConfig={path:this._imagesPath,iconType:this._config?.weather?.animation?"animated":"static",icons_model:e||"pirateweather",iconsDay:Ie,iconsNight:Ne},e){const t=(e=>{const t=e.toLowerCase()??"climacell";if(t in Pe){const{iconsDay:e,iconsNight:i}=Pe[t];return{iconsModel:t,iconsDay:e,iconsNight:i}}console.warn(`Unknown icons model: ${t}. Falling back to 'climacell'.`);const i=Pe.climacell;return{iconsModel:"climacell",iconsDay:i.iconsDay,iconsNight:i.iconsNight}})(e);this._iconsConfig.icons_model=t.iconsModel,this._iconsConfig.iconsDay=t.iconsDay,this._iconsConfig.iconsNight=t.iconsNight}}render(){return this.invalidConfig?F`
        <ha-card class="ha-card-weather-conditions">
            <div class='banner'>
                <div class="header">ha-card-weather-conditions</div>
            </div>
            <div class='content'>
                Configuration ERROR!
            </div>
        </ha-card>
    `:this._render()}}e([de({attribute:!1})],at.prototype,"hass",void 0),e([de({attribute:!1})],at.prototype,"_config",void 0);const st=(e,t,i,n,a,s,o,r)=>{const l=Me(e,r),c=l?qe[l.toLowerCase()]:"";const d=Me(e,o),h=Me(e,s.condition)?.toLowerCase()||"na",u=s.temperature?je({entityId:s.temperature,hass:e,lang:t})??void 0:void 0,p=s.temperature_feelslike?je({entityId:s.temperature_feelslike,hass:e,lang:t})??void 0:void 0,m=e.states[s.temperature_feelslike]?.attributes.icon??"";return(({title:e,moonText:t,moonIcon:i,conditionText:n,conditionIcon:a,temperature:s,temperatureUnit:o,feelsLikeTerm:r,temperatureFeelsLike:l,temperatureFeelsLikeIcon:c})=>a||t||s?F`
    <div class="summary-wrapper">
      ${W}
      <div class="summary-grid-container">
        ${a?F`
          <div class="summary-col-left">
            <img class="weather-condition-icon" src="${a}" alt="${n}" />
          </div>
        `:W}
        ${e?F`
          <div class="summary-top-right">
            <span class="weather-city-name">${e}</span>
          </div>    
        `:W}
        ${t?F`
          <div class="summary-bottom-right-left">
            <div class="moon-row">
              <span class="summary-moon-icon">${i}</span>
              <span class="summary-moon-text">${t}</span>
            </div>  
          </div>   
        `:W}
        ${s?F`
          <div class="summary-bottom-right-right">
            <div class="temperature-block">
              <div>
                <span class="temperature">${s}</span>
                <span class="temp-unit">${o}</span>
              </div>
              ${l&&F`<div class="feels-like">${r} <div>${l} ${o}</div></div>`}
            </div>  
          </div>
          `:W}
      </div>
    </div>
    `:F``)({title:a??void 0,moonText:r?Te(l,i.words):void 0,moonIcon:c,conditionText:h,conditionIcon:tt(h,n,d),temperature:u,temperatureUnit:Re(e,s.temperature),feelsLikeTerm:Te("Feels Like",i.words),temperatureFeelsLike:p,temperatureFeelsLikeIcon:m})},ot=e=>"string"==typeof e||"number"==typeof e,rt=(e,t)=>{const i=[],n=e.precipitationIntensity?.value,a=e.precipitationProbability?.value;if(ot(n)&&ot(a)){const s=De(t),o=Be(n,s),r=Be(a,s);!Number.isNaN(Number(o))&&!Number.isNaN(Number(r))&&o>0&&r>0&&i.push({icon:e.precipitationIntensity.icon||e.precipitationProbability.icon||"mdi:weather-rainy",value:`${e.precipitationIntensity.value} ${e.precipitationIntensity.unit} / ${e.precipitationProbability.value} ${e.precipitationProbability.unit}`})}void 0!==e.temperatureLow?.value&&void 0!==e.temperatureHigh?.value&&i.push({icon:e.temperatureLow.icon||e.temperatureHigh.icon||"mdi:thermometer",value:`${e.temperatureLow.value} / ${e.temperatureHigh.value}`,unit:e.temperatureLow.unit||e.temperatureHigh.unit});return["humidity","pressure","visibility"].forEach((t=>{return n=e[t],void(void 0!==n?.value&&i.push(n));var n})),void 0===e.windSpeed?.value&&void 0===e.windBearing?.value||i.push({icon:e.windSpeed?.icon||"mdi:weather-windy",value:`${e.windBearing?.value?`${e.windBearing.value} `:""}${e.windSpeed?.value??""}`,unit:e.windSpeed?.unit?`${e.windSpeed.unit}`:""}),["nextRising","nextSetting"].forEach((t=>{const n=e[t];n?.value&&i.push({icon:n.icon,value:n.value,unit:""})})),i},lt=(e,t)=>{const i=[];return["epa_aqi","epa_primary_pollutant","pm25","pm10","o3","no2","co","so2"].forEach((t=>{return n=e[t],void(void 0!==n?.value&&i.push(n));var n})),i},ct=(e,t)=>{const i=[],n=e=>F`
    <span class="present-value-block">
      ${e.value}${e.unit?F`<span class="present-unit">${e.unit}</span>`:""}
      <ha-icon icon="${e.icon}" style=${e.icon_color?`color: ${e.icon_color}`:""}></ha-icon>
    </span>
  `;i.push(...rt(e,t),...lt(e));const a=[];for(let e=0;e<i.length;e+=2){const t=i[e],o=i[e+1];(t&&t.value||o&&o.value)&&a.push(F`
        <div class="present-row">
          <div class="present-left">${t?(s=t,F`
    <span class="present-value-block">
      <ha-icon icon="${s.icon}" style=${s.icon_color?`color: ${s.icon_color}`:""}></ha-icon>
      ${s.value}${s.unit?F`<span class="present-unit">${s.unit}</span>`:""}
    </span>
  `):F``}</div>
          <div class="present-right">${o?n(o):F``}</div>
        </div>
      `)}var s;return a.length>0?F`
    <div class="present-grid-container">
      ${a}
    </div>
  `:F``},dt=(e,t,i,n,a)=>{const s=t||e.selectedLanguage||e.language,o=((e,t,i,n,a)=>{const s=Ue(t),o=a?e.states[a]:void 0,{next_rising:r,next_setting:l}=o?.attributes??{};return{nextRising:{value:r?new Date(r).toLocaleTimeString(s.locale,{hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1,timeZone:s.timezone}):void 0,icon:"mdi:weather-sunset-up"},nextSetting:{value:r?new Date(l).toLocaleTimeString(s.locale,{hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1,timeZone:s.timezone}):void 0,icon:"mdi:weather-sunset-down"},precipitationIntensity:{value:je({entityId:n.precipitation_intensity,hass:e,lang:t,decimals:2}),unit:Re(e,n.precipitation_intensity),icon:"mdi:weather-rainy"},precipitationProbability:{value:je({entityId:n.precipitation_probability,hass:e,lang:t,decimals:0}),unit:Re(e,n.precipitation_probability),icon:"mdi:weather-rainy"},humidity:{value:je({entityId:n.humidity,hass:e,lang:t,decimals:0}),unit:Re(e,n.humidity),icon:"mdi:water-percent"},windBearing:{value:Fe(Me(e,n.wind_bearing),i)},windSpeed:{value:je({entityId:n.wind_speed,hass:e,lang:t,decimals:0}),unit:Re(e,n.wind_speed),icon:"mdi:weather-windy"},pressure:{value:je({entityId:n.pressure,hass:e,lang:t,decimals:0}),unit:Re(e,n.pressure),icon:"mdi:gauge"},visibility:{value:je({entityId:n.visibility,hass:e,lang:t,decimals:0}),unit:Re(e,n.visibility),icon:"mdi:weather-fog"},temperatureHigh:{value:je({entityId:n.temperature_max,hass:e,lang:t,decimals:0}),unit:Re(e,n.temperature_max),icon:"mdi:thermometer"},temperatureLow:{value:je({entityId:n.temperature_min,hass:e,lang:t,decimals:0}),unit:Re(e,n.temperature_min),icon:"mdi:thermometer"}}})(e,s,i.windDirections,n,a);return ct({...o},s)},ht=["I","II","III","IV","V","VI"],ut=["#F1D1B1","#E4B590","#CF9F7D","#B67851","#A15E2D","#513938"],pt=(e,t)=>{const i=[],n=e=>F`
    <span class="ultraviolet-value-block">
      ${e.value}${e.unit?F`<span class="ultraviolet-unit">${e.unit}</span>`:""}
      <ha-icon icon="${e.icon}" style="${"on"===e.value?"color: red;":""}"></ha-icon>
    </span>
  `,a=(e,t)=>{void 0!==t?.value&&i.push(t)};let s=["protectionWindow","currentUVLevel"];s.forEach((t=>a(0,e[t]))),void 0!==e.currentUVIndex?.value&&void 0!==e.maxUVIndex?.value&&i.push({icon:e.currentUVIndex.icon||e.maxUVIndex.icon||"mdi:weather-sunny",value:`${e.currentUVIndex.value} / ${e.maxUVIndex.value}`,unit:e.currentUVIndex.unit||e.maxUVIndex.unit}),s=["currentOzoneLevel"],s.forEach((t=>a(0,e[t])));const o=[];for(let e=0;e<i.length;e+=2){const t=i[e],a=i[e+1];o.push(F`
      <div class="ultraviolet-row">
        <div class="ultraviolet-left">${t?(r=t,F`
    <span class="ultraviolet-value-block">
      <ha-icon icon="${r.icon}" style="${"on"===r.value?"color: red;":""}"></ha-icon>
      ${r.value}${r.unit?F`<span class="ultraviolet-unit">${r.unit}</span>`:""}
    </span>
  `):F``}</div>
        <div class="ultraviolet-right">${a?n(a):F``}</div>
      </div>
    `)}var r;const l=[t.skinType1,t.skinType2,t.skinType3,t.skinType4,t.skinType5,t.skinType6],c=F`
  <div class="ultraviolet-skin-type-grid">
  ${l.map(((e,t)=>{const i=ut[t],n=(e=>{const t=e.replace("#","");return(299*parseInt(t.substr(0,2),16)+587*parseInt(t.substr(2,2),16)+114*parseInt(t.substr(4,2),16))/1e3>125?"#000":"#fff"})(i);return F`
      <div
        class="ultraviolet-skin-type-cell"
        style="background: ${i};"
        title="Fototipo ${ht[t]}"
      >
        <div class="ultraviolet-skin-type-label">${ht[t]}</div>
        <div class="ultraviolet-exposure-time" style="color: ${n};">${e.value||"--"}</div>
      </div>
    `}))}
  </div>
  `;return F`
    <div class="ultraviolet-grid-container">
      ${o}
      ${c}
    </div>
  `},mt=e=>{const t="string"==typeof e&&"unknown"===e.toLowerCase()?NaN:Number(e);if(!Number.isFinite(t)||t<0)return"--";const i=Math.floor(t/60),n=t%60;return i>0?`${i}:${function(e,t,i="0"){return e.toString().padStart(t,i)}(n,2)} h`:`${n} m`},gt=(e,t,i)=>({protectionWindow:{value:Me(e,i.protection_window)&&"unknown"!==Me(e,i.protection_window)?Me(e,i.protection_window):"off",icon:"mdi:sunglasses"},currentUVLevel:{value:Me(e,i.uv_level),icon:"mdi:weather-sunny"},currentUVIndex:{value:je({entityId:i.uv_index,hass:e,lang:t}),unit:"UV Idx",icon:"mdi:weather-sunny"},maxUVIndex:{value:je({entityId:i.max_uv_index,hass:e,lang:t}),unit:"UV Idx",icon:"mdi:weather-sunny"},currentOzoneLevel:{value:je({entityId:i.ozone_level,hass:e,lang:t}),unit:"DU",icon:"mdi:vector-triangle"}}),yt=(e,t,i)=>({skinType1:{value:mt(je({entityId:i.set_skin_type_1,hass:e,lang:t}))},skinType2:{value:mt(je({entityId:i.set_skin_type_2,hass:e,lang:t}))},skinType3:{value:mt(je({entityId:i.set_skin_type_3,hass:e,lang:t}))},skinType4:{value:mt(je({entityId:i.set_skin_type_4,hass:e,lang:t}))},skinType5:{value:mt(je({entityId:i.set_skin_type_5,hass:e,lang:t}))},skinType6:{value:mt(je({entityId:i.set_skin_type_6,hass:e,lang:t}))}}),ft=["basso","moderato","alto","molto-alto","estremo"],vt=(e,t,i)=>{const n=i-t+1,a=ft.slice(0,n);return 0===e.length?F``:F`
    <div class="pollen-grid-container">
      ${e.map((e=>{const n=((e,t,i)=>{const n=(i-t+1)/ft.length,a=Math.floor((e-t)/n);return Math.min(a,ft.length-1)})(e.value,t,i);return F`
          <div class="pollen-stack">
            <div class="levels">
              ${a.map(((e,t)=>F`
                <div
                  class="level ${e} ${t===n?"active":""}"
                  title="${e}"
                ></div>
              `))}
            </div>
            <div class="pollen-name">${e.name}</div>
          </div>
        `}))}
    </div>
  `},_t=(e,t,i)=>{const n=[];return Array.isArray(i.entities)&&i.entities.length>0&&i.entities.forEach((t=>{const a=Me(e,t.entity);if(a&&"unknown"!==a&&"unavailable"!==a){let a=((e,t="en-US")=>{if("number"==typeof e)return e;const i=new Intl.NumberFormat(t).formatToParts(1234567.89),n=i.find((e=>"group"===e.type))?.value||"",a=i.find((e=>"decimal"===e.type))?.value||".",s=e.replace(new RegExp(`\\${n}`,"g"),"").replace(new RegExp(`\\${a}`),".");return Number(s)})(Me(e,t.entity));(Number.isNaN(a)||a<i.min||a>i.max)&&(a=0),n.push({name:t.name,value:a})}})),vt(n,i.min,i.max)},wt=(e,t)=>{const i=t.map((e=>{const t=e.reference?.value,i=e.condition?.img,n=e.condition?.icon,a=e.condition?.iconColor,s=e.temperature_low?.value,o=e.temperature_high?.value,r=e.temperature_high?.unit||e.temperature_low?.unit,l=Number(e.precipitation_probability?.value??0),c=e.precipitation_intensity?.value,d=e.precipitation_intensity?.unit,h=e.temperature?.value,u=e.temperature?.unit||e.temperature_feelslike?.unit,p=e.temperature_feelslike?.value,m=e.wind_speed?.value,g=e.wind_speed?.unit,y=e.wind_bearing?.value,f=e.wind_wave_height_max?.value,v=e.swell_wave_height_max?.value,_=e.wave_height_max?.value,w=e.wave_direction?.value,$=e.wave_direction?.icon,x=e.wave_height_max?.unit;return F`
      <div class="weather-forecast-slot">
        ${t?F`<div class="weather-forecast-label-slot">${t}</div>`:""}
        ${i?F`<img class="weather-forecast-icon" src="${i}" alt="${i}" />`:""}
        ${n?F`<ha-icon icon="${n}" style=${a?`color: ${a}`:""}></ha-icon>`:""}
        ${void 0!==s&&void 0!==o?F`
                <div class="weather-forecast-temperature">
                  ${s} / <span class="high">${o}${r?` ${r}`:""}</span>
                </div>
              `:""}
        ${void 0!==h&&void 0!==p?F`
                <div class="weather-forecast-temperature">
                  ${h} / <span class="high">${p}${u?` ${u}`:""}</span>
                </div>
              `:""}
        ${void 0!==m&&void 0!==y?F`
                <div class="weather-forecast-temperature">
                  ${m} ${g} ${y}</span>
                </div>
              `:""}
        ${void 0!==_?F`
                <div class="weather-forecast-temperature">
                  ${_} ${x?` ${x}`:""}
                </div>
              `:""}
        ${void 0!==w?F`
                <div class="weather-forecast-temperature">
                  ${$?F`<ha-icon
                        icon="mdi:arrow-up-thin"
                        style="display:inline-block; transform: rotate(${$}deg);"
                      ></ha-icon>`:""} ${w}
                </div>
              `:""}
        ${void 0!==f&&void 0!==v?F`
                <div class="weather-forecast-temperature">
                  ${v} / ${f} ${x?` ${x}`:""}
                </div>
              `:""}
        ${void 0!==l&&void 0!==c&&0!==l?F`
                <div class="weather-forecast-precipitation">
                  ${l} % / <span class="mm">${c}${d?` ${d}`:""}</span>
                </div>
              `:""}
      </div>
    `}));let n="Daily";return 1===e?n="Hourly":2===e?n="Marine daily":3===e&&(n="Marine hourly"),F`
  <div class="weather-forecast-grid-wrapper">
    <div class="weather-forecast-title">${n} forecast</div>
    <div class="weather-forecast-grid-container">
      ${i}
    </div>
  </div>
  `},$t=e=>e.includes("temperature")?"mdi:thermometer":e.includes("precipitation")?"mdi:weather-rainy":"mdi:help-circle-outline",xt=(e,t,i,n,a,s,o,r,l,c)=>{const d=[],h=Me(e,c);let u=d;if(n){u=Object.keys(n.condition||n.temperature_high||n.temperature_low||n.precipitation_intensity||n.precipitation_probability||{}).map((i=>((e,t,i,n,a,s,o)=>{const r={},l=Ue(t);let c;if(i.condition&&i.condition[o]&&(r.condition={img:tt(Me(e,i.condition[o]),a,s)}),["temperature_high","temperature_low","precipitation_intensity","precipitation_probability"].forEach((n=>{const a=i[n],s=a?.[o];let l=0;s&&("precipitation_intensity"===n&&(l=2),c=new Date(Le(e,s,"datetime")),r[n]={value:je({entityId:s,hass:e,lang:t,decimals:l}),unit:Re(e,s),img:He(e,s)||$t(n)})})),c&&Object.keys(r).length>0){const e=c.toLocaleDateString(l.locale,{weekday:"short",timeZone:"UTC"}),t=c.toLocaleTimeString(l.locale,{hour:"2-digit",minute:"2-digit",timeZone:l.timezone});r.reference={value:0===n?e.toUpperCase():t}}return r})(e,t,n,r,l,h,i)))}let p=d;if(a){p=Object.keys(a.condition||a.temperature||a.temperature_feelslike||a.precipitation_intensity||a.precipitation_probability||{}).map((n=>((e,t,i,n,a,s,o,r)=>{const l={},c=Ue(t);let d;if(n.condition&&n.condition[r]&&(l.condition={img:tt(Me(e,n.condition[r]),s,o)}),n.wind_bearing&&n.wind_bearing[r]&&(l.wind_bearing={value:Fe(Me(e,n.wind_bearing[r]),i)}),["temperature","temperature_feelslike","precipitation_intensity","precipitation_probability","wind_speed"].forEach((i=>{const a=n[i],s=a?.[r];let o=0;s&&("precipitation_intensity"===i&&(o=2),d=new Date(Le(e,s,"datetime")),l[i]={value:je({entityId:s,hass:e,lang:t,decimals:o}),unit:Re(e,s),img:He(e,s)||$t(i)})})),d&&Object.keys(l).length>0){const e=d.toLocaleTimeString(c.locale,{hour:"2-digit",minute:"2-digit",timeZone:c.timezone});l.reference={value:e}}return l})(e,t,i.windDirections,a,0,l,h,n)))}let m=d;if(s){m=Object.keys(s.swell_wave_height_max||s.wave_direction||s.wave_height_max||s.wind_wave_height_max||{}).map((n=>((e,t,i,n,a,s,o,r)=>{const l={},c=Ue(t);let d;var h,u,p;if(n.wave_height_max&&n.swell_wave_height_max&&n.wind_wave_height_max&&n.swell_wave_height_max[r]&&n.wind_wave_height_max[r]&&(l.condition={icon:"mdi:flag-variant",iconColor:(h=n.wave_height_max[r],u=n.swell_wave_height_max[r],p=n.wind_wave_height_max[r],h>=1.8||u>=1.5&&p>=.8?"red":h>=1||u>=.8||p>=.6?"yellow":"green")}),n.wave_direction&&n.wave_direction[r]&&(l.wave_direction={value:Fe(Me(e,n.wave_direction[r]),i),icon:Me(e,n.wave_direction[r])}),["wave_height_max","swell_wave_height_max","wind_wave_height_max"].forEach((i=>{const a=n[i],s=a?.[r];s&&(d=new Date(Le(e,s,"datetime")),l[i]={value:je({entityId:s,hass:e,lang:t,decimals:1}),unit:Re(e,s),img:He(e,s)||$t(i)})})),d&&Object.keys(l).length>0){const e=d.toLocaleDateString(c.locale,{weekday:"short",timeZone:"UTC"}),t=d.toLocaleTimeString(c.locale,{hour:"2-digit",minute:"2-digit",timeZone:c.timezone});l.reference={value:2===a?e.toUpperCase():t}}return l})(e,t,i.windDirections,s,r,0,0,n)))}switch(r){case 0:return wt(r,u);case 1:return wt(r,p);case 2:return wt(r,m);default:return wt(r,d)}},bt=(e,t,i,n,a)=>{const s=a&&e.states[a],o=s?.attributes?.entity_picture;return((e,t,i,n)=>i?F`
    <div 
      class="camera-container"
      @click=${i=>e(i,t)}
    >
      <div class="camera-image">
        <img 
          src="${i}" 
          alt="${n}"
          loading="lazy"
        />
      </div>
    </div>
  `:F``)(n,a,o,s?.attributes?.friendly_name??a)};const At=(e,t,i,n)=>{const a={wind:"mdi:weather-windy","snow-ice":"mdi:snowflake-alert",thunderstorm:"mdi:weather-lightning",fog:"mdi:weather-fog","high-temperature":"mdi:weather-sunny-alert","low-temperature":"mdi:thermometer-low","coastal-event":"mdi:home-flood","forest-fire":"mdi:pine-tree-fire",avalanche:"mdi:image-filter-hdr",rain:"mdi:weather-pouring",flood:"mdi:home-flood","rain-flood":"mdi:weather-pouring","marine-hazard":"mdi:weather-hurricane",drought:"mdi:water-off"},s={green:"green",yellow:"#ffa600",orange:"orange",red:"red"},o=n&&e.states[n];if(!o?.attributes)return{};const r={};if("on"===o.state&&o.attributes){const e=Ue(t),{event:i,severity:n,awareness_type:l,awareness_level:c,effective:d}=o.attributes,h=l?.split(";")[1]?.trim().toLowerCase()||"",u=c?.split(";")[1]?.trim().toLowerCase()||"",p=i||"",m=n?.split(";")[1]?.trim()||"";(e=>{const t=new Date(e),i=new Date,n=new Date(i.getFullYear(),i.getMonth(),i.getDate()),a=new Date(t.getFullYear(),t.getMonth(),t.getDate()),s=Math.round((a.getTime()-n.getTime())/864e5);let o;o=0===s?"oggi":1===s?"domani":2===s?"dopodomani":void 0})(d),r.meteoalarm={event:p,severity:m,icon:a[h]||"mdi:alert",icon_color:s[u]||"grey",datetime:new Date(d).toLocaleDateString(e.locale,{weekday:"short",timeZone:e.timezone}).toLocaleUpperCase()}}return r},zt=(e,t,i,n)=>{if(!n)return{};const a=Ue(t),s={0:"gray",1:"green",2:"#ffa600",3:"orange",4:"red"},o={};return["thunderstorms","hydraulic","hydrogeological"].forEach((t=>{const i=n[t],r=i&&e.states[i];if(r&&"on"===r.state&&r.attributes){const{level:e,info:i,icon:n}=r.attributes;o[t]={event:i,severity:e,icon:n,icon_color:s[e],datetime:(new Date).toLocaleDateString(a.locale,{weekday:"short",timeZone:a.timezone}).toLocaleUpperCase()}}})),o},Et=(e,t,i,n,a)=>{const s={...At(e,t,0,n),...zt(e,t,0,a)};return(o=s)&&0!==Object.keys(o).length?F`
  <div class="meteodcpalarm-grid-container">
    ${Object.entries(o).map((([e,t])=>F`
      <div class="meteodcpalarm-group">
        <ha-icon icon="${t.icon}" style="color: ${t.icon_color};"></ha-icon>
        <div class="meteodcpalarm-label">${t.datetime}</div>
        <div class="meteodcpalarm-label">${t.event}</div>
      </div>
    `))}
  </div>
  `:F``;var o},{translations:kt,imagePath:St}=await nt();let Ct=class extends at{constructor(){super(...arguments),this._translations=kt,this._imagesPath=St}_render(){return F`
      <ha-card class="ha-card-weather-conditions">
        <div class="nd-container">
          ${this._buildTemplate()}
        </div>
      </ha-card>
    `}_buildTemplate(){let e=F``,t=F``,i=F``,n=F``,a=F``,s=F``,o=F``,r=F``,l=F``,c=F``,d=F``;const h=e=>xt(this.hass,this._language,this._terms,this._config.weather.daily_forecasts,this._config.weather.hourly_forecasts,this._config.weather.marine_daily_forecasts,this._config.weather.marine_hourly_forecasts,e,this._iconsConfig,this._config.weather.sun);var u,p,m;return this._hasPresent&&(e=st(this.hass,this._language,this._terms,this._iconsConfig,this._config.weather?.name,this._config?.weather?.present||null,this._config?.weather?.sun,this._config?.weather?.moonphase)),this._hasPresent&&(t=dt(this.hass,this._language,this._terms,this._config?.weather?.present||{},this._config?.weather?.sun)),(this._hasMetealarm||this._hasDPCalarm)&&(o=Et(this.hass,this._language,this._terms,this._config?.weather?.meteoalarm,this._config?.weather?.dpcalarm)),this._hasDailyForecasts&&(i=h(0)),this._hasHourlyForecasts&&(n=h(1)),this._hasMarineDailyForecasts&&(a=h(2)),this._hasMarineHourlyForecasts&&(s=h(3)),this._hasUltraviolet&&(u=this.hass,p=this._language,m=this._config.ultraviolet,r=pt({...gt(u,p,m)},{...yt(u,p,m)})),this._hasPollen&&(l=_t(this.hass,this._language,this._config.pollen)),this._hasAirQuality&&(c=((e,t,i)=>{const n=t||e.selectedLanguage||e.language,a=je({entityId:i.pm25,hass:e,lang:t,decimals:0}),s=je({entityId:i.pm10,hass:e,lang:t,decimals:0}),o=je({entityId:i.o3,hass:e,lang:t,decimals:1}),r=je({entityId:i.no2,hass:e,lang:t,decimals:0}),l=je({entityId:i.co,hass:e,lang:t,decimals:1}),c=je({entityId:i.so2,hass:e,lang:t,decimals:0}),d=je({entityId:i.epa_aqi,hass:e,lang:t,decimals:0}),h=Me(e,i.epa_primary_pollutant),u={pm25:{value:a?`pm2.5 ${a}`:a,unit:Re(e,i.pm25)||"µg/m³",icon:"mdi:weather-hazy"},pm10:{value:s?`pm10 ${s}`:s,unit:Re(e,i.pm10)||"µg/m³",icon:"mdi:weather-hazy"},o3:{value:o?`o3 ${o}`:o,unit:Re(e,i.o3)||"µg/m³",icon:"mdi:molecule"},no2:{value:r?`no2 ${r}`:r,unit:Re(e,i.no2)||"µg/m³",icon:"mdi:molecule"},co:{value:l?`co ${l}`:l,unit:Re(e,i.co)||"µg/m³",icon:"mdi:molecule"},so2:{value:c?`so2 ${c}`:c,unit:Re(e,i.so2)||"µg/m³",icon:"mdi:molecule"},epa_aqi:{value:d?`Air Quality Index ${d}`:d,icon:"mdi:weather-hazy",icon_color:(p=Number(Me(e,i.epa_aqi)),p<=50?"#009966":p<=100?"#ffde33":p<=150?"#ff9933":p<=200?"#cc0033":p<=300?"#660099":"#7e0023")},epa_primary_pollutant:{value:h?`Primary ${h}`:h,icon:"mdi:weather-hazy"}};var p;return ct(u,n)})(this.hass,this._language,this._config.airquality)),this._hasCamera&&(d=bt(this.hass,this._language,this._terms,this._handlePopup.bind(this),this._config.camera)),F`
    ${e}
    ${t}
    ${n}
    ${i}
    ${s}
    ${a}
    ${o}
    ${l}
    ${r}
    ${c}
    ${d}`}_handlePopup(e,t){e.stopPropagation();const i=new Event("hass-more-info",{composed:!0});i.detail={entityId:t},this.dispatchEvent(i)}};Ct=e([(e=>(t,i)=>{void 0!==i?i.addInitializer((()=>{customElements.define(e,t)})):customElements.define(e,t)})("ha-card-weather-conditions")],Ct);export{Ct as HaCardWeatherConditions};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
